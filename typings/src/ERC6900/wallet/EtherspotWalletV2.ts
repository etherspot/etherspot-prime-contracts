/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type ExecutionStruct = {
  target: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type ExecutionStructOutput = [string, BigNumber, string] & {
  target: string;
  value: BigNumber;
  data: string;
};

export type UserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  callGasLimit: PromiseOrValue<BigNumberish>;
  verificationGasLimit: PromiseOrValue<BigNumberish>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  maxFeePerGas: PromiseOrValue<BigNumberish>;
  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export declare namespace IPluginLoupe {
  export type ExecutionFunctionConfigStruct = {
    plugin: PromiseOrValue<string>;
    userOpValidationFunction: PromiseOrValue<BytesLike>;
    runtimeValidationFunction: PromiseOrValue<BytesLike>;
  };

  export type ExecutionFunctionConfigStructOutput = [string, string, string] & {
    plugin: string;
    userOpValidationFunction: string;
    runtimeValidationFunction: string;
  };

  export type ExecutionHooksStruct = {
    preExecHook: PromiseOrValue<BytesLike>;
    postExecHook: PromiseOrValue<BytesLike>;
  };

  export type ExecutionHooksStructOutput = [string, string] & {
    preExecHook: string;
    postExecHook: string;
  };
}

export declare namespace IPluginManager {
  export type InjectedHooksInfoStruct = {
    preExecHookFunctionId: PromiseOrValue<BigNumberish>;
    isPostHookUsed: PromiseOrValue<boolean>;
    postExecHookFunctionId: PromiseOrValue<BigNumberish>;
  };

  export type InjectedHooksInfoStructOutput = [number, boolean, number] & {
    preExecHookFunctionId: number;
    isPostHookUsed: boolean;
    postExecHookFunctionId: number;
  };

  export type InjectedHookStruct = {
    providingPlugin: PromiseOrValue<string>;
    selector: PromiseOrValue<BytesLike>;
    injectedHooksInfo: IPluginManager.InjectedHooksInfoStruct;
    hookApplyData: PromiseOrValue<BytesLike>;
  };

  export type InjectedHookStructOutput = [
    string,
    string,
    IPluginManager.InjectedHooksInfoStructOutput,
    string
  ] & {
    providingPlugin: string;
    selector: string;
    injectedHooksInfo: IPluginManager.InjectedHooksInfoStructOutput;
    hookApplyData: string;
  };
}

export interface EtherspotWalletV2Interface extends utils.Interface {
  functions: {
    "entryPoint()": FunctionFragment;
    "execute((address,uint256,bytes))": FunctionFragment;
    "executeBatch((address,uint256,bytes)[])": FunctionFragment;
    "executeFromPlugin(bytes)": FunctionFragment;
    "executeFromPluginExternal(address,uint256,bytes)": FunctionFragment;
    "getExecutionFunctionConfig(bytes4)": FunctionFragment;
    "getExecutionHooks(bytes4)": FunctionFragment;
    "getInstalledPlugins()": FunctionFragment;
    "getNonce()": FunctionFragment;
    "getPermittedCallHooks(address,bytes4)": FunctionFragment;
    "getPreRuntimeValidationHooks(bytes4)": FunctionFragment;
    "getPreUserOpValidationHooks(bytes4)": FunctionFragment;
    "initialize(address[],bytes32[],bytes[])": FunctionFragment;
    "installPlugin(address,bytes32,bytes,bytes21[],(address,bytes4,(uint8,bool,uint8),bytes)[])": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "uninstallPlugin(address,bytes,bytes,bytes[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "entryPoint"
      | "execute"
      | "executeBatch"
      | "executeFromPlugin"
      | "executeFromPluginExternal"
      | "getExecutionFunctionConfig"
      | "getExecutionHooks"
      | "getInstalledPlugins"
      | "getNonce"
      | "getPermittedCallHooks"
      | "getPreRuntimeValidationHooks"
      | "getPreUserOpValidationHooks"
      | "initialize"
      | "installPlugin"
      | "proxiableUUID"
      | "supportsInterface"
      | "uninstallPlugin"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validateUserOp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecutionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [ExecutionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromPlugin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromPluginExternal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionFunctionConfig",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionHooks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstalledPlugins",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPermittedCallHooks",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreRuntimeValidationHooks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreUserOpValidationHooks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "installPlugin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      IPluginManager.InjectedHookStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallPlugin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      UserOperationStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFromPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFromPluginExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionFunctionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstalledPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermittedCallHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreRuntimeValidationHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreUserOpValidationHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "installPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ModularAccountInitialized(address)": EventFragment;
    "PluginInstalled(address,bytes32)": EventFragment;
    "PluginUninstalled(address,bytes32,bool)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModularAccountInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginInstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginUninstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ModularAccountInitializedEventObject {
  entryPoint: string;
}
export type ModularAccountInitializedEvent = TypedEvent<
  [string],
  ModularAccountInitializedEventObject
>;

export type ModularAccountInitializedEventFilter =
  TypedEventFilter<ModularAccountInitializedEvent>;

export interface PluginInstalledEventObject {
  plugin: string;
  manifestHash: string;
}
export type PluginInstalledEvent = TypedEvent<
  [string, string],
  PluginInstalledEventObject
>;

export type PluginInstalledEventFilter = TypedEventFilter<PluginInstalledEvent>;

export interface PluginUninstalledEventObject {
  plugin: string;
  manifestHash: string;
  onUninstallSucceeded: boolean;
}
export type PluginUninstalledEvent = TypedEvent<
  [string, string, boolean],
  PluginUninstalledEventObject
>;

export type PluginUninstalledEventFilter =
  TypedEventFilter<PluginUninstalledEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface EtherspotWalletV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EtherspotWalletV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    execute(
      execution: ExecutionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeBatch(
      executions: ExecutionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeFromPlugin(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeFromPluginExternal(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPluginLoupe.ExecutionFunctionConfigStructOutput] & {
        config: IPluginLoupe.ExecutionFunctionConfigStructOutput;
      }
    >;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPluginLoupe.ExecutionHooksStructOutput[]] & {
        execHooks: IPluginLoupe.ExecutionHooksStructOutput[];
      }
    >;

    getInstalledPlugins(
      overrides?: CallOverrides
    ): Promise<[string[]] & { pluginAddresses: string[] }>;

    getNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPluginLoupe.ExecutionHooksStructOutput[]] & {
        execHooks: IPluginLoupe.ExecutionHooksStructOutput[];
      }
    >;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { preValidationHooks: string[] }>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { preValidationHooks: string[] }>;

    initialize(
      plugins: PromiseOrValue<string>[],
      manifestHashes: PromiseOrValue<BytesLike>[],
      pluginInstallDatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  entryPoint(overrides?: CallOverrides): Promise<string>;

  execute(
    execution: ExecutionStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeBatch(
    executions: ExecutionStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeFromPlugin(
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeFromPluginExternal(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExecutionFunctionConfig(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPluginLoupe.ExecutionFunctionConfigStructOutput>;

  getExecutionHooks(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

  getInstalledPlugins(overrides?: CallOverrides): Promise<string[]>;

  getNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getPermittedCallHooks(
    callingPlugin: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

  getPreRuntimeValidationHooks(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPreUserOpValidationHooks(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    plugins: PromiseOrValue<string>[],
    manifestHashes: PromiseOrValue<BytesLike>[],
    pluginInstallDatas: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installPlugin(
    plugin: PromiseOrValue<string>,
    manifestHash: PromiseOrValue<BytesLike>,
    pluginInitData: PromiseOrValue<BytesLike>,
    dependencies: PromiseOrValue<BytesLike>[],
    injectedHooks: IPluginManager.InjectedHookStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uninstallPlugin(
    plugin: PromiseOrValue<string>,
    config: PromiseOrValue<BytesLike>,
    pluginUninstallData: PromiseOrValue<BytesLike>,
    hookUnapplyData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: UserOperationStruct,
    userOpHash: PromiseOrValue<BytesLike>,
    missingAccountFunds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    entryPoint(overrides?: CallOverrides): Promise<string>;

    execute(
      execution: ExecutionStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executeBatch(
      executions: ExecutionStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    executeFromPlugin(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeFromPluginExternal(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPluginLoupe.ExecutionFunctionConfigStructOutput>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

    getInstalledPlugins(overrides?: CallOverrides): Promise<string[]>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      plugins: PromiseOrValue<string>[],
      manifestHashes: PromiseOrValue<BytesLike>[],
      pluginInstallDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ModularAccountInitialized(address)"(
      entryPoint?: PromiseOrValue<string> | null
    ): ModularAccountInitializedEventFilter;
    ModularAccountInitialized(
      entryPoint?: PromiseOrValue<string> | null
    ): ModularAccountInitializedEventFilter;

    "PluginInstalled(address,bytes32)"(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null
    ): PluginInstalledEventFilter;
    PluginInstalled(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null
    ): PluginInstalledEventFilter;

    "PluginUninstalled(address,bytes32,bool)"(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null,
      onUninstallSucceeded?: null
    ): PluginUninstalledEventFilter;
    PluginUninstalled(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null,
      onUninstallSucceeded?: null
    ): PluginUninstalledEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      execution: ExecutionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeBatch(
      executions: ExecutionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeFromPlugin(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeFromPluginExternal(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstalledPlugins(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      plugins: PromiseOrValue<string>[],
      manifestHashes: PromiseOrValue<BytesLike>[],
      pluginInstallDatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      execution: ExecutionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeBatch(
      executions: ExecutionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeFromPlugin(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeFromPluginExternal(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstalledPlugins(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      plugins: PromiseOrValue<string>[],
      manifestHashes: PromiseOrValue<BytesLike>[],
      pluginInstallDatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
