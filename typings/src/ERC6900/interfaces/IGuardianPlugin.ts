/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IGuardianPluginInterface extends utils.Interface {
  functions: {
    "addGuardian(address)": FunctionFragment;
    "changeProposalTimelock(uint256)": FunctionFragment;
    "discardCurrentProposal(address)": FunctionFragment;
    "getAccountCurrentProposalId(address)": FunctionFragment;
    "getAccountGuardianCount(address)": FunctionFragment;
    "getAccountProposalTimelock(address)": FunctionFragment;
    "getOwnersForAccount(address)": FunctionFragment;
    "getProposal(address,uint256)": FunctionFragment;
    "guardianCosign(address)": FunctionFragment;
    "guardianPropose(address,address)": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isGuardianOfAccount(address,address)": FunctionFragment;
    "removeGuardian(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGuardian"
      | "changeProposalTimelock"
      | "discardCurrentProposal"
      | "getAccountCurrentProposalId"
      | "getAccountGuardianCount"
      | "getAccountProposalTimelock"
      | "getOwnersForAccount"
      | "getProposal"
      | "guardianCosign"
      | "guardianPropose"
      | "isGuardian"
      | "isGuardianOfAccount"
      | "removeGuardian"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProposalTimelock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "discardCurrentProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCurrentProposalId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountGuardianCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountProposalTimelock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnersForAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "guardianCosign",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "guardianPropose",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuardianOfAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProposalTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discardCurrentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCurrentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountGuardianCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountProposalTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnersForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianCosign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianPropose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGuardianOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;

  events: {
    "GuardianAdded(address,address)": EventFragment;
    "GuardianProposalSubmitted(address,uint256,address)": EventFragment;
    "GuardianRemoved(address,address)": EventFragment;
    "ProposalDiscarded(address,uint256)": EventFragment;
    "ProposalTimelockChanged(address,uint256)": EventFragment;
    "QuorumNotReached(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianProposalSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalDiscarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalTimelockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumNotReached"): EventFragment;
}

export interface GuardianAddedEventObject {
  account: string;
  guardianAdded: string;
}
export type GuardianAddedEvent = TypedEvent<
  [string, string],
  GuardianAddedEventObject
>;

export type GuardianAddedEventFilter = TypedEventFilter<GuardianAddedEvent>;

export interface GuardianProposalSubmittedEventObject {
  account: string;
  proposalId: BigNumber;
  newOwnerProposed: string;
}
export type GuardianProposalSubmittedEvent = TypedEvent<
  [string, BigNumber, string],
  GuardianProposalSubmittedEventObject
>;

export type GuardianProposalSubmittedEventFilter =
  TypedEventFilter<GuardianProposalSubmittedEvent>;

export interface GuardianRemovedEventObject {
  account: string;
  removedGuardian: string;
}
export type GuardianRemovedEvent = TypedEvent<
  [string, string],
  GuardianRemovedEventObject
>;

export type GuardianRemovedEventFilter = TypedEventFilter<GuardianRemovedEvent>;

export interface ProposalDiscardedEventObject {
  account: string;
  proposalId: BigNumber;
}
export type ProposalDiscardedEvent = TypedEvent<
  [string, BigNumber],
  ProposalDiscardedEventObject
>;

export type ProposalDiscardedEventFilter =
  TypedEventFilter<ProposalDiscardedEvent>;

export interface ProposalTimelockChangedEventObject {
  account: string;
  newProposalTimelock: BigNumber;
}
export type ProposalTimelockChangedEvent = TypedEvent<
  [string, BigNumber],
  ProposalTimelockChangedEventObject
>;

export type ProposalTimelockChangedEventFilter =
  TypedEventFilter<ProposalTimelockChangedEvent>;

export interface QuorumNotReachedEventObject {
  account: string;
  proposalId: BigNumber;
  newOwnerProposed: string;
  approvalCount: BigNumber;
}
export type QuorumNotReachedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  QuorumNotReachedEventObject
>;

export type QuorumNotReachedEventFilter =
  TypedEventFilter<QuorumNotReachedEvent>;

export interface IGuardianPlugin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGuardianPluginInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    discardCurrentProposal(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountCurrentProposalId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountGuardianCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountProposalTimelock(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwnersForAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, string[], BigNumber] & {
        newOwnerProposed: string;
        resolved: boolean;
        approvalCount: BigNumber;
        guardiansApproved: string[];
        proposedAt: BigNumber;
      }
    >;

    guardianCosign(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guardianPropose(
      _account: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGuardianOfAccount(
      _account: PromiseOrValue<string>,
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGuardian(
    _newGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeProposalTimelock(
    _newTimelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  discardCurrentProposal(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountCurrentProposalId(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountGuardianCount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountProposalTimelock(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwnersForAccount(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    _account: PromiseOrValue<string>,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, string[], BigNumber] & {
      newOwnerProposed: string;
      resolved: boolean;
      approvalCount: BigNumber;
      guardiansApproved: string[];
      proposedAt: BigNumber;
    }
  >;

  guardianCosign(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guardianPropose(
    _account: PromiseOrValue<string>,
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGuardianOfAccount(
    _account: PromiseOrValue<string>,
    _guardian: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    discardCurrentProposal(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountCurrentProposalId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountGuardianCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountProposalTimelock(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnersForAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProposal(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, string[], BigNumber] & {
        newOwnerProposed: string;
        resolved: boolean;
        approvalCount: BigNumber;
        guardiansApproved: string[];
        proposedAt: BigNumber;
      }
    >;

    guardianCosign(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    guardianPropose(
      _account: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGuardianOfAccount(
      _account: PromiseOrValue<string>,
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GuardianAdded(address,address)"(
      account?: null,
      guardianAdded?: null
    ): GuardianAddedEventFilter;
    GuardianAdded(
      account?: null,
      guardianAdded?: null
    ): GuardianAddedEventFilter;

    "GuardianProposalSubmitted(address,uint256,address)"(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null
    ): GuardianProposalSubmittedEventFilter;
    GuardianProposalSubmitted(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null
    ): GuardianProposalSubmittedEventFilter;

    "GuardianRemoved(address,address)"(
      account?: null,
      removedGuardian?: null
    ): GuardianRemovedEventFilter;
    GuardianRemoved(
      account?: null,
      removedGuardian?: null
    ): GuardianRemovedEventFilter;

    "ProposalDiscarded(address,uint256)"(
      account?: null,
      proposalId?: null
    ): ProposalDiscardedEventFilter;
    ProposalDiscarded(
      account?: null,
      proposalId?: null
    ): ProposalDiscardedEventFilter;

    "ProposalTimelockChanged(address,uint256)"(
      account?: null,
      newProposalTimelock?: null
    ): ProposalTimelockChangedEventFilter;
    ProposalTimelockChanged(
      account?: null,
      newProposalTimelock?: null
    ): ProposalTimelockChangedEventFilter;

    "QuorumNotReached(address,uint256,address,uint256)"(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null,
      approvalCount?: null
    ): QuorumNotReachedEventFilter;
    QuorumNotReached(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null,
      approvalCount?: null
    ): QuorumNotReachedEventFilter;
  };

  estimateGas: {
    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    discardCurrentProposal(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountCurrentProposalId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountGuardianCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountProposalTimelock(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnersForAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposal(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardianCosign(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guardianPropose(
      _account: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGuardianOfAccount(
      _account: PromiseOrValue<string>,
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    discardCurrentProposal(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountCurrentProposalId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountGuardianCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountProposalTimelock(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnersForAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      _account: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardianCosign(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guardianPropose(
      _account: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGuardianOfAccount(
      _account: PromiseOrValue<string>,
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
