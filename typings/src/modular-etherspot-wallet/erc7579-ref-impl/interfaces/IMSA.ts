/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type PackedUserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  accountGasLimits: PromiseOrValue<BytesLike>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  gasFees: PromiseOrValue<BytesLike>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type PackedUserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  string,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: BigNumber;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export interface IMSAInterface extends utils.Interface {
  functions: {
    "accountId()": FunctionFragment;
    "execute(bytes32,bytes)": FunctionFragment;
    "executeFromExecutor(bytes32,bytes)": FunctionFragment;
    "executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": FunctionFragment;
    "initializeAccount(bytes)": FunctionFragment;
    "installModule(uint256,address,bytes)": FunctionFragment;
    "isModuleInstalled(uint256,address,bytes)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "supportsExecutionMode(bytes32)": FunctionFragment;
    "supportsModule(uint256)": FunctionFragment;
    "uninstallModule(uint256,address,bytes)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountId"
      | "execute"
      | "executeFromExecutor"
      | "executeUserOp"
      | "initializeAccount"
      | "installModule"
      | "isModuleInstalled"
      | "isValidSignature"
      | "supportsExecutionMode"
      | "supportsModule"
      | "uninstallModule"
      | "validateUserOp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromExecutor",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUserOp",
    values: [PackedUserOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAccount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleInstalled",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsExecutionMode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsModule",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallModule",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      PackedUserOperationStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFromExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsExecutionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {
    "ModuleInstalled(uint256,address)": EventFragment;
    "ModuleUninstalled(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleInstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleUninstalled"): EventFragment;
}

export interface ModuleInstalledEventObject {
  moduleTypeId: BigNumber;
  module: string;
}
export type ModuleInstalledEvent = TypedEvent<
  [BigNumber, string],
  ModuleInstalledEventObject
>;

export type ModuleInstalledEventFilter = TypedEventFilter<ModuleInstalledEvent>;

export interface ModuleUninstalledEventObject {
  moduleTypeId: BigNumber;
  module: string;
}
export type ModuleUninstalledEvent = TypedEvent<
  [BigNumber, string],
  ModuleUninstalledEventObject
>;

export type ModuleUninstalledEventFilter =
  TypedEventFilter<ModuleUninstalledEvent>;

export interface IMSA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMSAInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountId(
      overrides?: CallOverrides
    ): Promise<[string] & { accountImplementationId: string }>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsExecutionMode(
      encodedMode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountId(overrides?: CallOverrides): Promise<string>;

  execute(
    mode: PromiseOrValue<BytesLike>,
    executionCalldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeFromExecutor(
    mode: PromiseOrValue<BytesLike>,
    executionCalldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUserOp(
    userOp: PackedUserOperationStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeAccount(
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installModule(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    initData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isModuleInstalled(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    additionalContext: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    hash: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsExecutionMode(
    encodedMode: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsModule(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uninstallModule(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    deInitData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: PackedUserOperationStruct,
    userOpHash: PromiseOrValue<BytesLike>,
    missingAccountFunds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountId(overrides?: CallOverrides): Promise<string>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsExecutionMode(
      encodedMode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ModuleInstalled(uint256,address)"(
      moduleTypeId?: null,
      module?: null
    ): ModuleInstalledEventFilter;
    ModuleInstalled(
      moduleTypeId?: null,
      module?: null
    ): ModuleInstalledEventFilter;

    "ModuleUninstalled(uint256,address)"(
      moduleTypeId?: null,
      module?: null
    ): ModuleUninstalledEventFilter;
    ModuleUninstalled(
      moduleTypeId?: null,
      module?: null
    ): ModuleUninstalledEventFilter;
  };

  estimateGas: {
    accountId(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsExecutionMode(
      encodedMode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsExecutionMode(
      encodedMode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
