/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPluginLoupe,
  IPluginLoupeInterface,
} from "../../../../erc6900-ref-impl/src/interfaces/IPluginLoupe";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getExecutionFunctionConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "plugin",
            type: "address",
          },
          {
            internalType: "FunctionReference",
            name: "userOpValidationFunction",
            type: "bytes21",
          },
          {
            internalType: "FunctionReference",
            name: "runtimeValidationFunction",
            type: "bytes21",
          },
        ],
        internalType: "struct IPluginLoupe.ExecutionFunctionConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getExecutionHooks",
    outputs: [
      {
        components: [
          {
            internalType: "FunctionReference",
            name: "preExecHook",
            type: "bytes21",
          },
          {
            internalType: "FunctionReference",
            name: "postExecHook",
            type: "bytes21",
          },
        ],
        internalType: "struct IPluginLoupe.ExecutionHooks[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInstalledPlugins",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callingPlugin",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getPermittedCallHooks",
    outputs: [
      {
        components: [
          {
            internalType: "FunctionReference",
            name: "preExecHook",
            type: "bytes21",
          },
          {
            internalType: "FunctionReference",
            name: "postExecHook",
            type: "bytes21",
          },
        ],
        internalType: "struct IPluginLoupe.ExecutionHooks[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getPreRuntimeValidationHooks",
    outputs: [
      {
        internalType: "FunctionReference[]",
        name: "",
        type: "bytes21[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getPreUserOpValidationHooks",
    outputs: [
      {
        internalType: "FunctionReference[]",
        name: "",
        type: "bytes21[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPluginLoupe__factory {
  static readonly abi = _abi;
  static createInterface(): IPluginLoupeInterface {
    return new utils.Interface(_abi) as IPluginLoupeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPluginLoupe {
    return new Contract(address, _abi, signerOrProvider) as IPluginLoupe;
  }
}
