/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AccountBase,
  AccountBaseInterface,
} from "../../../../erc7579-ref-impl/src/core/AccountBase";

const _abi = [
  {
    inputs: [],
    name: "AccountAccessUnauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50608a8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b0d691fe14602d575b600080fd5b60408051735ff137d4b0fdcd49dca30c7cf57e578a026d2789815290519081900360200190f3fea2646970667358221220298efe5f8b4aea877f45f66136c11fa5fe3c9b77a92e236d7acb79cbe50c4d3b64736f6c63430008170033";

type AccountBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountBase__factory extends ContractFactory {
  constructor(...args: AccountBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AccountBase> {
    return super.deploy(overrides || {}) as Promise<AccountBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AccountBase {
    return super.attach(address) as AccountBase;
  }
  override connect(signer: Signer): AccountBase__factory {
    return super.connect(signer) as AccountBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountBaseInterface {
    return new utils.Interface(_abi) as AccountBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountBase {
    return new Contract(address, _abi, signerOrProvider) as AccountBase;
  }
}
