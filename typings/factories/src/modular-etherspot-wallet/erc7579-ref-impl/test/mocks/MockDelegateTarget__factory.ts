/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MockDelegateTarget,
  MockDelegateTargetInterface,
} from "../../../../../../src/modular-etherspot-wallet/erc7579-ref-impl/test/mocks/MockDelegateTarget";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "sendValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060fd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806324a084df14602d575b600080fd5b603c60383660046091565b603e565b005b6040516001600160a01b038316908290600081818185875af1925050503d80600081146085576040519150601f19603f3d011682016040523d82523d6000602084013e608a565b606091505b5050505050565b6000806040838503121560a357600080fd5b82356001600160a01b038116811460b957600080fd5b94602093909301359350505056fea264697066735822122015105a1732aaf630114ae4deb9c5cbfd87cecbd7d2e8fef4f4300a2d49c0ea6064736f6c63430008170033";

type MockDelegateTargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDelegateTargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDelegateTarget__factory extends ContractFactory {
  constructor(...args: MockDelegateTargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockDelegateTarget> {
    return super.deploy(overrides || {}) as Promise<MockDelegateTarget>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockDelegateTarget {
    return super.attach(address) as MockDelegateTarget;
  }
  override connect(signer: Signer): MockDelegateTarget__factory {
    return super.connect(signer) as MockDelegateTarget__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDelegateTargetInterface {
    return new utils.Interface(_abi) as MockDelegateTargetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDelegateTarget {
    return new Contract(address, _abi, signerOrProvider) as MockDelegateTarget;
  }
}
