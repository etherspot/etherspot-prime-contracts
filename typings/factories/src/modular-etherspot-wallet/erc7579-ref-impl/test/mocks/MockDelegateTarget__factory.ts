/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MockDelegateTarget,
  MockDelegateTargetInterface,
} from "../../../../../../src/modular-etherspot-wallet/erc7579-ref-impl/test/mocks/MockDelegateTarget";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "sendValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061020e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806324a084df14610030575b600080fd5b61004a60048036038101906100459190610152565b61004c565b005b8173ffffffffffffffffffffffffffffffffffffffff1681604051610070906101c3565b60006040518083038185875af1925050503d80600081146100ad576040519150601f19603f3d011682016040523d82523d6000602084013e6100b2565b606091505b5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e9826100be565b9050919050565b6100f9816100de565b811461010457600080fd5b50565b600081359050610116816100f0565b92915050565b6000819050919050565b61012f8161011c565b811461013a57600080fd5b50565b60008135905061014c81610126565b92915050565b60008060408385031215610169576101686100b9565b5b600061017785828601610107565b92505060206101888582860161013d565b9150509250929050565b600081905092915050565b50565b60006101ad600083610192565b91506101b88261019d565b600082019050919050565b60006101ce826101a0565b915081905091905056fea2646970667358221220f6e5cab56cf4bccbf870d8b808052681b0962a1038738d98cece52a972a5511564736f6c63430008170033";

type MockDelegateTargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDelegateTargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDelegateTarget__factory extends ContractFactory {
  constructor(...args: MockDelegateTargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockDelegateTarget> {
    return super.deploy(overrides || {}) as Promise<MockDelegateTarget>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockDelegateTarget {
    return super.attach(address) as MockDelegateTarget;
  }
  override connect(signer: Signer): MockDelegateTarget__factory {
    return super.connect(signer) as MockDelegateTarget__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDelegateTargetInterface {
    return new utils.Interface(_abi) as MockDelegateTargetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDelegateTarget {
    return new Contract(address, _abi, signerOrProvider) as MockDelegateTarget;
  }
}
