/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MockValidator,
  MockValidatorInterface,
} from "../../../../../../src/modular-etherspot-wallet/erc7579-ref-impl/test/mocks/MockValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "InvalidTargetAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "moduleTypeId",
        type: "uint256",
      },
    ],
    name: "isModuleType",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "isValidSignatureWithSender",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onInstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onUninstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636d61fe70146100675780638a91b0e314610083578063970032031461009f578063d60b347f146100cf578063ecd05961146100ff578063f551e2ee1461012f575b600080fd5b610081600480360381019061007c9190610231565b61015f565b005b61009d60048036038101906100989190610231565b610163565b005b6100b960048036038101906100b491906102d9565b610167565b6040516100c6919061034e565b60405180910390f35b6100e960048036038101906100e491906103c7565b6101a4565b6040516100f6919061040f565b60405180910390f35b61011960048036038101906101149190610456565b6101ab565b604051610126919061040f565b60405180910390f35b61014960048036038101906101449190610483565b6101b8565b6040516101569190610532565b60405180910390f35b5050565b5050565b60008083806060019061017a919061055c565b60009060049261018c939291906105c9565b90610197919061061c565b9050600091505092915050565b6000919050565b6000600182149050919050565b6000949350505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126101f1576101f06101cc565b5b8235905067ffffffffffffffff81111561020e5761020d6101d1565b5b60208301915083600182028301111561022a576102296101d6565b5b9250929050565b60008060208385031215610248576102476101c2565b5b600083013567ffffffffffffffff811115610266576102656101c7565b5b610272858286016101db565b92509250509250929050565b600080fd5b6000610120828403121561029a5761029961027e565b5b81905092915050565b6000819050919050565b6102b6816102a3565b81146102c157600080fd5b50565b6000813590506102d3816102ad565b92915050565b600080604083850312156102f0576102ef6101c2565b5b600083013567ffffffffffffffff81111561030e5761030d6101c7565b5b61031a85828601610283565b925050602061032b858286016102c4565b9150509250929050565b6000819050919050565b61034881610335565b82525050565b6000602082019050610363600083018461033f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061039482610369565b9050919050565b6103a481610389565b81146103af57600080fd5b50565b6000813590506103c18161039b565b92915050565b6000602082840312156103dd576103dc6101c2565b5b60006103eb848285016103b2565b91505092915050565b60008115159050919050565b610409816103f4565b82525050565b60006020820190506104246000830184610400565b92915050565b61043381610335565b811461043e57600080fd5b50565b6000813590506104508161042a565b92915050565b60006020828403121561046c5761046b6101c2565b5b600061047a84828501610441565b91505092915050565b6000806000806060858703121561049d5761049c6101c2565b5b60006104ab878288016103b2565b94505060206104bc878288016102c4565b935050604085013567ffffffffffffffff8111156104dd576104dc6101c7565b5b6104e9878288016101db565b925092505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61052c816104f7565b82525050565b60006020820190506105476000830184610523565b92915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126105795761057861054d565b5b80840192508235915067ffffffffffffffff82111561059b5761059a610552565b5b6020830192506001820236038313156105b7576105b6610557565b5b509250929050565b600080fd5b600080fd5b600080858511156105dd576105dc6105bf565b5b838611156105ee576105ed6105c4565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b60006106288383610604565b8261063381356104f7565b925060048210156106735761066e7fffffffff000000000000000000000000000000000000000000000000000000008360040360080261060f565b831692505b50509291505056fea26469706673582212209f4d9af34892cefbc0de2f8e9cb12e86e38535e1e5cff811d18aaa40ecb5f83f64736f6c63430008170033";

type MockValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockValidator__factory extends ContractFactory {
  constructor(...args: MockValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockValidator> {
    return super.deploy(overrides || {}) as Promise<MockValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockValidator {
    return super.attach(address) as MockValidator;
  }
  override connect(signer: Signer): MockValidator__factory {
    return super.connect(signer) as MockValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockValidatorInterface {
    return new utils.Interface(_abi) as MockValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockValidator {
    return new Contract(address, _abi, signerOrProvider) as MockValidator;
  }
}
