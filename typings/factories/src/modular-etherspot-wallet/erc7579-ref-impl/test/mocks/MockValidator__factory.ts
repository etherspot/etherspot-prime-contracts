/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MockValidator,
  MockValidatorInterface,
} from "../../../../../../src/modular-etherspot-wallet/erc7579-ref-impl/test/mocks/MockValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "InvalidTargetAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "moduleTypeId",
        type: "uint256",
      },
    ],
    name: "isModuleType",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "isValidSignatureWithSender",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onInstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onUninstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061039b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636d61fe70146100675780638a91b0e314610067578063970032031461007b578063d60b347f146100a1578063ecd05961146100c5578063f551e2ee146100d9575b600080fd5b610079610075366004610186565b5050565b005b61008e6100893660046101c8565b61010a565b6040519081526020015b60405180910390f35b6100b56100af36600461022f565b50600090565b6040519015158152602001610098565b6100b56100d3366004610251565b60011490565b6100f16100e736600461026a565b6000949350505050565b6040516001600160e01b03199091168152602001610098565b60008061011a60608501856102c4565b6101299160049160009161030b565b61013291610335565b506000949350505050565b60008083601f84011261014f57600080fd5b50813567ffffffffffffffff81111561016757600080fd5b60208301915083602082850101111561017f57600080fd5b9250929050565b6000806020838503121561019957600080fd5b823567ffffffffffffffff8111156101b057600080fd5b6101bc8582860161013d565b90969095509350505050565b600080604083850312156101db57600080fd5b823567ffffffffffffffff8111156101f257600080fd5b8301610120818603121561020557600080fd5b946020939093013593505050565b80356001600160a01b038116811461022a57600080fd5b919050565b60006020828403121561024157600080fd5b61024a82610213565b9392505050565b60006020828403121561026357600080fd5b5035919050565b6000806000806060858703121561028057600080fd5b61028985610213565b935060208501359250604085013567ffffffffffffffff8111156102ac57600080fd5b6102b88782880161013d565b95989497509550505050565b6000808335601e198436030181126102db57600080fd5b83018035915067ffffffffffffffff8211156102f657600080fd5b60200191503681900382131561017f57600080fd5b6000808585111561031b57600080fd5b8386111561032857600080fd5b5050820193919092039150565b6001600160e01b0319813581811691600485101561035d5780818660040360031b1b83161692505b50509291505056fea2646970667358221220bb7ded090712317f91a1b500655a4dce9c7528a724916fa91725a220350da2e464736f6c63430008170033";

type MockValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockValidator__factory extends ContractFactory {
  constructor(...args: MockValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockValidator> {
    return super.deploy(overrides || {}) as Promise<MockValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockValidator {
    return super.attach(address) as MockValidator;
  }
  override connect(signer: Signer): MockValidator__factory {
    return super.connect(signer) as MockValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockValidatorInterface {
    return new utils.Interface(_abi) as MockValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockValidator {
    return new Contract(address, _abi, signerOrProvider) as MockValidator;
  }
}
