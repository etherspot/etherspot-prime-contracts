/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  MultipleOwnerECDSAValidator,
  MultipleOwnerECDSAValidatorInterface,
} from "../../../../../src/modular-etherspot-wallet/modules/validators/MultipleOwnerECDSAValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidExec",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "InvalidTargetAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "RequiredModule",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "typeID",
        type: "uint256",
      },
    ],
    name: "isModuleType",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "isValidSignatureWithSender",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onInstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onUninstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061084f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636d61fe70146100675780638a91b0e31461007c578063970032031461008f578063d60b347f146100b5578063ecd05961146100f1578063f551e2ee14610105575b600080fd5b61007a6100753660046105b1565b610131565b005b61007a61008a3660046105b1565b610186565b6100a261009d3660046105f3565b61019f565b6040519081526020015b60405180910390f35b6100e16100c336600461065a565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020016100ac565b6100e16100ff36600461067c565b60011490565b610118610113366004610695565b610378565b6040516001600160e01b031990911681526020016100ac565b3360009081526020819052604090205460ff1615610168576040516393360fbf60e01b815233600482015260240160405180910390fd5b5050336000908152602081905260409020805460ff19166001179055565b60405163cf9e0d0160e01b815260040160405180910390fd5b6000806101d1836020527b19457468657265756d205369676e6564204d6573736167653a0a3332600052603c60042090565b905060006102236101e66101008701876106ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086939250506104869050565b90506001600160a01b03811615806102a057506040516317aa5fb760e11b81526001600160a01b03821660048201523390632f54bf6e90602401602060405180830381865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610736565b155b156102b057600192505050610372565b60006102bf60608701876106ef565b6102ce91600491600091610758565b6102d791610782565b905060006102e860608801886106ef565b60048181106102f9576102f96107b2565b909101356001600160f81b0319169150369050600061031b60608a018a6106ef565b610329916024908290610758565b9092509050600160f81b6001600160f81b031984161461036b576001600160f81b0319831661036b576000803660006103628686610517565b50505050505050505b5050505050505b92915050565b6000806103aa856020527b19457468657265756d205369676e6564204d6573736167653a0a3332600052603c60042090565b905060006103ee8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061048692505050565b6040516317aa5fb760e11b81526001600160a01b03821660048201529091503390632f54bf6e90602401602060405180830381865afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190610736565b156104705750630b135d3f60e11b915061047e9050565b506001600160e01b03199150505b949350505050565b60405160019083600052602083015160405260408351036104c257604083015160ff81901c601b016020526001600160ff1b03166060526104e8565b60418351036104e357606083015160001a60205260408301516060526104e8565b600091505b6020600160806000855afa5191503d61050957638baa579f6000526004601cfd5b600060605260405292915050565b60008036816105296014828789610758565b610532916107c8565b60601c9350610545603460148789610758565b61054e916107fb565b925061055d8560348189610758565b949793965094505050565b60008083601f84011261057a57600080fd5b50813567ffffffffffffffff81111561059257600080fd5b6020830191508360208285010111156105aa57600080fd5b9250929050565b600080602083850312156105c457600080fd5b823567ffffffffffffffff8111156105db57600080fd5b6105e785828601610568565b90969095509350505050565b6000806040838503121561060657600080fd5b823567ffffffffffffffff81111561061d57600080fd5b8301610120818603121561063057600080fd5b946020939093013593505050565b80356001600160a01b038116811461065557600080fd5b919050565b60006020828403121561066c57600080fd5b6106758261063e565b9392505050565b60006020828403121561068e57600080fd5b5035919050565b600080600080606085870312156106ab57600080fd5b6106b48561063e565b935060208501359250604085013567ffffffffffffffff8111156106d757600080fd5b6106e387828801610568565b95989497509550505050565b6000808335601e1984360301811261070657600080fd5b83018035915067ffffffffffffffff82111561072157600080fd5b6020019150368190038213156105aa57600080fd5b60006020828403121561074857600080fd5b8151801515811461067557600080fd5b6000808585111561076857600080fd5b8386111561077557600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156107aa5780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052603260045260246000fd5b6bffffffffffffffffffffffff1981358181169160148510156107aa5760149490940360031b84901b1690921692915050565b8035602083101561037257600019602084900360031b1b169291505056fea2646970667358221220fe169f8b418c144cc9628b88bd60748aa94366a9e15d032c848d62a5c702120a64736f6c63430008170033";

type MultipleOwnerECDSAValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleOwnerECDSAValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleOwnerECDSAValidator__factory extends ContractFactory {
  constructor(...args: MultipleOwnerECDSAValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultipleOwnerECDSAValidator> {
    return super.deploy(
      overrides || {}
    ) as Promise<MultipleOwnerECDSAValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleOwnerECDSAValidator {
    return super.attach(address) as MultipleOwnerECDSAValidator;
  }
  override connect(signer: Signer): MultipleOwnerECDSAValidator__factory {
    return super.connect(signer) as MultipleOwnerECDSAValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleOwnerECDSAValidatorInterface {
    return new utils.Interface(_abi) as MultipleOwnerECDSAValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleOwnerECDSAValidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultipleOwnerECDSAValidator;
  }
}
