/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  HookManager,
  HookManagerInterface,
} from "../../../../../../src/modular-etherspot-wallet/modules/validators/MultipleOwnerECDSAValidator_flattened.sol/HookManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "currentHook",
        type: "address",
      },
    ],
    name: "HookAlreadyInstalled",
    type: "error",
  },
  {
    inputs: [],
    name: "HookPostCheckFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "getActiveHook",
    outputs: [
      {
        internalType: "address",
        name: "hook",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class HookManager__factory {
  static readonly abi = _abi;
  static createInterface(): HookManagerInterface {
    return new utils.Interface(_abi) as HookManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HookManager {
    return new Contract(address, _abi, signerOrProvider) as HookManager;
  }
}
