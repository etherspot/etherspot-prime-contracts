/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MultipleOwnerECDSAValidator,
  MultipleOwnerECDSAValidatorInterface,
} from "../../../../src/modular-etherspot-wallet/modules/MultipleOwnerECDSAValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidExec",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "InvalidTargetAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "smartAccount",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "typeID",
        type: "uint256",
      },
    ],
    name: "isModuleType",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "isValidSignatureWithSender",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onInstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onUninstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61012060405234801561001157600080fd5b50306080524660a052606080610073604080518082018252601b81527f4d756c7469706c654f776e6572454344534156616c696461746f720000000000602080830191909152825180840190935260058352640312e302e360dc1b9083015291565b815160209283012081519183019190912060c082905260e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152938401929092529082015246606082015230608082015260a0902061010052506100dc9050565b60805160a05160c05160e05161010051610ae56101116000396000505060005050600050506000505060005050610ae56000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063970032031161005b57806397003203146100ce578063d60b347f146100ef578063ecd059611461012b578063f551e2ee1461013f57600080fd5b80636d61fe701461008257806384b0196e146100975780638a91b0e3146100bb575b600080fd5b610095610090366004610768565b61016b565b005b61009f6101c1565b6040516100b297969594939291906107f0565b60405180910390f35b6100956100c9366004610768565b6101e8565b6100e16100dc366004610889565b610235565b6040519081526020016100b2565b61011b6100fd3660046108f0565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020016100b2565b61011b610139366004610912565b60011490565b61015261014d36600461092b565b61040e565b6040516001600160e01b031990911681526020016100b2565b3360009081526020819052604090205460ff16156101a3576040516393360fbf60e01b81523360048201526024015b60405180910390fd5b5050336000908152602081905260409020805460ff19166001179055565b600f60f81b60608060008080836101d6610567565b97989097965046955030945091925090565b3360009081526020819052604090205460ff1661021a5760405163f91bd6f160e01b815233600482015260240161019a565b5050336000908152602081905260409020805460ff19169055565b600080610267836020527b19457468657265756d205369676e6564204d6573736167653a0a3332600052603c60042090565b905060006102b961027c610100870187610985565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086939250506105ba9050565b90506001600160a01b038116158061033657506040516317aa5fb760e11b81526001600160a01b03821660048201523390632f54bf6e90602401602060405180830381865afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033491906109cc565b155b1561034657600192505050610408565b60006103556060870187610985565b610364916004916000916109ee565b61036d91610a18565b9050600061037e6060880188610985565b600481811061038f5761038f610a48565b909101356001600160f81b031916915036905060006103b160608a018a610985565b6103bf9160249082906109ee565b9092509050600160f81b6001600160f81b0319841614610401576001600160f81b03198316610401576000803660006103f8868661064b565b50505050505050505b5050505050505b92915050565b60008061041961069c565b60405161190160f01b602082015260228101829052604281018790529091506000906062016040516020818303038152906040528051906020012090506000610487826020527b19457468657265756d205369676e6564204d6573736167653a0a3332600052603c60042090565b905060006104cb8288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105ba92505050565b6040516317aa5fb760e11b81526001600160a01b03821660048201529091503390632f54bf6e90602401602060405180830381865afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053691906109cc565b1561054f5750630b135d3f60e11b935061055f92505050565b506001600160e01b031993505050505b949350505050565b604080518082018252601b81527f4d756c7469706c654f776e6572454344534156616c696461746f720000000000602080830191909152825180840190935260058352640312e302e360dc1b9083015291565b60405160019083600052602083015160405260408351036105f657604083015160ff81901c601b016020526001600160ff1b031660605261061c565b604183510361061757606083015160001a602052604083015160605261061c565b600091505b6020600160806000855afa5191503d61063d57638baa579f6000526004601cfd5b600060605260405292915050565b600080368161065d60148287896109ee565b61066691610a5e565b60601c93506106796034601487896109ee565b61068291610a91565b925061069185603481896109ee565b949793965094505050565b60008060006106a9610567565b8151602092830120815191830191909120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818601528082019390935260608301919091524660808301523060a0808401919091528151808403909101815260c0909201905280519101209392505050565b60008083601f84011261073157600080fd5b50813567ffffffffffffffff81111561074957600080fd5b60208301915083602082850101111561076157600080fd5b9250929050565b6000806020838503121561077b57600080fd5b823567ffffffffffffffff81111561079257600080fd5b61079e8582860161071f565b90969095509350505050565b6000815180845260005b818110156107d0576020818501810151868301820152016107b4565b506000602082860101526020601f19601f83011685010191505092915050565b60ff60f81b881681526000602060e0602084015261081160e084018a6107aa565b8381036040850152610823818a6107aa565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156108775783518352928401929184019160010161085b565b50909c9b505050505050505050505050565b6000806040838503121561089c57600080fd5b823567ffffffffffffffff8111156108b357600080fd5b830161012081860312156108c657600080fd5b946020939093013593505050565b80356001600160a01b03811681146108eb57600080fd5b919050565b60006020828403121561090257600080fd5b61090b826108d4565b9392505050565b60006020828403121561092457600080fd5b5035919050565b6000806000806060858703121561094157600080fd5b61094a856108d4565b935060208501359250604085013567ffffffffffffffff81111561096d57600080fd5b6109798782880161071f565b95989497509550505050565b6000808335601e1984360301811261099c57600080fd5b83018035915067ffffffffffffffff8211156109b757600080fd5b60200191503681900382131561076157600080fd5b6000602082840312156109de57600080fd5b8151801515811461090b57600080fd5b600080858511156109fe57600080fd5b83861115610a0b57600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610a405780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052603260045260246000fd5b6bffffffffffffffffffffffff198135818116916014851015610a405760149490940360031b84901b1690921692915050565b8035602083101561040857600019602084900360031b1b169291505056fea26469706673582212201fe3642882d77a4b6bc02b85ce850e1f76ef2fa6af458f0114000574f7542a7964736f6c63430008170033";

type MultipleOwnerECDSAValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleOwnerECDSAValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleOwnerECDSAValidator__factory extends ContractFactory {
  constructor(...args: MultipleOwnerECDSAValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultipleOwnerECDSAValidator> {
    return super.deploy(
      overrides || {}
    ) as Promise<MultipleOwnerECDSAValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultipleOwnerECDSAValidator {
    return super.attach(address) as MultipleOwnerECDSAValidator;
  }
  override connect(signer: Signer): MultipleOwnerECDSAValidator__factory {
    return super.connect(signer) as MultipleOwnerECDSAValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleOwnerECDSAValidatorInterface {
    return new utils.Interface(_abi) as MultipleOwnerECDSAValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultipleOwnerECDSAValidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultipleOwnerECDSAValidator;
  }
}
