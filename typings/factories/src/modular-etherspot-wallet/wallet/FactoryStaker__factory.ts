/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../common';
import type {
  FactoryStaker,
  FactoryStakerInterface,
} from '../../../../src/modular-etherspot-wallet/wallet/FactoryStaker';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FactoryStaker_InvalidEPAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NewOwnerIsZeroAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoHandoverRequest',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Unauthorized',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'pendingOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipHandoverCanceled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'pendingOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipHandoverRequested',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'oldOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_epAddress',
        type: 'address',
      },
      {
        internalType: 'uint32',
        name: '_unstakeDelaySec',
        type: 'uint32',
      },
    ],
    name: 'addStake',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelOwnershipHandover',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'pendingOwner',
        type: 'address',
      },
    ],
    name: 'completeOwnershipHandover',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: 'result',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'pendingOwner',
        type: 'address',
      },
    ],
    name: 'ownershipHandoverExpiresAt',
    outputs: [
      {
        internalType: 'uint256',
        name: 'result',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'requestOwnershipHandover',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_epAddress',
        type: 'address',
      },
    ],
    name: 'unlockStake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_epAddress',
        type: 'address',
      },
      {
        internalType: 'address payable',
        name: '_withdrawTo',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161063938038061063983398101604081905261002f9161007a565b6100388161003e565b506100aa565b6001600160a01b0316638b78c6d8198190558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a350565b60006020828403121561008c57600080fd5b81516001600160a01b03811681146100a357600080fd5b9392505050565b610580806100b96000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b146100e3578063b36f970514610114578063f04e283e14610134578063f2fde38b14610147578063fee81cf41461015a57600080fd5b8063256929621461009657806345171159146100a05780634a1ce599146100b357806354d1f13d146100d3578063715018a6146100db575b600080fd5b61009e61019b565b005b61009e6100ae3660046104b6565b6101eb565b3480156100bf57600080fd5b5061009e6100ce3660046104f8565b61027e565b61009e610303565b61009e61033f565b3480156100ef57600080fd5b50638b78c6d819546040516001600160a01b0390911681526020015b60405180910390f35b34801561012057600080fd5b5061009e61012f36600461051c565b610353565b61009e6101423660046104f8565b6103e1565b61009e6101553660046104f8565b610421565b34801561016657600080fd5b5061018d6101753660046104f8565b63389a75e1600c908152600091909152602090205490565b60405190815260200161010b565b60006202a30067ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b6101f3610448565b6001600160a01b03821661021a576040516301650c7760e51b815260040160405180910390fd5b604051621cb65b60e51b815263ffffffff821660048201526001600160a01b03831690630396cb609034906024016000604051808303818588803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b50505050505050565b610286610448565b6001600160a01b0381166102ad576040516301650c7760e51b815260040160405180910390fd5b806001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b5050505050565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b610347610448565b6103516000610463565b565b61035b610448565b6001600160a01b038216610382576040516301650c7760e51b815260040160405180910390fd5b60405163611d2e7560e11b81526001600160a01b03828116600483015283169063c23a5cea90602401600060405180830381600087803b1580156103c557600080fd5b505af11580156103d9573d6000803e3d6000fd5b505050505050565b6103e9610448565b63389a75e1600c52806000526020600c20805442111561041157636f5e88186000526004601cfd5b6000905561041e81610463565b50565b610429610448565b8060601b61043f57637448fbae6000526004601cfd5b61041e81610463565b638b78c6d819543314610351576382b429006000526004601cfd5b638b78c6d81980546001600160a01b039092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355565b6001600160a01b038116811461041e57600080fd5b600080604083850312156104c957600080fd5b82356104d4816104a1565b9150602083013563ffffffff811681146104ed57600080fd5b809150509250929050565b60006020828403121561050a57600080fd5b8135610515816104a1565b9392505050565b6000806040838503121561052f57600080fd5b823561053a816104a1565b915060208301356104ed816104a156fea26469706673582212205da2539e656ac9e3b5d38e1fab6b3e3bf62e795656c3441ec01bb6f582f3093f64736f6c63430008170033';

type FactoryStakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryStakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryStaker__factory extends ContractFactory {
  constructor(...args: FactoryStakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FactoryStaker> {
    return super.deploy(_owner, overrides || {}) as Promise<FactoryStaker>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): FactoryStaker {
    return super.attach(address) as FactoryStaker;
  }
  override connect(signer: Signer): FactoryStaker__factory {
    return super.connect(signer) as FactoryStaker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryStakerInterface {
    return new utils.Interface(_abi) as FactoryStakerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryStaker {
    return new Contract(address, _abi, signerOrProvider) as FactoryStaker;
  }
}
