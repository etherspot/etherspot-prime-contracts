/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ModularEtherspotWalletFactory,
  ModularEtherspotWalletFactoryInterface,
} from "../../../../src/modular-etherspot-wallet/wallet/ModularEtherspotWalletFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "FactoryStaker_InvalidEPAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NewOwnerIsZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NoHandoverRequest",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "OwnershipHandoverCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "OwnershipHandoverRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "initCode",
        type: "bytes",
      },
    ],
    name: "_getSalt",
    outputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_epAddress",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelOwnershipHandover",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "completeOwnershipHandover",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "initCode",
        type: "bytes",
      },
    ],
    name: "createAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "initcode",
        type: "bytes",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "result",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "ownershipHandoverExpiresAt",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestOwnershipHandover",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_epAddress",
        type: "address",
      },
    ],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_epAddress",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_withdrawTo",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620011ca380380620011ca8339818101604052810190620000379190620001db565b8062000049816200008660201b60201c565b508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505062000222565b620000966200016c60201b60201c565b1562000114577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927805415620000d357630dc149f06000526004601cfd5b8160601b60601c9150811560ff1b821781558160007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a35062000169565b8060601b60601c9050807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a35b50565b600090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a38262000176565b9050919050565b620001b58162000196565b8114620001c157600080fd5b50565b600081519050620001d581620001aa565b92915050565b60008060408385031215620001f557620001f462000171565b5b60006200020585828601620001c4565b92505060206200021885828601620001c4565b9150509250929050565b608051610f7e6200024c6000396000818161055a015281816106ab015261075f0152610f7e6000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063f04e283e11610059578063f04e283e1461023e578063f2fde38b1461025a578063f8a5937014610276578063fee81cf4146102a6576100dd565b80638da5cb5b146101ad578063b36f9705146101d8578063d959fd0e14610201576100dd565b806354d1f13d116100bb57806354d1f13d1461013157806356c717f51461013b5780635c60da1b14610178578063715018a6146101a3576100dd565b806325692962146100e257806345171159146100ec5780634a1ce59914610108575b600080fd5b6100ea6102e3565b005b61010660048036038101906101019190610b89565b610337565b005b34801561011457600080fd5b5061012f600480360381019061012a9190610bc9565b610415565b005b6101396104e6565b005b34801561014757600080fd5b50610162600480360381019061015d9190610c91565b610522565b60405161016f9190610d00565b60405180910390f35b34801561018457600080fd5b5061018d610558565b60405161019a9190610d2a565b60405180910390f35b6101ab61057c565b005b3480156101b957600080fd5b506101c2610590565b6040516101cf9190610d2a565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa9190610d83565b6105b9565b005b34801561020d57600080fd5b5061022860048036038101906102239190610c91565b610696565b6040516102359190610d2a565b60405180910390f35b61025860048036038101906102539190610bc9565b6106db565b005b610274600480360381019061026f9190610bc9565b61071c565b005b610290600480360381019061028b9190610c91565b610746565b60405161029d9190610d2a565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c89190610bc9565b610808565b6040516102da9190610ddc565b60405180910390f35b60006102ed610823565b67ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b61033f61082e565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036103a5576040517f2ca18ee000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016103df9190610e06565b6000604051808303818588803b1580156103f857600080fd5b505af115801561040c573d6000803e3d6000fd5b50505050505050565b61041d61082e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610483576040517f2ca18ee000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104cb57600080fd5b505af11580156104df573d6000803e3d6000fd5b5050505050565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b600083838360405160200161053993929190610e81565b6040516020818303038152906040528051906020012090509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61058461082e565b61058e6000610866565b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392754905090565b6105c161082e565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610627576040517f2ca18ee000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016106609190610eba565b600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050505050565b6000806106a4858585610522565b90506106d17f0000000000000000000000000000000000000000000000000000000000000000823061092e565b9150509392505050565b6106e361082e565b63389a75e1600c52806000526020600c20805442111561070b57636f5e88186000526004601cfd5b600081555061071981610866565b50565b61072461082e565b8060601b61073a57637448fbae6000526004601cfd5b61074381610866565b50565b600080610754858585610522565b9050600080610784347f000000000000000000000000000000000000000000000000000000000000000085610951565b91509150816107fb578073ffffffffffffffffffffffffffffffffffffffff16634b6a141987876040518363ffffffff1660e01b81526004016107c8929190610f24565b600060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505050505b8093505050509392505050565b600063389a75e1600c52816000526020600c20549050919050565b60006202a300905090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927543314610864576382b429006000526004601cfd5b565b61086e610a3d565b156108d4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3811560ff1b821781555061092b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3818155505b50565b60008061093a85610a42565b9050610947818585610abc565b9150509392505050565b6000806040517fcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f36060527f5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e207660405261600960205284601e5268603d3d8160223d3973600a52605f60212060358201523060581b815260ff8153836015820152605581209150600115610a2b57813b610a045783605f602188f59150816109ff5763301164256000526004601cfd5b610a2b565b600192508515610a2b5760003860003889865af1610a2a5763b12d13eb6000526004601cfd5b5b80604052600060605250935093915050565b600090565b60006040517fcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f36060527f5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e207660405261600960205282601e5268603d3d8160223d3973600a52605f602120915080604052600060605250919050565b600060ff600053836035528160601b600152826015526055600020905060006035529392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1a82610aef565b9050919050565b610b2a81610b0f565b8114610b3557600080fd5b50565b600081359050610b4781610b21565b92915050565b600063ffffffff82169050919050565b610b6681610b4d565b8114610b7157600080fd5b50565b600081359050610b8381610b5d565b92915050565b60008060408385031215610ba057610b9f610ae5565b5b6000610bae85828601610b38565b9250506020610bbf85828601610b74565b9150509250929050565b600060208284031215610bdf57610bde610ae5565b5b6000610bed84828501610b38565b91505092915050565b6000819050919050565b610c0981610bf6565b8114610c1457600080fd5b50565b600081359050610c2681610c00565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c5157610c50610c2c565b5b8235905067ffffffffffffffff811115610c6e57610c6d610c31565b5b602083019150836001820283011115610c8a57610c89610c36565b5b9250929050565b600080600060408486031215610caa57610ca9610ae5565b5b6000610cb886828701610c17565b935050602084013567ffffffffffffffff811115610cd957610cd8610aea565b5b610ce586828701610c3b565b92509250509250925092565b610cfa81610bf6565b82525050565b6000602082019050610d156000830184610cf1565b92915050565b610d2481610b0f565b82525050565b6000602082019050610d3f6000830184610d1b565b92915050565b6000610d5082610aef565b9050919050565b610d6081610d45565b8114610d6b57600080fd5b50565b600081359050610d7d81610d57565b92915050565b60008060408385031215610d9a57610d99610ae5565b5b6000610da885828601610b38565b9250506020610db985828601610d6e565b9150509250929050565b6000819050919050565b610dd681610dc3565b82525050565b6000602082019050610df16000830184610dcd565b92915050565b610e0081610b4d565b82525050565b6000602082019050610e1b6000830184610df7565b92915050565b6000819050919050565b610e3c610e3782610bf6565b610e21565b82525050565b600081905092915050565b82818337600083830152505050565b6000610e688385610e42565b9350610e75838584610e4d565b82840190509392505050565b6000610e8d8286610e2b565b602082019150610e9e828486610e5c565b9150819050949350505050565b610eb481610d45565b82525050565b6000602082019050610ecf6000830184610eab565b92915050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b6000610f038385610ed5565b9350610f10838584610e4d565b610f1983610ee6565b840190509392505050565b60006020820190508181036000830152610f3f818486610ef7565b9050939250505056fea264697066735822122019928100a494562844b362d486323e638499db5a727a7f91c0e1f9a3061b0bae64736f6c63430008170033";

type ModularEtherspotWalletFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ModularEtherspotWalletFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ModularEtherspotWalletFactory__factory extends ContractFactory {
  constructor(...args: ModularEtherspotWalletFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _implementation: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ModularEtherspotWalletFactory> {
    return super.deploy(
      _implementation,
      _owner,
      overrides || {}
    ) as Promise<ModularEtherspotWalletFactory>;
  }
  override getDeployTransaction(
    _implementation: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_implementation, _owner, overrides || {});
  }
  override attach(address: string): ModularEtherspotWalletFactory {
    return super.attach(address) as ModularEtherspotWalletFactory;
  }
  override connect(signer: Signer): ModularEtherspotWalletFactory__factory {
    return super.connect(signer) as ModularEtherspotWalletFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ModularEtherspotWalletFactoryInterface {
    return new utils.Interface(_abi) as ModularEtherspotWalletFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ModularEtherspotWalletFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ModularEtherspotWalletFactory;
  }
}
