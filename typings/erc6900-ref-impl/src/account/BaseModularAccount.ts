/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPluginManager {
  export type InjectedHooksInfoStruct = {
    preExecHookFunctionId: PromiseOrValue<BigNumberish>;
    isPostHookUsed: PromiseOrValue<boolean>;
    postExecHookFunctionId: PromiseOrValue<BigNumberish>;
  };

  export type InjectedHooksInfoStructOutput = [number, boolean, number] & {
    preExecHookFunctionId: number;
    isPostHookUsed: boolean;
    postExecHookFunctionId: number;
  };

  export type InjectedHookStruct = {
    providingPlugin: PromiseOrValue<string>;
    selector: PromiseOrValue<BytesLike>;
    injectedHooksInfo: IPluginManager.InjectedHooksInfoStruct;
    hookApplyData: PromiseOrValue<BytesLike>;
  };

  export type InjectedHookStructOutput = [
    string,
    string,
    IPluginManager.InjectedHooksInfoStructOutput,
    string
  ] & {
    providingPlugin: string;
    selector: string;
    injectedHooksInfo: IPluginManager.InjectedHooksInfoStructOutput;
    hookApplyData: string;
  };
}

export interface BaseModularAccountInterface extends utils.Interface {
  functions: {
    "installPlugin(address,bytes32,bytes,bytes21[],(address,bytes4,(uint8,bool,uint8),bytes)[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "uninstallPlugin(address,bytes,bytes,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "installPlugin"
      | "supportsInterface"
      | "uninstallPlugin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "installPlugin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      IPluginManager.InjectedHookStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallPlugin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "installPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallPlugin",
    data: BytesLike
  ): Result;

  events: {
    "PluginInstalled(address,bytes32)": EventFragment;
    "PluginUninstalled(address,bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PluginInstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginUninstalled"): EventFragment;
}

export interface PluginInstalledEventObject {
  plugin: string;
  manifestHash: string;
}
export type PluginInstalledEvent = TypedEvent<
  [string, string],
  PluginInstalledEventObject
>;

export type PluginInstalledEventFilter = TypedEventFilter<PluginInstalledEvent>;

export interface PluginUninstalledEventObject {
  plugin: string;
  manifestHash: string;
  onUninstallSucceeded: boolean;
}
export type PluginUninstalledEvent = TypedEvent<
  [string, string, boolean],
  PluginUninstalledEventObject
>;

export type PluginUninstalledEventFilter =
  TypedEventFilter<PluginUninstalledEvent>;

export interface BaseModularAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseModularAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  installPlugin(
    plugin: PromiseOrValue<string>,
    manifestHash: PromiseOrValue<BytesLike>,
    pluginInitData: PromiseOrValue<BytesLike>,
    dependencies: PromiseOrValue<BytesLike>[],
    injectedHooks: IPluginManager.InjectedHookStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uninstallPlugin(
    plugin: PromiseOrValue<string>,
    config: PromiseOrValue<BytesLike>,
    pluginUninstallData: PromiseOrValue<BytesLike>,
    hookUnapplyData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PluginInstalled(address,bytes32)"(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null
    ): PluginInstalledEventFilter;
    PluginInstalled(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null
    ): PluginInstalledEventFilter;

    "PluginUninstalled(address,bytes32,bool)"(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null,
      onUninstallSucceeded?: null
    ): PluginUninstalledEventFilter;
    PluginUninstalled(
      plugin?: PromiseOrValue<string> | null,
      manifestHash?: null,
      onUninstallSucceeded?: null
    ): PluginUninstalledEventFilter;
  };

  estimateGas: {
    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    installPlugin(
      plugin: PromiseOrValue<string>,
      manifestHash: PromiseOrValue<BytesLike>,
      pluginInitData: PromiseOrValue<BytesLike>,
      dependencies: PromiseOrValue<BytesLike>[],
      injectedHooks: IPluginManager.InjectedHookStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uninstallPlugin(
      plugin: PromiseOrValue<string>,
      config: PromiseOrValue<BytesLike>,
      pluginUninstallData: PromiseOrValue<BytesLike>,
      hookUnapplyData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
