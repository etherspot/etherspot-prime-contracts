/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPluginLoupe {
  export type ExecutionFunctionConfigStruct = {
    plugin: PromiseOrValue<string>;
    userOpValidationFunction: PromiseOrValue<BytesLike>;
    runtimeValidationFunction: PromiseOrValue<BytesLike>;
  };

  export type ExecutionFunctionConfigStructOutput = [string, string, string] & {
    plugin: string;
    userOpValidationFunction: string;
    runtimeValidationFunction: string;
  };

  export type ExecutionHooksStruct = {
    preExecHook: PromiseOrValue<BytesLike>;
    postExecHook: PromiseOrValue<BytesLike>;
  };

  export type ExecutionHooksStructOutput = [string, string] & {
    preExecHook: string;
    postExecHook: string;
  };
}

export interface IPluginLoupeInterface extends utils.Interface {
  functions: {
    "getExecutionFunctionConfig(bytes4)": FunctionFragment;
    "getExecutionHooks(bytes4)": FunctionFragment;
    "getInstalledPlugins()": FunctionFragment;
    "getPermittedCallHooks(address,bytes4)": FunctionFragment;
    "getPreRuntimeValidationHooks(bytes4)": FunctionFragment;
    "getPreUserOpValidationHooks(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getExecutionFunctionConfig"
      | "getExecutionHooks"
      | "getInstalledPlugins"
      | "getPermittedCallHooks"
      | "getPreRuntimeValidationHooks"
      | "getPreUserOpValidationHooks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getExecutionFunctionConfig",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionHooks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstalledPlugins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermittedCallHooks",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreRuntimeValidationHooks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreUserOpValidationHooks",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExecutionFunctionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstalledPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermittedCallHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreRuntimeValidationHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreUserOpValidationHooks",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPluginLoupe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPluginLoupeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IPluginLoupe.ExecutionFunctionConfigStructOutput]>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IPluginLoupe.ExecutionHooksStructOutput[]]>;

    getInstalledPlugins(overrides?: CallOverrides): Promise<[string[]]>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IPluginLoupe.ExecutionHooksStructOutput[]]>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  getExecutionFunctionConfig(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPluginLoupe.ExecutionFunctionConfigStructOutput>;

  getExecutionHooks(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

  getInstalledPlugins(overrides?: CallOverrides): Promise<string[]>;

  getPermittedCallHooks(
    callingPlugin: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

  getPreRuntimeValidationHooks(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPreUserOpValidationHooks(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPluginLoupe.ExecutionFunctionConfigStructOutput>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

    getInstalledPlugins(overrides?: CallOverrides): Promise<string[]>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPluginLoupe.ExecutionHooksStructOutput[]>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstalledPlugins(overrides?: CallOverrides): Promise<BigNumber>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExecutionFunctionConfig(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutionHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstalledPlugins(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermittedCallHooks(
      callingPlugin: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreRuntimeValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreUserOpValidationHooks(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
