{
  "address": "0xc710261Cc6Ba2540a4d728dd03700cA92c3eC9fA",
  "abi": [
    {
      "inputs": [],
      "name": "AccountAccessUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountInitializationFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddingInvalidGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddingInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadySignedProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotRemoveLastValidator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackInvalidCallType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currentHook",
          "type": "address"
        }
      ],
      "name": "HookAlreadyInstalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HookPostCheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InvalidFallbackCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "InvalidModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkedList_AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entry",
          "type": "address"
        }
      ],
      "name": "LinkedList_EntryAlreadyInList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entry",
          "type": "address"
        }
      ],
      "name": "LinkedList_InvalidEntry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkedList_InvalidPage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "NoFallbackHandler",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughGuardians",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwnerOrGuardianOrSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwnerOrSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposalResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposalTimelocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposalUnresolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemovingInvalidGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemovingInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "CallType",
          "name": "callType",
          "type": "bytes1"
        }
      ],
      "name": "UnsupportedCallType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "ExecType",
          "name": "execType",
          "type": "bytes1"
        }
      ],
      "name": "UnsupportedExecType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleType",
          "type": "uint256"
        }
      ],
      "name": "UnsupportedModuleType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletNeedsOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "GuardianAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedGuardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleInstalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleUninstalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedOwner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "discardedBy",
          "type": "address"
        }
      ],
      "name": "ProposalDiscarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwnerProposed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwnerProposed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "approvalCount",
          "type": "uint256"
        }
      ],
      "name": "QuorumNotReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchExecutionindex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "TryExecuteUnsuccessful",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "accountId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGuardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTimelock",
          "type": "uint256"
        }
      ],
      "name": "changeProposalTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardCurrentProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ModeCode",
          "name": "mode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "executionCalldata",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ModeCode",
          "name": "mode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "executionCalldata",
          "type": "bytes"
        }
      ],
      "name": "executeFromExecutor",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "executeUserOp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "functionSig",
          "type": "bytes4"
        }
      ],
      "name": "getActiveFallbackHandler",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "handler",
              "type": "address"
            },
            {
              "internalType": "CallType",
              "name": "calltype",
              "type": "bytes1"
            },
            {
              "internalType": "address[]",
              "name": "allowedCallers",
              "type": "address[]"
            }
          ],
          "internalType": "struct ModuleManager.FallbackHandler",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveHook",
      "outputs": [
        {
          "internalType": "address",
          "name": "hook",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cursor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getExecutorsPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "array",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "next",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "ownerProposed_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "approvalCount_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "guardiansApproved_",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "resolved_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "proposedAt_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cursor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getValidatorPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "array",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "next",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardianCosign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardianCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "guardianPropose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initializeAccount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "installModule",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "additionalContext",
          "type": "bytes"
        }
      ],
      "name": "isModuleInstalled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ModeCode",
          "name": "mode",
          "type": "bytes32"
        }
      ],
      "name": "supportsExecutionMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "modulTypeId",
          "type": "uint256"
        }
      ],
      "name": "supportsModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "deInitData",
          "type": "bytes"
        }
      ],
      "name": "uninstallModule",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "missingAccountFunds",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validSignature",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x924cd70d3c7c6982b4439ef85ebd8d104f686e0cfe4f37fda65a169410b73eed",
  "receipt": {
    "to": null,
    "from": "0x09FD4F6088f2025427AB1e89257A44747081Ed59",
    "contractAddress": "0xc710261Cc6Ba2540a4d728dd03700cA92c3eC9fA",
    "transactionIndex": 2,
    "gasUsed": "4485660",
    "logsBloom": "0x
    "blockHash": "0xb8bb42931cd3c28e6ceea8726d3fa3e9de5314423b47a3ea7091e39cf1c4bc54",
    "transactionHash": "0x924cd70d3c7c6982b4439ef85ebd8d104f686e0cfe4f37fda65a169410b73eed",
    "logs": [],
    "blockNumber": 78722924,
    "cumulativeGasUsed": "4737405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9b2e263def7f73db209e399f208d48db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountAccessUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountInitializationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddingInvalidGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddingInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySignedProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveLastValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackInvalidCallType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentHook\",\"type\":\"address\"}],\"name\":\"HookAlreadyInstalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HookPostCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidFallbackCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"InvalidModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkedList_AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entry\",\"type\":\"address\"}],\"name\":\"LinkedList_EntryAlreadyInList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entry\",\"type\":\"address\"}],\"name\":\"LinkedList_InvalidEntry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkedList_InvalidPage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"NoFallbackHandler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughGuardians\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerOrGuardianOrSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerOrSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalTimelocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalUnresolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemovingInvalidGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemovingInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"CallType\",\"name\":\"callType\",\"type\":\"bytes1\"}],\"name\":\"UnsupportedCallType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"ExecType\",\"name\":\"execType\",\"type\":\"bytes1\"}],\"name\":\"UnsupportedExecType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleType\",\"type\":\"uint256\"}],\"name\":\"UnsupportedModuleType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletNeedsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedGuardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleUninstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"discardedBy\",\"type\":\"address\"}],\"name\":\"ProposalDiscarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwnerProposed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwnerProposed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalCount\",\"type\":\"uint256\"}],\"name\":\"QuorumNotReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchExecutionindex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"TryExecuteUnsuccessful\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accountId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGuardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimelock\",\"type\":\"uint256\"}],\"name\":\"changeProposalTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardCurrentProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"executeFromExecutor\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"executeUserOp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"getActiveFallbackHandler\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"CallType\",\"name\":\"calltype\",\"type\":\"bytes1\"},{\"internalType\":\"address[]\",\"name\":\"allowedCallers\",\"type\":\"address[]\"}],\"internalType\":\"struct ModuleManager.FallbackHandler\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cursor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getExecutorsPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerProposed_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approvalCount_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"guardiansApproved_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"resolved_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"proposedAt_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cursor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getValidatorPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardianCosign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardianCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"guardianPropose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializeAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"installModule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalContext\",\"type\":\"bytes\"}],\"name\":\"isModuleInstalled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"supportsExecutionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modulTypeId\",\"type\":\"uint256\"}],\"name\":\"supportsModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deInitData\",\"type\":\"bytes\"}],\"name\":\"uninstallModule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validSignature\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountId()\":{\"details\":\"see {IERC7579Account}.\"},\"addGuardian(address)\":{\"details\":\"Only owner or wallet.\",\"params\":{\"_newGuardian\":\"address of new guardian to add to wallet.\"}},\"addOwner(address)\":{\"details\":\"Only owner or wallet.\",\"params\":{\"_newOwner\":\"address of new owner to add.\"}},\"changeProposalTimelock(uint256)\":{\"details\":\"Only owner or wallet.\",\"params\":{\"_newTimelock\":\"new timelock in seconds.\"}},\"discardCurrentProposal()\":{\"details\":\"Only owner or guardian or wallet. Must be after the proposal timelock is met.\"},\"execute(bytes32,bytes)\":{\"details\":\"see {IERC7579Account}.this function is only callable by the entry point or the account itselfthis function demonstrates how to implement CallType SINGLE and BATCH and ExecType DEFAULT and TRYthis function demonstrates how to implement hook support (modifier)\"},\"executeFromExecutor(bytes32,bytes)\":{\"details\":\"see {IERC7579Account}.this function is only callable by an installed executor modulethis function demonstrates how to implement CallType SINGLE and BATCH and ExecType DEFAULT and TRYthis function demonstrates how to implement hook support (modifier)\"},\"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))\":{\"details\":\"see {IERC7579Account}.\"},\"getProposal(uint256)\":{\"params\":{\"_proposalId\":\"proposal id to return data for.\"},\"returns\":{\"approvalCount_\":\"number of guardians that have approved the proposal.\",\"guardiansApproved_\":\"array of guardian addresses that have approved proposal.\",\"ownerProposed_\":\"the new owner proposed.\",\"proposedAt_\":\"timestamp of when proposal was initiated.\",\"resolved_\":\"bool is the proposal resolved.\"}},\"guardianCosign()\":{\"details\":\"Only guardian. Must meet minimum threshold of 60% of total guardians to add new owner.\"},\"guardianPropose(address)\":{\"details\":\"Only guardian.\",\"params\":{\"_newOwner\":\"the proposed new owner for the wallet.\"}},\"initializeAccount(bytes)\":{\"details\":\"see {IERC7579Account}.\"},\"installModule(uint256,address,bytes)\":{\"details\":\"see {IERC7579Account}.\"},\"isGuardian(address)\":{\"params\":{\"_address\":\"address to check if guardian of wallet.\"},\"returns\":{\"_0\":\"bool.\"}},\"isModuleInstalled(uint256,address,bytes)\":{\"details\":\"see {IERC7579Account}.\"},\"isOwner(address)\":{\"params\":{\"_address\":\"address to check if owner of wallet.\"},\"returns\":{\"_0\":\"bool.\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"ERC-1271 isValidSignature         This function is intended to be used to validate a smart account signature and may forward the call to a validator module\",\"params\":{\"data\":\"The data that is signed\",\"hash\":\"The hash of the data that is signed\"}},\"removeGuardian(address)\":{\"details\":\"Only owner or wallet.\",\"params\":{\"_guardian\":\"address of existing guardian to remove.\"}},\"removeOwner(address)\":{\"details\":\"Only owner or wallet.\",\"params\":{\"_owner\":\"address of wallet owner to remove .\"}},\"supportsExecutionMode(bytes32)\":{\"details\":\"see {IERC7579Account}.\"},\"supportsModule(uint256)\":{\"details\":\"see {IERC7579Account}.\"},\"uninstallModule(uint256,address,bytes)\":{\"details\":\"see {IERC7579Account}.\"},\"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"details\":\"see {IERC7579Account}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"OnlyOwnerOrSelf()\":[{\"notice\":\"AccessController\"}]},\"events\":{\"OwnerAdded(address,address)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"addGuardian(address)\":{\"notice\":\"Add guardian for the wallet.\"},\"addOwner(address)\":{\"notice\":\"Add owner to the wallet.\"},\"changeProposalTimelock(uint256)\":{\"notice\":\"Change the timelock on proposals. The minimum time (secs) that a proposal is allowed to be discarded.\"},\"discardCurrentProposal()\":{\"notice\":\"Discards the current proposal.\"},\"getExecutorsPaginated(address,uint256)\":{\"notice\":\"THIS IS NOT PART OF THE STANDARD Helper Function to access linked list\"},\"getProposal(uint256)\":{\"notice\":\"Returns new owner proposal data.\"},\"getValidatorPaginated(address,uint256)\":{\"notice\":\"THIS IS NOT PART OF THE STANDARD Helper Function to access linked list\"},\"guardianCosign()\":{\"notice\":\"Cosigns a new owner proposal.\"},\"guardianPropose(address)\":{\"notice\":\"Creates a new owner proposal (adds new owner to wallet).\"},\"isGuardian(address)\":{\"notice\":\"Checks if _address is guardian of wallet.\"},\"isOwner(address)\":{\"notice\":\"Checks if _address is owner of wallet.\"},\"removeGuardian(address)\":{\"notice\":\"Remove guardian from the wallet.\"},\"removeOwner(address)\":{\"notice\":\"Remove owner from wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol\":\"ModularEtherspotWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\ninterface IAccount {\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp              - The operation that is about to be executed.\\n     * @param userOpHash          - Hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds - Missing funds on the account's deposit in the entrypoint.\\n     *                              This is the minimum amount to transfer to the sender(entryPoint) to be\\n     *                              able to make the call. The excess is left as a deposit in the entrypoint\\n     *                              for future calls. Can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\".\\n     *                              In case there is a paymaster in the request (or the current deposit is high\\n     *                              enough), this value will be zero.\\n     * @return validationData       - Packaged ValidationData structure. use `_packValidationData` and\\n     *                              `_unpackValidationData` to encode and decode.\\n     *                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *                                 otherwise, an address of an \\\"authorizer\\\" contract.\\n     *                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *                              <6-byte> validAfter - First timestamp this operation is valid\\n     *                                                    If an account doesn't use time-range, it is enough to\\n     *                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *                              Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/**\\n * User Operation struct\\n * @param sender                - The sender account of this request.\\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\\n * @param initCode              - If set, the account contract will be created by this constructor/\\n * @param callData              - The method call to execute on this account.\\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\\n *                                Covers batch overhead.\\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\\n *                                The paymaster will pay for the transaction instead of the sender.\\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct PackedUserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    bytes32 accountGasLimits;\\n    uint256 preVerificationGas;\\n    bytes32 gasFees;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\"},\"forge-std/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    /// uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/access/AccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessController} from \\\"../interfaces/IAccessController.sol\\\";\\nimport {ErrorsLib} from \\\"../libraries/ErrorsLib.sol\\\";\\n\\ncontract AccessController is IAccessController {\\n    /// State Variables\\n    uint128 constant MULTIPLY_FACTOR = 1000;\\n    uint16 constant SIXTY_PERCENT = 600;\\n    uint24 constant INITIAL_PROPOSAL_TIMELOCK = 24 hours;\\n    uint256 public ownerCount;\\n    uint256 public guardianCount;\\n    uint256 public proposalId;\\n    uint256 public proposalTimelock;\\n\\n    /// Mappings\\n    mapping(address => bool) private _owners;\\n    mapping(address => bool) private _guardians;\\n    mapping(uint256 => NewOwnerProposal) private _proposals;\\n\\n    /// Modifiers\\n    modifier onlyOwnerOrSelf() {\\n        if (!(isOwner(msg.sender) || msg.sender == address(this))) {\\n            revert ErrorsLib.OnlyOwnerOrSelf();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        if (!isGuardian(msg.sender)) {\\n            revert ErrorsLib.OnlyGuardian();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrGuardianOrSelf() {\\n        if (\\n            !(isOwner(msg.sender) ||\\n                isGuardian(msg.sender) ||\\n                msg.sender == address(this))\\n        ) {\\n            revert ErrorsLib.OnlyOwnerOrGuardianOrSelf();\\n        }\\n        _;\\n    }\\n\\n    /// External\\n    /**\\n     * @notice Add owner to the wallet.\\n     * @dev Only owner or wallet.\\n     * @param _newOwner address of new owner to add.\\n     */\\n    function addOwner(address _newOwner) external onlyOwnerOrSelf {\\n        if (\\n            _newOwner == address(0) ||\\n            isGuardian(_newOwner) ||\\n            isOwner(_newOwner)\\n        ) {\\n            revert ErrorsLib.AddingInvalidOwner();\\n        }\\n        _addOwner(_newOwner);\\n        emit OwnerAdded(address(this), _newOwner);\\n    }\\n\\n    /**\\n     * @notice Remove owner from wallet.\\n     * @dev Only owner or wallet.\\n     * @param _owner address of wallet owner to remove .\\n     */\\n    function removeOwner(address _owner) external onlyOwnerOrSelf {\\n        if (!isOwner(_owner)) revert ErrorsLib.RemovingInvalidOwner();\\n        if (ownerCount <= 1) {\\n            revert ErrorsLib.WalletNeedsOwner();\\n        }\\n        _removeOwner(_owner);\\n        emit OwnerRemoved(address(this), _owner);\\n    }\\n\\n    /**\\n     * @notice Add guardian for the wallet.\\n     * @dev Only owner or wallet.\\n     * @param _newGuardian address of new guardian to add to wallet.\\n     */\\n    function addGuardian(address _newGuardian) external onlyOwnerOrSelf {\\n        if (\\n            _newGuardian == address(0) ||\\n            isGuardian(_newGuardian) ||\\n            isOwner(_newGuardian)\\n        ) {\\n            revert ErrorsLib.AddingInvalidGuardian();\\n        }\\n        _addGuardian(_newGuardian);\\n        emit GuardianAdded(address(this), _newGuardian);\\n    }\\n\\n    /**\\n     * @notice Remove guardian from the wallet.\\n     * @dev Only owner or wallet.\\n     * @param _guardian address of existing guardian to remove.\\n     */\\n    function removeGuardian(address _guardian) external onlyOwnerOrSelf {\\n        if (!isGuardian(_guardian)) revert ErrorsLib.RemovingInvalidGuardian();\\n        _removeGuardian(_guardian);\\n        emit GuardianRemoved(address(this), _guardian);\\n    }\\n\\n    /**\\n     * @notice Change the timelock on proposals.\\n     * The minimum time (secs) that a proposal is allowed to be discarded.\\n     * @dev Only owner or wallet.\\n     * @param   _newTimelock new timelock in seconds.\\n     */\\n    function changeProposalTimelock(\\n        uint256 _newTimelock\\n    ) external onlyOwnerOrSelf {\\n        assembly {\\n            sstore(proposalTimelock.slot, _newTimelock)\\n        }\\n    }\\n\\n    /**\\n     * @notice Discards the current proposal.\\n     * @dev Only owner or guardian or wallet. Must be after the proposal timelock is met.\\n     */\\n    function discardCurrentProposal() public onlyOwnerOrGuardianOrSelf {\\n        NewOwnerProposal storage prop = _proposals[proposalId];\\n        uint256 timelock = proposalTimelock == 0\\n            ? INITIAL_PROPOSAL_TIMELOCK\\n            : proposalTimelock;\\n        if (_resolvedProposal()) {\\n            revert ErrorsLib.ProposalResolved();\\n        }\\n        bool allowed = isGuardian(msg.sender);\\n        if (allowed && (prop.proposedAt + timelock >= block.timestamp))\\n            revert ErrorsLib.ProposalTimelocked();\\n\\n        prop.resolved = true;\\n        emit ProposalDiscarded(address(this), proposalId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Creates a new owner proposal (adds new owner to wallet).\\n     * @dev Only guardian.\\n     * @param _newOwner the proposed new owner for the wallet.\\n     */\\n    function guardianPropose(address _newOwner) external onlyGuardian {\\n        if (\\n            _newOwner == address(0) ||\\n            isGuardian(_newOwner) ||\\n            isOwner(_newOwner)\\n        ) {\\n            revert ErrorsLib.AddingInvalidOwner();\\n        }\\n        if (guardianCount < 3) {\\n            revert ErrorsLib.NotEnoughGuardians();\\n        }\\n        NewOwnerProposal storage prop = _proposals[proposalId];\\n        if (prop.guardiansApproved.length != 0 && !prop.resolved) {\\n            revert ErrorsLib.ProposalUnresolved();\\n        }\\n        uint256 newProposalId = proposalId + 1;\\n        _proposals[newProposalId].newOwnerProposed = _newOwner;\\n        _proposals[newProposalId].guardiansApproved.push(msg.sender);\\n        _proposals[newProposalId].approvalCount++;\\n        _proposals[newProposalId].resolved = false;\\n        _proposals[newProposalId].proposedAt = block.timestamp;\\n        proposalId = newProposalId;\\n        emit ProposalSubmitted(\\n            address(this),\\n            newProposalId,\\n            _newOwner,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice Cosigns a new owner proposal.\\n     * @dev Only guardian. Must meet minimum threshold of 60% of total guardians to add new owner.\\n     */\\n    function guardianCosign() external onlyGuardian {\\n        uint256 latestId = proposalId;\\n        NewOwnerProposal storage latestProp = _proposals[latestId];\\n        if (latestId == 0) {\\n            revert ErrorsLib.InvalidProposal();\\n        }\\n        if (_checkIfSigned(latestId)) {\\n            revert ErrorsLib.AlreadySignedProposal();\\n        }\\n        if (_resolvedProposal()) {\\n            revert ErrorsLib.ProposalResolved();\\n        }\\n        _proposals[latestId].guardiansApproved.push(msg.sender);\\n        _proposals[latestId].approvalCount++;\\n        address newOwner = latestProp.newOwnerProposed;\\n        if (_checkQuorumReached(latestId)) {\\n            _proposals[latestId].resolved = true;\\n            _addOwner(newOwner);\\n        } else {\\n            emit QuorumNotReached(\\n                address(this),\\n                latestId,\\n                newOwner,\\n                _proposals[latestId].approvalCount\\n            );\\n        }\\n    }\\n\\n    /// Views\\n    /**\\n     * @notice Checks if _address is owner of wallet.\\n     * @param _address address to check if owner of wallet.\\n     * @return  bool.\\n     */\\n    function isOwner(address _address) public view returns (bool) {\\n        return _owners[_address];\\n    }\\n\\n    /**\\n     * @notice Checks if _address is guardian of wallet.\\n     * @param _address address to check if guardian of wallet.\\n     * @return  bool.\\n     */\\n    function isGuardian(address _address) public view returns (bool) {\\n        return _guardians[_address];\\n    }\\n\\n    /**\\n     * @notice Returns new owner proposal data.\\n     * @param _proposalId proposal id to return data for.\\n     * @return ownerProposed_ the new owner proposed.\\n     * @return approvalCount_ number of guardians that have approved the proposal.\\n     * @return guardiansApproved_ array of guardian addresses that have approved proposal.\\n     * @return resolved_ bool is the proposal resolved.\\n     * @return proposedAt_ timestamp of when proposal was initiated.\\n     */\\n    function getProposal(\\n        uint256 _proposalId\\n    )\\n        public\\n        view\\n        returns (\\n            address ownerProposed_,\\n            uint256 approvalCount_,\\n            address[] memory guardiansApproved_,\\n            bool resolved_,\\n            uint256 proposedAt_\\n        )\\n    {\\n        if (_proposalId == 0 || _proposalId > proposalId) {\\n            revert ErrorsLib.InvalidProposal();\\n        }\\n        NewOwnerProposal memory proposal = _proposals[_proposalId];\\n        return (\\n            proposal.newOwnerProposed,\\n            proposal.approvalCount,\\n            proposal.guardiansApproved,\\n            proposal.resolved,\\n            proposal.proposedAt\\n        );\\n    }\\n\\n    /// Internal\\n    function _addOwner(address _newOwner) internal {\\n        _owners[_newOwner] = true;\\n        ownerCount++;\\n    }\\n\\n    function _addGuardian(address _newGuardian) internal {\\n        _guardians[_newGuardian] = true;\\n        guardianCount++;\\n        if (!_resolvedProposal()) discardCurrentProposal();\\n    }\\n\\n    function _removeOwner(address _owner) internal {\\n        _owners[_owner] = false;\\n        ownerCount--;\\n    }\\n\\n    function _removeGuardian(address _guardian) internal {\\n        _guardians[_guardian] = false;\\n        guardianCount--;\\n        if (!_resolvedProposal()) discardCurrentProposal();\\n    }\\n\\n    function _checkIfSigned(uint256 _proposalId) internal view returns (bool) {\\n        for (\\n            uint256 i;\\n            i < _proposals[_proposalId].guardiansApproved.length;\\n            i++\\n        ) {\\n            if (_proposals[_proposalId].guardiansApproved[i] == msg.sender) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _checkQuorumReached(\\n        uint256 _proposalId\\n    ) internal view returns (bool) {\\n        return ((_proposals[_proposalId].approvalCount * MULTIPLY_FACTOR) /\\n            guardianCount >=\\n            SIXTY_PERCENT);\\n    }\\n\\n    function _resolvedProposal() internal view returns (bool) {\\n        NewOwnerProposal storage prop = _proposals[proposalId];\\n        return prop.resolved;\\n    }\\n}\\n\",\"keccak256\":\"0xf4cdc1d7ab342177637b2aca0420219fd55e89da8764e4b1bf0b308ef82d0fb8\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/AccountBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title reference implementation of the minimal modular smart account with Hook Extension\\n * @author zeroknots.eth | rhinestone.wtf\\n */\\ncontract AccountBase {\\n    error AccountAccessUnauthorized();\\n    /////////////////////////////////////////////////////\\n    // Access Control\\n    ////////////////////////////////////////////////////\\n\\n    modifier onlyEntryPointOrSelf() virtual {\\n        if (!(msg.sender == entryPoint() || msg.sender == address(this))) {\\n            revert AccountAccessUnauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyEntryPoint() virtual {\\n        if (msg.sender != entryPoint()) {\\n            revert AccountAccessUnauthorized();\\n        }\\n        _;\\n    }\\n\\n    function entryPoint() public view virtual returns (address) {\\n        return 0x0000000071727De22E5E9d8BAf0edAc6f37da032;\\n    }\\n\\n    /// @dev Sends to the EntryPoint (i.e. `msg.sender`) the missing funds for this transaction.\\n    /// Subclass MAY override this modifier for better funds management.\\n    /// (e.g. send to the EntryPoint more than the minimum required, so that in future transactions\\n    /// it will not be required to send again)\\n    ///\\n    /// `missingAccountFunds` is the minimum value this modifier should send the EntryPoint,\\n    /// which MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n    modifier payPrefund(uint256 missingAccountFunds) virtual {\\n        _;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if missingAccountFunds {\\n                // Ignore failure (it's EntryPoint's job to verify, not the account's).\\n                pop(\\n                    call(\\n                        gas(),\\n                        caller(),\\n                        missingAccountFunds,\\n                        codesize(),\\n                        0x00,\\n                        codesize(),\\n                        0x00\\n                    )\\n                )\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91aa799484224ba03f0293884be9742151d804abda4fd1bfe957a0de4ec2e4cf\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/ExecutionHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { Execution } from \\\"../interfaces/IERC7579Account.sol\\\";\\n\\n/**\\n * @title Execution\\n * @dev This contract executes calls in the context of this contract.\\n * @author zeroknots.eth | rhinestone.wtf\\n * shoutout to solady (vectorized, ross) for this code\\n * https://github.com/Vectorized/solady/blob/main/src/accounts/ERC4337.sol\\n */\\ncontract ExecutionHelper {\\n    error ExecutionFailed();\\n\\n    event TryExecuteUnsuccessful(uint256 batchExecutionindex, bytes result);\\n\\n    function _execute(Execution[] calldata executions) internal returns (bytes[] memory result) {\\n        uint256 length = executions.length;\\n        result = new bytes[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            Execution calldata _exec = executions[i];\\n            result[i] = _execute(_exec.target, _exec.value, _exec.callData);\\n        }\\n    }\\n\\n    function _tryExecute(Execution[] calldata executions)\\n        internal\\n        returns (bytes[] memory result)\\n    {\\n        uint256 length = executions.length;\\n        result = new bytes[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            Execution calldata _exec = executions[i];\\n            bool success;\\n            (success, result[i]) = _tryExecute(_exec.target, _exec.value, _exec.callData);\\n            if (!success) emit TryExecuteUnsuccessful(i, result[i]);\\n        }\\n    }\\n\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata callData\\n    )\\n        internal\\n        virtual\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            calldatacopy(result, callData.offset, callData.length)\\n            if iszero(call(gas(), target, value, result, callData.length, codesize(), 0x00)) {\\n                // Bubble up the revert if the call reverts.\\n                returndatacopy(result, 0x00, returndatasize())\\n                revert(result, returndatasize())\\n            }\\n            mstore(result, returndatasize()) // Store the length.\\n            let o := add(result, 0x20)\\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\\n        }\\n    }\\n\\n    function _tryExecute(\\n        address target,\\n        uint256 value,\\n        bytes calldata callData\\n    )\\n        internal\\n        virtual\\n        returns (bool success, bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            calldatacopy(result, callData.offset, callData.length)\\n            success := call(gas(), target, value, result, callData.length, codesize(), 0x00)\\n            mstore(result, returndatasize()) // Store the length.\\n            let o := add(result, 0x20)\\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Execute a delegatecall with `delegate` on this account.\\n    function _executeDelegatecall(\\n        address delegate,\\n        bytes calldata callData\\n    )\\n        internal\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            calldatacopy(result, callData.offset, callData.length)\\n            // Forwards the `data` to `delegate` via delegatecall.\\n            if iszero(delegatecall(gas(), delegate, result, callData.length, codesize(), 0x00)) {\\n                // Bubble up the revert if the call reverts.\\n                returndatacopy(result, 0x00, returndatasize())\\n                revert(result, returndatasize())\\n            }\\n            mstore(result, returndatasize()) // Store the length.\\n            let o := add(result, 0x20)\\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Execute a delegatecall with `delegate` on this account and catch reverts.\\n    function _tryExecuteDelegatecall(\\n        address delegate,\\n        bytes calldata callData\\n    )\\n        internal\\n        returns (bool success, bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            calldatacopy(result, callData.offset, callData.length)\\n            // Forwards the `data` to `delegate` via delegatecall.\\n            success :=\\n                delegatecall(gas(), delegate, result, callData.length, codesize(), 0x00)\\n            mstore(result, returndatasize()) // Store the length.\\n            let o := add(result, 0x20)\\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\\n        }\\n    }\\n}\",\"keccak256\":\"0x92eb764a6eba3a60c6b0891ccdff100ffffd4168fa7563b55860d5de3c9b4caa\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/HookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./ModuleManager.sol\\\";\\nimport \\\"../interfaces/IERC7579Account.sol\\\";\\nimport \\\"../interfaces/IERC7579Module.sol\\\";\\n/**\\n * @title reference implementation of HookManager\\n * @author zeroknots.eth | rhinestone.wtf\\n */\\n\\nabstract contract HookManager {\\n    /// @custom:storage-location erc7201:hookmanager.storage.msa\\n    struct HookManagerStorage {\\n        IHook _hook;\\n    }\\n\\n    // keccak256(\\\"hookmanager.storage.msa\\\");\\n    bytes32 constant HOOKMANAGER_STORAGE_LOCATION =\\n        0x36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb28431608;\\n\\n    error HookPostCheckFailed();\\n    error HookAlreadyInstalled(address currentHook);\\n\\n    modifier withHook() {\\n        address hook = _getHook();\\n        if (hook == address(0)) {\\n            _;\\n        } else {\\n            bytes memory hookData = IHook(hook).preCheck(msg.sender, msg.data);\\n            _;\\n            if (!IHook(hook).postCheck(hookData)) revert HookPostCheckFailed();\\n        }\\n    }\\n\\n    function _setHook(address hook) internal virtual {\\n        bytes32 slot = HOOKMANAGER_STORAGE_LOCATION;\\n        assembly {\\n            sstore(slot, hook)\\n        }\\n    }\\n\\n    function _installHook(address hook, bytes calldata data) internal virtual {\\n        address currentHook = _getHook();\\n        if (currentHook != address(0)) {\\n            revert HookAlreadyInstalled(currentHook);\\n        }\\n        _setHook(hook);\\n        IHook(hook).onInstall(data);\\n    }\\n\\n    function _uninstallHook(\\n        address hook,\\n        bytes calldata data\\n    ) internal virtual {\\n        _setHook(address(0));\\n        IHook(hook).onUninstall(data);\\n    }\\n\\n    function _getHook() internal view returns (address _hook) {\\n        bytes32 slot = HOOKMANAGER_STORAGE_LOCATION;\\n        assembly {\\n            _hook := sload(slot)\\n        }\\n    }\\n\\n    function _isHookInstalled(address module) internal view returns (bool) {\\n        return _getHook() == module;\\n    }\\n\\n    function getActiveHook() external view returns (address hook) {\\n        return _getHook();\\n    }\\n}\\n\",\"keccak256\":\"0xf928c40e0ac91b9604ff3ed2d710d11882438c50ef5bde133010e8c5f4b0af5c\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {SentinelListLib, SENTINEL} from \\\"../libs/SentinelList.sol\\\";\\nimport {CallType, CALLTYPE_SINGLE, CALLTYPE_DELEGATECALL, CALLTYPE_STATIC} from \\\"../libs/ModeLib.sol\\\";\\nimport {AccountBase} from \\\"./AccountBase.sol\\\";\\nimport \\\"../interfaces/IERC7579Module.sol\\\";\\nimport \\\"forge-std/interfaces/IERC165.sol\\\";\\nimport \\\"./Receiver.sol\\\";\\nimport {ArrayLib} from \\\"../../libraries/ArrayLib.sol\\\";\\n\\n/**\\n * @title ModuleManager\\n * @author zeroknots.eth | rhinestone.wtf\\n * @dev This contract manages Validator, Executor and Fallback modules for the MSA\\n * @dev it uses SentinelList to manage the linked list of modules\\n * NOTE: the linked list is just an example. accounts may implement this differently\\n */\\nabstract contract ModuleManager is AccountBase, Receiver {\\n    using SentinelListLib for SentinelListLib.SentinelList;\\n\\n    error InvalidModule(address module);\\n    error NoFallbackHandler(bytes4 selector);\\n    error CannotRemoveLastValidator();\\n    error FallbackInvalidCallType();\\n    error InvalidFallbackCaller(address caller);\\n\\n    // keccak256(\\\"modulemanager.storage.msa\\\");\\n    bytes32 internal constant MODULEMANAGER_STORAGE_LOCATION =\\n        0xf88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea02;\\n\\n    struct FallbackHandler {\\n        address handler;\\n        CallType calltype;\\n        address[] allowedCallers;\\n    }\\n\\n    /// @custom:storage-location erc7201:modulemanager.storage.msa\\n    struct ModuleManagerStorage {\\n        // linked list of validators. List is initialized by initializeAccount()\\n        SentinelListLib.SentinelList $validators;\\n        // linked list of executors. List is initialized by initializeAccount()\\n        SentinelListLib.SentinelList $executors;\\n        // single fallback handler for all fallbacks\\n        // account vendors may implement this differently. This is just a reference implementation\\n        mapping(bytes4 selector => FallbackHandler fallbackHandler) $fallbacks;\\n    }\\n\\n    function $moduleManager()\\n        internal\\n        pure\\n        virtual\\n        returns (ModuleManagerStorage storage $ims)\\n    {\\n        bytes32 position = MODULEMANAGER_STORAGE_LOCATION;\\n        assembly {\\n            $ims.slot := position\\n        }\\n    }\\n\\n    modifier onlyExecutorModule() {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        if (!$executors.contains(msg.sender)) revert InvalidModule(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyValidatorModule(address validator) {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        if (!$validators.contains(validator)) revert InvalidModule(validator);\\n        _;\\n    }\\n\\n    function _initModuleManager() internal virtual {\\n        ModuleManagerStorage storage $ims = $moduleManager();\\n        $ims.$executors.init();\\n        $ims.$validators.init();\\n    }\\n\\n    function isAlreadyInitialized() internal view virtual returns (bool) {\\n        ModuleManagerStorage storage $ims = $moduleManager();\\n        return $ims.$validators.alreadyInitialized();\\n    }\\n\\n    /////////////////////////////////////////////////////\\n    //  Manage Validators\\n    ////////////////////////////////////////////////////\\n    function _installValidator(\\n        address validator,\\n        bytes calldata data\\n    ) internal virtual {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        $validators.push(validator);\\n        IValidator(validator).onInstall(data);\\n    }\\n\\n    function _uninstallValidator(\\n        address validator,\\n        bytes calldata data\\n    ) internal {\\n        // TODO: check if its the last validator. this might brick the account\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        (address prev, bytes memory disableModuleData) = abi.decode(\\n            data,\\n            (address, bytes)\\n        );\\n        $validators.pop(prev, validator);\\n        IValidator(validator).onUninstall(disableModuleData);\\n    }\\n\\n    function _isValidatorInstalled(\\n        address validator\\n    ) internal view virtual returns (bool) {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        return $validators.contains(validator);\\n    }\\n\\n    /**\\n     * THIS IS NOT PART OF THE STANDARD\\n     * Helper Function to access linked list\\n     */\\n    function getValidatorPaginated(\\n        address cursor,\\n        uint256 size\\n    ) external view virtual returns (address[] memory array, address next) {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        return $validators.getEntriesPaginated(cursor, size);\\n    }\\n\\n    /////////////////////////////////////////////////////\\n    //  Manage Executors\\n    ////////////////////////////////////////////////////\\n\\n    function _installExecutor(address executor, bytes calldata data) internal {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        $executors.push(executor);\\n        IExecutor(executor).onInstall(data);\\n    }\\n\\n    function _uninstallExecutor(\\n        address executor,\\n        bytes calldata data\\n    ) internal {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        (address prev, bytes memory disableModuleData) = abi.decode(\\n            data,\\n            (address, bytes)\\n        );\\n        $executors.pop(prev, executor);\\n        IExecutor(executor).onUninstall(disableModuleData);\\n    }\\n\\n    function _isExecutorInstalled(\\n        address executor\\n    ) internal view virtual returns (bool) {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        return $executors.contains(executor);\\n    }\\n\\n    /**\\n     * THIS IS NOT PART OF THE STANDARD\\n     * Helper Function to access linked list\\n     */\\n    function getExecutorsPaginated(\\n        address cursor,\\n        uint256 size\\n    ) external view virtual returns (address[] memory array, address next) {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        return $executors.getEntriesPaginated(cursor, size);\\n    }\\n\\n    /////////////////////////////////////////////////////\\n    //  Manage Fallback\\n    ////////////////////////////////////////////////////\\n\\n    function _installFallbackHandler(\\n        address handler,\\n        bytes calldata params\\n    ) internal virtual {\\n        bytes memory _params = params;\\n        bytes4 selector;\\n        CallType calltype;\\n        address[] memory allowedCallers;\\n        bytes memory initData;\\n        assembly {\\n            let configPtr := add(params.offset, 0x20)\\n            let configLen := calldataload(params.offset)\\n\\n            selector := calldataload(params.offset)\\n            calltype := calldataload(configPtr)\\n\\n            let allowedCallersLen := calldataload(add(configPtr, 0x20))\\n\\n            allowedCallers := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(\\n                    allowedCallers,\\n                    and(add(mul(allowedCallersLen, 0x20), 0x1f), not(0x1f))\\n                )\\n            )\\n\\n            for {\\n                let i := 0\\n            } lt(i, allowedCallersLen) {\\n                i := add(i, 1)\\n            } {\\n                mstore(\\n                    add(allowedCallers, mul(i, 0x20)),\\n                    calldataload(add(configPtr, add(0x60, mul(i, 0x20))))\\n                )\\n            }\\n\\n            let initDataPos := calldataload(add(configPtr, 0x40))\\n            let initDataLen := calldataload(\\n                sub(add(configPtr, initDataPos), 0x20)\\n            )\\n            let initDataPtr := 0x60\\n            mstore(initDataPtr, initDataLen)\\n            calldatacopy(\\n                add(initDataPtr, 0x20),\\n                add(configPtr, initDataPos),\\n                initDataLen\\n            )\\n            initData := initDataPtr\\n        }\\n\\n        if (calltype == CALLTYPE_DELEGATECALL) revert FallbackInvalidCallType();\\n\\n        if (_isFallbackHandlerInstalled(selector)) {\\n            revert(\\\"Function selector already used\\\");\\n        }\\n        $moduleManager().$fallbacks[selector] = FallbackHandler(\\n            handler,\\n            calltype,\\n            allowedCallers\\n        );\\n        IFallback(handler).onInstall(initData);\\n    }\\n\\n    function _uninstallFallbackHandler(\\n        address handler,\\n        bytes calldata deInitData\\n    ) internal virtual {\\n        bytes4 selector = bytes4(deInitData[0:4]);\\n        bytes memory _deInitData = deInitData[4:];\\n\\n        if (!_isFallbackHandlerInstalled(selector)) {\\n            revert(\\\"Function selector not used\\\");\\n        }\\n\\n        FallbackHandler memory activeFallback = $moduleManager().$fallbacks[\\n            selector\\n        ];\\n\\n        if (activeFallback.handler != handler) {\\n            revert(\\\"Function selector not used by this handler\\\");\\n        }\\n\\n        CallType callType = activeFallback.calltype;\\n\\n        if (callType == CALLTYPE_DELEGATECALL) revert FallbackInvalidCallType();\\n        address[] memory allowedCallers = new address[](0);\\n        $moduleManager().$fallbacks[selector] = FallbackHandler(\\n            address(0),\\n            CallType.wrap(0x00),\\n            allowedCallers\\n        );\\n\\n        IFallback(handler).onUninstall(_deInitData);\\n    }\\n\\n    function _isFallbackHandlerInstalled(\\n        bytes4 functionSig\\n    ) internal view virtual returns (bool) {\\n        FallbackHandler storage $fallback = $moduleManager().$fallbacks[\\n            functionSig\\n        ];\\n        return $fallback.handler != address(0);\\n    }\\n\\n    function _isFallbackHandlerInstalled(\\n        bytes4 functionSig,\\n        address _handler\\n    ) internal view virtual returns (bool) {\\n        FallbackHandler storage $fallback = $moduleManager().$fallbacks[\\n            functionSig\\n        ];\\n        return $fallback.handler == _handler;\\n    }\\n\\n    function getActiveFallbackHandler(\\n        bytes4 functionSig\\n    ) external view virtual returns (FallbackHandler memory) {\\n        return $moduleManager().$fallbacks[functionSig];\\n    }\\n\\n    // validates that the caller is allowed and reverts if not.\\n\\n    function _validateCaller(bytes4 sig) private view {\\n        address[] memory allowed = $moduleManager()\\n            .$fallbacks[sig]\\n            .allowedCallers;\\n        if (ArrayLib._contains(allowed, msg.sender) == false) {\\n            revert InvalidFallbackCaller(msg.sender);\\n        }\\n    }\\n\\n    // FALLBACK\\n    // calling _validateCaller()\\n\\n    fallback() external payable override(Receiver) {\\n        _validateCaller(msg.sig);\\n        FallbackHandler storage $fallbackHandler = $moduleManager().$fallbacks[\\n            msg.sig\\n        ];\\n        address handler = $fallbackHandler.handler;\\n        CallType calltype = $fallbackHandler.calltype;\\n\\n        if (handler == address(0)) revert NoFallbackHandler(msg.sig);\\n\\n        if (calltype == CALLTYPE_STATIC) {\\n            assembly {\\n                function allocate(length) -> pos {\\n                    pos := mload(0x40)\\n                    mstore(0x40, add(pos, length))\\n                }\\n\\n                let calldataPtr := allocate(calldatasize())\\n                calldatacopy(calldataPtr, 0, calldatasize())\\n\\n                // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n                // Then the address without padding is stored right after the calldata\\n                let senderPtr := allocate(20)\\n                mstore(senderPtr, shl(96, caller()))\\n\\n                // Add 20 bytes for the address appended add the end\\n                let success := staticcall(\\n                    gas(),\\n                    handler,\\n                    calldataPtr,\\n                    add(calldatasize(), 20),\\n                    0,\\n                    0\\n                )\\n\\n                let returnDataPtr := allocate(returndatasize())\\n                returndatacopy(returnDataPtr, 0, returndatasize())\\n                if iszero(success) {\\n                    revert(returnDataPtr, returndatasize())\\n                }\\n                return(returnDataPtr, returndatasize())\\n            }\\n        }\\n        if (calltype == CALLTYPE_SINGLE) {\\n            assembly {\\n                function allocate(length) -> pos {\\n                    pos := mload(0x40)\\n                    mstore(0x40, add(pos, length))\\n                }\\n\\n                let calldataPtr := allocate(calldatasize())\\n                calldatacopy(calldataPtr, 0, calldatasize())\\n\\n                // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n                // Then the address without padding is stored right after the calldata\\n                let senderPtr := allocate(20)\\n                mstore(senderPtr, shl(96, caller()))\\n\\n                // Add 20 bytes for the address appended add the end\\n                let success := call(\\n                    gas(),\\n                    handler,\\n                    0,\\n                    calldataPtr,\\n                    add(calldatasize(), 20),\\n                    0,\\n                    0\\n                )\\n\\n                let returnDataPtr := allocate(returndatasize())\\n                returndatacopy(returnDataPtr, 0, returndatasize())\\n                if iszero(success) {\\n                    revert(returnDataPtr, returndatasize())\\n                }\\n                return(returnDataPtr, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34980edcd49f6c00978306077fe18171d6eda47a120d7d6071511e782efab33e\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title Receiver\\n * @dev This contract receives safe-transferred ERC721 and ERC1155 tokens.\\n * @author Modified from Solady\\n * (https://github.com/Vectorized/solady/blob/main/src/accounts/Receiver.sol)\\n */\\nabstract contract Receiver {\\n    /// @dev For receiving ETH.\\n    receive() external payable virtual {}\\n\\n    /// @dev Fallback function with the `receiverFallback` modifier.\\n    fallback() external payable virtual {}\\n}\\n\",\"keccak256\":\"0xf5ce3193d2ccdd09a14767cb39c775940de4bf99863a63fdb0a99c294a06ee88\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/interfaces/IERC7579Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { CallType, ExecType, ModeCode } from \\\"../libs/ModeLib.sol\\\";\\nimport {PackedUserOperation} from \\\"../../../../account-abstraction/contracts/interfaces/IAccount.sol\\\";\\n\\nstruct Execution {\\n    address target;\\n    uint256 value;\\n    bytes callData;\\n}\\n\\ninterface IERC7579Account {\\n    event ModuleInstalled(uint256 moduleTypeId, address module);\\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * @dev Ensure adequate authorization control: i.e. onlyEntryPointOrSelf\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     */\\n    function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by Executor Modules\\n     * @dev Ensure adequate authorization control: i.e. onlyExecutorModule\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     */\\n    function executeFromExecutor(\\n        ModeCode mode,\\n        bytes calldata executionCalldata\\n    )\\n        external\\n        payable\\n        returns (bytes[] memory returnData);\\n\\n    /**\\n     * @dev ERC-4337 executeUserOp according to ERC-4337 v0.7\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * @dev Ensure adequate authorization control: i.e. onlyEntryPointOrSelf\\n     *      The implementation of the function is OPTIONAL\\n     *\\n     * @param userOp PackedUserOperation struct (see ERC-4337 v0.7+)\\n     */\\n    function executeUserOp(PackedUserOperation calldata userOp) external payable;\\n\\n    /**\\n     * @dev ERC-4337 validateUserOp according to ERC-4337 v0.7\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * this validation function should decode / sload the validator module to validate the userOp\\n     * and call it.\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * @param userOp PackedUserOperation struct (see ERC-4337 v0.7+)\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    )\\n        external\\n        payable\\n        returns (uint256 validSignature);\\n\\n    /**\\n     * @dev ERC-1271 isValidSignature\\n     *         This function is intended to be used to validate a smart account signature\\n     * and may forward the call to a validator module\\n     *\\n     * @param hash The hash of the data that is signed\\n     * @param data The data that is signed\\n     */\\n    function isValidSignature(bytes32 hash, bytes calldata data) external view returns (bytes4);\\n\\n    /**\\n     * @dev installs a Module of a certain type on the smart account\\n     * @dev Implement Authorization control of your chosing\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param initData arbitrary data that may be required on the module during `onInstall`\\n     * initialization.\\n     */\\n    function installModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata initData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @dev uninstalls a Module of a certain type on the smart account\\n     * @dev Implement Authorization control of your chosing\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param deInitData arbitrary data that may be required on the module during `onUninstall`\\n     * de-initialization.\\n     */\\n    function uninstallModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata deInitData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * Function to check if the account supports a certain CallType or ExecType (see ModeLib.sol)\\n     * @param encodedMode the encoded mode\\n     */\\n    function supportsExecutionMode(ModeCode encodedMode) external view returns (bool);\\n\\n    /**\\n     * Function to check if the account supports installation of a certain module type Id\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     */\\n    function supportsModule(uint256 moduleTypeId) external view returns (bool);\\n\\n    /**\\n     * Function to check if the account has a certain module installed\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     *      Note: keep in mind that some contracts can be multiple module types at the same time. It\\n     *            thus may be necessary to query multiple module types\\n     * @param module the module address\\n     * @param additionalContext additional context data that the smart account may interpret to\\n     *                          identifiy conditions under which the module is installed.\\n     *                          usually this is not necessary, but for some special hooks that\\n     *                          are stored in mappings, this param might be needed\\n     */\\n    function isModuleInstalled(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the account id of the smart account\\n     * @return accountImplementationId the account id of the smart account\\n     * the accountId should be structured like so:\\n     *        \\\"vendorname.accountname.semver\\\"\\n     */\\n    function accountId() external view returns (string memory accountImplementationId);\\n}\",\"keccak256\":\"0xb8d6b68dd9ebad9367cb3c2829033692b53b708301978bc2e3c6f9caaf503c8f\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/interfaces/IERC7579Module.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {PackedUserOperation} from \\\"../../../../account-abstraction/contracts/interfaces/PackedUserOperation.sol\\\";\\n\\nuint256 constant VALIDATION_SUCCESS = 0;\\nuint256 constant VALIDATION_FAILED = 1;\\n\\nuint256 constant MODULE_TYPE_VALIDATOR = 1;\\nuint256 constant MODULE_TYPE_EXECUTOR = 2;\\nuint256 constant MODULE_TYPE_FALLBACK = 3;\\nuint256 constant MODULE_TYPE_HOOK = 4;\\n\\ninterface IModule {\\n    error AlreadyInitialized(address smartAccount);\\n    error NotInitialized(address smartAccount);\\n\\n    /**\\n     * @dev This function is called by the smart account during installation of the module\\n     * @param data arbitrary data that may be required on the module during `onInstall`\\n     * initialization\\n     *\\n     * MUST revert on error (i.e. if module is already enabled)\\n     */\\n    function onInstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev This function is called by the smart account during uninstallation of the module\\n     * @param data arbitrary data that may be required on the module during `onUninstall`\\n     * de-initialization\\n     *\\n     * MUST revert on error\\n     */\\n    function onUninstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns boolean value if module is a certain type\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     *\\n     * MUST return true if the module is of the given type and false otherwise\\n     */\\n    function isModuleType(uint256 moduleTypeId) external view returns (bool);\\n\\n    /**\\n     * @dev Returns if the module was already initialized for a provided smartaccount\\n     */\\n    function isInitialized(address smartAccount) external view returns (bool);\\n}\\n\\ninterface IValidator is IModule {\\n    error InvalidTargetAddress(address target);\\n\\n    /**\\n     * @dev Validates a transaction on behalf of the account.\\n     *         This function is intended to be called by the MSA during the ERC-4337 validaton phase\\n     *         Note: solely relying on bytes32 hash and signature is not suffcient for some\\n     * validation implementations (i.e. SessionKeys often need access to userOp.calldata)\\n     * @param userOp The user operation to be validated. The userOp MUST NOT contain any metadata.\\n     * The MSA MUST clean up the userOp before sending it to the validator.\\n     * @param userOpHash The hash of the user operation to be validated\\n     * @return return value according to ERC-4337\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * Validator can be used for ERC-1271 validation\\n     */\\n    function isValidSignatureWithSender(\\n        address sender,\\n        bytes32 hash,\\n        bytes calldata data\\n    )\\n        external\\n        view\\n        returns (bytes4);\\n}\\n\\ninterface IExecutor is IModule { }\\n\\ninterface IHook is IModule {\\n    function preCheck(\\n        address msgSender,\\n        bytes calldata msgData\\n    )\\n        external\\n        returns (bytes memory hookData);\\n    function postCheck(bytes calldata hookData) external returns (bool success);\\n}\\n\\ninterface IFallback is IModule { }\",\"keccak256\":\"0xb70280ab96b9dcfed3c559a3a1ed64850fc2171374e5809d2d2887c4956c8379\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/interfaces/IMSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC7579Account} from \\\"./IERC7579Account.sol\\\";\\n\\nimport {CallType, ExecType, ModeCode} from \\\"../libs/ModeLib.sol\\\";\\n\\ninterface IMSA is IERC7579Account {\\n    // Error thrown when an unsupported ModuleType is requested\\n    error UnsupportedModuleType(uint256 moduleType);\\n    // Error thrown when an execution with an unsupported CallType was made\\n    error UnsupportedCallType(CallType callType);\\n    // Error thrown when an execution with an unsupported ExecType was made\\n    error UnsupportedExecType(ExecType execType);\\n    // Error thrown when account initialization fails\\n    error AccountInitializationFailed();\\n\\n    /**\\n     * @dev Initializes the account. Function might be called directly, or by a Factory\\n     * @param data. encoded data that can be used during the initialization phase\\n     */\\n    function initializeAccount(bytes calldata data) external payable;\\n}\\n\",\"keccak256\":\"0xe8fdf22aec84d6d189646659ef3a659f81e42a0885c962827269ff4ce4eeba84\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/libs/ExecutionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {Execution} from \\\"../interfaces/IERC7579Account.sol\\\";\\n\\n/**\\n * Helper Library for decoding Execution calldata\\n * malloc for memory allocation is bad for gas. use this assembly instead\\n */\\nlibrary ExecutionLib {\\n    function decodeBatch(\\n        bytes calldata callData\\n    ) internal pure returns (Execution[] calldata executionBatch) {\\n        /*\\n         * Batch Call Calldata Layout\\n         * Offset (in bytes)    | Length (in bytes) | Contents\\n         * 0x0                  | 0x4               | bytes4 function selector\\n        *  0x4                  | -                 |\\n        abi.encode(IERC7579Execution.Execution[])\\n         */\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPointer := add(\\n                callData.offset,\\n                calldataload(callData.offset)\\n            )\\n\\n            // Extract the ERC7579 Executions\\n            executionBatch.offset := add(dataPointer, 32)\\n            executionBatch.length := calldataload(dataPointer)\\n        }\\n    }\\n\\n    function encodeBatch(\\n        Execution[] memory executions\\n    ) internal pure returns (bytes memory callData) {\\n        callData = abi.encode(executions);\\n    }\\n\\n    function decodeSingle(\\n        bytes calldata executionCalldata\\n    )\\n        internal\\n        pure\\n        returns (address target, uint256 value, bytes calldata callData)\\n    {\\n        target = address(bytes20(executionCalldata[0:20]));\\n        value = uint256(bytes32(executionCalldata[20:52]));\\n        callData = executionCalldata[52:];\\n    }\\n\\n    function encodeSingle(\\n        address target,\\n        uint256 value,\\n        bytes memory callData\\n    ) internal pure returns (bytes memory userOpCalldata) {\\n        userOpCalldata = abi.encodePacked(target, value, callData);\\n    }\\n}\\n\",\"keccak256\":\"0xad2974b9073a9dd7eb9c6fc33c9becce272d270d7c14b4438a92221c0e1f0126\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/libs/ModeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ModeLib\\n * To allow smart accounts to be very simple, but allow for more complex execution, A custom mode\\n * encoding is used.\\n *    Function Signature of execute function:\\n *           function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\\n * This allows for a single bytes32 to be used to encode the execution mode, calltype, execType and\\n * context.\\n * NOTE: Simple Account implementations only have to scope for the most significant byte. Account  that\\n * implement\\n * more complex execution modes may use the entire bytes32.\\n *\\n * |--------------------------------------------------------------------|\\n * | CALLTYPE  | EXECTYPE  |   UNUSED   | ModeSelector  |  ModePayload  |\\n * |--------------------------------------------------------------------|\\n * | 1 byte    | 1 byte    |   4 bytes  | 4 bytes       |   22 bytes    |\\n * |--------------------------------------------------------------------|\\n *\\n * CALLTYPE: 1 byte\\n * CallType is used to determine how the executeCalldata paramter of the execute function has to be\\n * decoded.\\n * It can be either single, batch or delegatecall. In the future different calls could be added.\\n * CALLTYPE can be used by a validation module to determine how to decode <userOp.callData[36:]>.\\n *\\n * EXECTYPE: 1 byte\\n * ExecType is used to determine how the account should handle the execution.\\n * It can indicate if the execution should revert on failure or continue execution.\\n * In the future more execution modes may be added.\\n * Default Behavior (EXECTYPE = 0x00) is to revert on a single failed execution. If one execution in\\n * a batch fails, the entire batch is reverted\\n *\\n * UNUSED: 4 bytes\\n * Unused bytes are reserved for future use.\\n *\\n * ModeSelector: bytes4\\n * The \\\"optional\\\" mode selector can be used by account vendors, to implement custom behavior in\\n * their accounts.\\n * the way a ModeSelector is to be calculated is bytes4(keccak256(\\\"vendorname.featurename\\\"))\\n * this is to prevent collisions between different vendors, while allowing innovation and the\\n * development of new features without coordination between ERC-7579 implementing accounts\\n *\\n * ModePayload: 22 bytes\\n * Mode payload is used to pass additional data to the smart account execution, this may be\\n * interpreted depending on the ModeSelector\\n *\\n * ExecutionCallData: n bytes\\n * single, delegatecall or batch exec abi.encoded as bytes\\n */\\nimport { Execution } from \\\"../interfaces/IERC7579Account.sol\\\";\\n\\n// Custom type for improved developer experience\\ntype ModeCode is bytes32;\\n\\ntype CallType is bytes1;\\n\\ntype ExecType is bytes1;\\n\\ntype ModeSelector is bytes4;\\n\\ntype ModePayload is bytes22;\\n\\n// Default CallType\\nCallType constant CALLTYPE_SINGLE = CallType.wrap(0x00);\\n// Batched CallType\\nCallType constant CALLTYPE_BATCH = CallType.wrap(0x01);\\n// @dev Implementing delegatecall is OPTIONAL!\\n// implement delegatecall with extreme care.\\nCallType constant CALLTYPE_STATIC = CallType.wrap(0xFE);\\nCallType constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\\n\\n// @dev default behavior is to revert on failure\\n// To allow very simple accounts to use mode encoding, the default behavior is to revert on failure\\n// Since this is value 0x00, no additional encoding is required for simple accounts\\nExecType constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\\n// @dev account may elect to change execution behavior. For example \\\"try exec\\\" / \\\"allow fail\\\"\\nExecType constant EXECTYPE_TRY = ExecType.wrap(0x01);\\n\\nModeSelector constant MODE_DEFAULT = ModeSelector.wrap(bytes4(0x00000000));\\n// Example declaration of a custom mode selector\\nModeSelector constant MODE_OFFSET = ModeSelector.wrap(bytes4(keccak256(\\\"default.mode.offset\\\")));\\n\\n/**\\n * @dev ModeLib is a helper library to encode/decode ModeCodes\\n */\\nlibrary ModeLib {\\n    function decode(ModeCode mode)\\n        internal\\n        pure\\n        returns (\\n            CallType _calltype,\\n            ExecType _execType,\\n            ModeSelector _modeSelector,\\n            ModePayload _modePayload\\n        )\\n    {\\n        assembly {\\n            _calltype := mode\\n            _execType := shl(8, mode)\\n            _modeSelector := shl(48, mode)\\n            _modePayload := shl(80, mode)\\n        }\\n    }\\n\\n    function encode(\\n        CallType callType,\\n        ExecType execType,\\n        ModeSelector mode,\\n        ModePayload payload\\n    )\\n        internal\\n        pure\\n        returns (ModeCode)\\n    {\\n        return ModeCode.wrap(\\n            bytes32(\\n                abi.encodePacked(callType, execType, bytes4(0), ModeSelector.unwrap(mode), payload)\\n            )\\n        );\\n    }\\n\\n    function encodeSimpleBatch() internal pure returns (ModeCode mode) {\\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\\n    }\\n\\n    function encodeSimpleSingle() internal pure returns (ModeCode mode) {\\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\\n    }\\n\\n    function getCallType(ModeCode mode) internal pure returns (CallType calltype) {\\n        assembly {\\n            calltype := mode\\n        }\\n    }\\n}\\n\\nusing { eqModeSelector as == } for ModeSelector global;\\nusing { eqCallType as == } for CallType global;\\nusing { eqExecType as == } for ExecType global;\\n\\nfunction eqCallType(CallType a, CallType b) pure returns (bool) {\\n    return CallType.unwrap(a) == CallType.unwrap(b);\\n}\\n\\nfunction eqExecType(ExecType a, ExecType b) pure returns (bool) {\\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\\n}\\n\\nfunction eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\\n}\",\"keccak256\":\"0x9c0886362e13274bb5e255ff391b13290461ce02b58d9dff9ae55b5bd01fcba3\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/libs/SentinelList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\naddress constant SENTINEL = address(0x1);\\naddress constant ZERO_ADDRESS = address(0x0);\\n\\nlibrary SentinelListLib {\\n    struct SentinelList {\\n        mapping(address => address) entries;\\n    }\\n\\n    error LinkedList_AlreadyInitialized();\\n    error LinkedList_InvalidPage();\\n    error LinkedList_InvalidEntry(address entry);\\n    error LinkedList_EntryAlreadyInList(address entry);\\n\\n    function init(SentinelList storage self) internal {\\n        if (alreadyInitialized(self)) revert LinkedList_AlreadyInitialized();\\n        self.entries[SENTINEL] = SENTINEL;\\n    }\\n\\n    function alreadyInitialized(SentinelList storage self) internal view returns (bool) {\\n        return self.entries[SENTINEL] != ZERO_ADDRESS;\\n    }\\n\\n    function getNext(SentinelList storage self, address entry) internal view returns (address) {\\n        if (entry == ZERO_ADDRESS) {\\n            revert LinkedList_InvalidEntry(entry);\\n        }\\n        return self.entries[entry];\\n    }\\n\\n    function push(SentinelList storage self, address newEntry) internal {\\n        if (newEntry == ZERO_ADDRESS || newEntry == SENTINEL) {\\n            revert LinkedList_InvalidEntry(newEntry);\\n        }\\n        if (self.entries[newEntry] != ZERO_ADDRESS) revert LinkedList_EntryAlreadyInList(newEntry);\\n        self.entries[newEntry] = self.entries[SENTINEL];\\n        self.entries[SENTINEL] = newEntry;\\n    }\\n\\n    function pop(SentinelList storage self, address prevEntry, address popEntry) internal {\\n        if (popEntry == ZERO_ADDRESS || popEntry == SENTINEL) {\\n            revert LinkedList_InvalidEntry(prevEntry);\\n        }\\n        if (self.entries[prevEntry] != popEntry) revert LinkedList_InvalidEntry(popEntry);\\n        self.entries[prevEntry] = self.entries[popEntry];\\n        self.entries[popEntry] = ZERO_ADDRESS;\\n    }\\n\\n    function popAll(SentinelList storage self) internal {\\n        address next = self.entries[SENTINEL];\\n        while (next != ZERO_ADDRESS) {\\n            address current = next;\\n            next = self.entries[next];\\n            self.entries[current] = ZERO_ADDRESS;\\n        }\\n        self.entries[SENTINEL] = ZERO_ADDRESS;\\n    }\\n\\n    function contains(SentinelList storage self, address entry) internal view returns (bool) {\\n        return SENTINEL != entry && self.entries[entry] != ZERO_ADDRESS;\\n    }\\n\\n    function getEntriesPaginated(\\n        SentinelList storage self,\\n        address start,\\n        uint256 pageSize\\n    )\\n        internal\\n        view\\n        returns (address[] memory array, address next)\\n    {\\n        if (start != SENTINEL && !contains(self, start)) revert LinkedList_InvalidEntry(start);\\n        if (pageSize == 0) revert LinkedList_InvalidPage();\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 entryCount = 0;\\n        next = self.entries[start];\\n        while (next != ZERO_ADDRESS && next != SENTINEL && entryCount < pageSize) {\\n            array[entryCount] = next;\\n            next = self.entries[next];\\n            entryCount++;\\n        }\\n\\n        /**\\n         * Because of the argument validation, we can assume that the loop will always iterate over\\n         * the valid entry list values\\n         *       and the `next` variable will either be an enabled entry or a sentinel address\\n         * (signalling the end).\\n         *\\n         *       If we haven't reached the end inside the loop, we need to set the next pointer to\\n         * the last element of the entry array\\n         *       because the `next` variable (which is a entry by itself) acting as a pointer to the\\n         * start of the next page is neither\\n         *       incSENTINELrent page, nor will it be included in the next one if you pass it as a\\n         * start.\\n         */\\n        if (next != SENTINEL && entryCount > 0) {\\n            next = array[entryCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(array, entryCount)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0fdb07d60acf6c8272517b2cf9a7ce36cef7dabd3acfc61e7424662818044da2\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/interfaces/IAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IAccessController {\\n    /// Structs\\n    struct NewOwnerProposal {\\n        address newOwnerProposed;\\n        bool resolved;\\n        address[] guardiansApproved;\\n        uint256 approvalCount;\\n        uint256 proposedAt;\\n    }\\n\\n    /// Events\\n    event OwnerAdded(address account, address newOwner);\\n    event OwnerRemoved(address account, address removedOwner);\\n    event GuardianAdded(address account, address newGuardian);\\n    event GuardianRemoved(address account, address removedGuardian);\\n    event ProposalSubmitted(\\n        address account,\\n        uint256 proposalId,\\n        address newOwnerProposed,\\n        address proposer\\n    );\\n    event QuorumNotReached(\\n        address account,\\n        uint256 proposalId,\\n        address newOwnerProposed,\\n        uint256 approvalCount\\n    );\\n    event ProposalDiscarded(\\n        address account,\\n        uint256 proposalId,\\n        address discardedBy\\n    );\\n\\n    /// External\\n    function addOwner(address _newOwner) external;\\n\\n    function removeOwner(address _owner) external;\\n\\n    function addGuardian(address _newGuardian) external;\\n\\n    function removeGuardian(address _guardian) external;\\n\\n    function changeProposalTimelock(uint256 _newTimelock) external;\\n\\n    function discardCurrentProposal() external;\\n\\n    function guardianPropose(address _newOwner) external;\\n\\n    function guardianCosign() external;\\n\\n    /// Views\\n    function isOwner(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function getProposal(\\n        uint256 _proposalId\\n    )\\n        external\\n        view\\n        returns (\\n            address ownerProposed_,\\n            uint256 approvalCount_,\\n            address[] memory guardiansApproved_,\\n            bool resolved_,\\n            uint256 proposedAt_\\n        );\\n}\\n\",\"keccak256\":\"0x7b145487fed51865b8f8fd3bd6ff799360146d8dbb9b7651e5d8e7bbb6eed930\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/interfaces/IModularEtherspotWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IMSA} from \\\"../erc7579-ref-impl/interfaces/IMSA.sol\\\";\\nimport {IAccessController} from \\\"./IAccessController.sol\\\";\\n\\ninterface IModularEtherspotWallet is IMSA, IAccessController\\n{\\n  error OnlyProxy();\\n}\\n\",\"keccak256\":\"0x1af5ab78210983978c8312d129ed3f01bb12e30b4494315e89067922fdcffd75\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/libraries/ArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary ArrayLib {\\n    function _contains(\\n        address[] memory A,\\n        address a\\n    ) internal pure returns (bool) {\\n        (, bool isIn) = _indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    function _indexOf(\\n        address[] memory A,\\n        address a\\n    ) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _removeElement(\\n        address[] storage _data,\\n        address _element\\n    ) internal {\\n        uint256 length = _data.length;\\n        // remove item from array and resize array\\n        for (uint256 ii = 0; ii < length; ii++) {\\n            if (_data[ii] == _element) {\\n                if (length > 1) {\\n                    _data[ii] = _data[length - 1];\\n                }\\n                _data.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _removeElement(\\n        address[] memory _data,\\n        address _element\\n    ) internal pure returns (address[] memory) {\\n        address[] memory newData = new address[](_data.length - 1);\\n        uint256 j;\\n        for (uint256 i; i < _data.length; i++) {\\n            if (_data[i] != _element) {\\n                newData[j] = _data[i];\\n                j++;\\n            }\\n        }\\n        return newData;\\n    }\\n}\\n\",\"keccak256\":\"0x6179c61cbc4fc0c811dce30e94e4ecf647c472c57ad10dc8cefb7b9cbde458d9\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/libraries/ErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary ErrorsLib {\\n    /// AccessController\\n    error OnlyOwnerOrSelf();\\n    error OnlyGuardian();\\n    error OnlyOwnerOrGuardianOrSelf();\\n\\n    error AddingInvalidOwner();\\n    error RemovingInvalidOwner();\\n    error AddingInvalidGuardian();\\n    error RemovingInvalidGuardian();\\n\\n    error WalletNeedsOwner();\\n    error NotEnoughGuardians();\\n\\n    error ProposalResolved();\\n    error ProposalUnresolved();\\n    error AlreadySignedProposal();\\n\\n    error ProposalTimelocked();\\n    error InvalidProposal();\\n\\n    // EtherspotWallet7579 Errors\\n}\\n\",\"keccak256\":\"0x9efef01177a836a407e12ba61ef9276901c31c640e1d3a6aecdca1585715b268\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"../erc7579-ref-impl/libs/ModeLib.sol\\\";\\nimport {ExecutionLib} from \\\"../erc7579-ref-impl/libs/ExecutionLib.sol\\\";\\nimport {ExecutionHelper} from \\\"../erc7579-ref-impl/core/ExecutionHelper.sol\\\";\\nimport {PackedUserOperation} from \\\"../../../account-abstraction/contracts/interfaces/PackedUserOperation.sol\\\";\\nimport \\\"../erc7579-ref-impl/interfaces/IERC7579Module.sol\\\";\\nimport {IModularEtherspotWallet} from \\\"../interfaces/IModularEtherspotWallet.sol\\\";\\nimport {ModuleManager} from \\\"../erc7579-ref-impl/core/ModuleManager.sol\\\";\\nimport {HookManager} from \\\"../erc7579-ref-impl/core/HookManager.sol\\\";\\nimport {AccessController} from \\\"../access/AccessController.sol\\\";\\n\\ncontract ModularEtherspotWallet is\\n    AccessController,\\n    IModularEtherspotWallet,\\n    ExecutionHelper,\\n    ModuleManager,\\n    HookManager\\n{\\n    using ExecutionLib for bytes;\\n    using ModeLib for ModeCode;\\n    address public immutable implementation = address(this);\\n\\n    /**\\n     * @dev modifier to restrict access to calling on implementation\\n     */\\n    modifier onlyProxy() {\\n        if (address(this) == implementation) revert OnlyProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev see {IERC7579Account}.\\n     * @dev this function is only callable by the entry point or the account itself\\n     * @dev this function demonstrates how to implement\\n     * CallType SINGLE and BATCH and ExecType DEFAULT and TRY\\n     * @dev this function demonstrates how to implement hook support (modifier)\\n     */\\n    function execute(\\n        ModeCode mode,\\n        bytes calldata executionCalldata\\n    ) external payable onlyEntryPointOrSelf withHook {\\n        (CallType callType, ExecType execType, , ) = mode.decode();\\n\\n        // check if calltype is batch or single\\n        if (callType == CALLTYPE_BATCH) {\\n            // destructure executionCallData according to batched exec\\n            Execution[] calldata executions = executionCalldata.decodeBatch();\\n            // check if execType is revert or try\\n            if (execType == EXECTYPE_DEFAULT) _execute(executions);\\n            else if (execType == EXECTYPE_TRY) _tryExecute(executions);\\n            else revert UnsupportedExecType(execType);\\n        } else if (callType == CALLTYPE_SINGLE) {\\n            // destructure executionCallData according to single exec\\n            (\\n                address target,\\n                uint256 value,\\n                bytes calldata callData\\n            ) = executionCalldata.decodeSingle();\\n            // check if execType is revert or try\\n            if (execType == EXECTYPE_DEFAULT)\\n                _execute(target, value, callData);\\n                // TODO: implement event emission for tryExecute singleCall\\n            else if (execType == EXECTYPE_TRY)\\n                _tryExecute(target, value, callData);\\n            else revert UnsupportedExecType(execType);\\n        } else if (callType == CALLTYPE_DELEGATECALL) {\\n            // destructure executionCallData according to single exec\\n            address delegate = address(\\n                uint160(bytes20(executionCalldata[0:20]))\\n            );\\n            bytes calldata callData = executionCalldata[20:];\\n            // check if execType is revert or try\\n            if (execType == EXECTYPE_DEFAULT)\\n                _executeDelegatecall(delegate, callData);\\n            else if (execType == EXECTYPE_TRY)\\n                _tryExecuteDelegatecall(delegate, callData);\\n            else revert UnsupportedExecType(execType);\\n        } else {\\n            revert UnsupportedCallType(callType);\\n        }\\n    }\\n\\n    /**\\n     * @dev see {IERC7579Account}.\\n     * @dev this function is only callable by an installed executor module\\n     * @dev this function demonstrates how to implement\\n     * CallType SINGLE and BATCH and ExecType DEFAULT and TRY\\n     * @dev this function demonstrates how to implement hook support (modifier)\\n     */\\n    function executeFromExecutor(\\n        ModeCode mode,\\n        bytes calldata executionCalldata\\n    )\\n        external\\n        payable\\n        onlyExecutorModule\\n        withHook\\n        returns (\\n            bytes[] memory returnData // TODO returnData is not used\\n        )\\n    {\\n        (CallType callType, ExecType execType, , ) = mode.decode();\\n\\n        // check if calltype is batch or single\\n        if (callType == CALLTYPE_BATCH) {\\n            // destructure executionCallData according to batched exec\\n            Execution[] calldata executions = executionCalldata.decodeBatch();\\n            // check if execType is revert or try\\n            if (execType == EXECTYPE_DEFAULT) returnData = _execute(executions);\\n            else if (execType == EXECTYPE_TRY)\\n                returnData = _tryExecute(executions);\\n            else revert UnsupportedExecType(execType);\\n        } else if (callType == CALLTYPE_SINGLE) {\\n            // destructure executionCallData according to single exec\\n            (\\n                address target,\\n                uint256 value,\\n                bytes calldata callData\\n            ) = executionCalldata.decodeSingle();\\n            returnData = new bytes[](1);\\n            bool success;\\n            // check if execType is revert or try\\n            if (execType == EXECTYPE_DEFAULT) {\\n                returnData[0] = _execute(target, value, callData);\\n            }\\n            // TODO: implement event emission for tryExecute singleCall\\n            else if (execType == EXECTYPE_TRY) {\\n                (success, returnData[0]) = _tryExecute(target, value, callData);\\n                if (!success) emit TryExecuteUnsuccessful(0, returnData[0]);\\n            } else {\\n                revert UnsupportedExecType(execType);\\n            }\\n        } else if (callType == CALLTYPE_DELEGATECALL) {\\n            // destructure executionCallData according to single exec\\n            address delegate = address(\\n                uint160(bytes20(executionCalldata[0:20]))\\n            );\\n            bytes calldata callData = executionCalldata[20:];\\n            // check if execType is revert or try\\n            if (execType == EXECTYPE_DEFAULT)\\n                _executeDelegatecall(delegate, callData);\\n            else if (execType == EXECTYPE_TRY)\\n                _tryExecuteDelegatecall(delegate, callData);\\n            else revert UnsupportedExecType(execType);\\n        } else {\\n            revert UnsupportedCallType(callType);\\n        }\\n    }\\n\\n    /**\\n     *  @dev see {IERC7579Account}.\\n     */\\n    function executeUserOp(\\n        PackedUserOperation calldata userOp\\n    ) external payable onlyEntryPointOrSelf {\\n        bytes calldata callData = userOp.callData[4:];\\n        (bool success, ) = address(this).delegatecall(callData);\\n        if (!success) revert ExecutionFailed();\\n    }\\n\\n    /**\\n     *  @dev see {IERC7579Account}.\\n     */\\n    function installModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata initData\\n    ) external payable onlyEntryPointOrSelf {\\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR)\\n            _installValidator(module, initData);\\n        else if (moduleTypeId == MODULE_TYPE_EXECUTOR)\\n            _installExecutor(module, initData);\\n        else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\\n            _installFallbackHandler(module, initData);\\n        } else if (moduleTypeId == MODULE_TYPE_HOOK)\\n            _installHook(module, initData);\\n        else revert UnsupportedModuleType(moduleTypeId);\\n        emit ModuleInstalled(moduleTypeId, module);\\n    }\\n\\n    /**\\n     *  @dev see {IERC7579Account}.\\n     */\\n    function uninstallModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata deInitData\\n    ) external payable onlyEntryPointOrSelf {\\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\\n            _uninstallValidator(module, deInitData);\\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\\n            _uninstallExecutor(module, deInitData);\\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\\n            _uninstallFallbackHandler(module, deInitData);\\n        } else if (moduleTypeId == MODULE_TYPE_HOOK) {\\n            _uninstallHook(module, deInitData);\\n        } else {\\n            revert UnsupportedModuleType(moduleTypeId);\\n        }\\n        emit ModuleUninstalled(moduleTypeId, module);\\n    }\\n\\n    /**\\n     * @dev see {IERC7579Account}.\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        onlyEntryPoint\\n        payPrefund(missingAccountFunds)\\n        returns (uint256 validSignature)\\n    {\\n        address validator;\\n        // @notice validator encoding in nonce is just an example!\\n        // @notice this is not part of the standard!\\n        // Account Vendors may choose any other way to implement validator selection\\n        uint256 nonce = userOp.nonce;\\n        assembly {\\n            validator := shr(96, nonce)\\n        }\\n\\n        // check if validator is enabled. If not terminate the validation phase.\\n        if (!_isValidatorInstalled(validator)) return VALIDATION_FAILED;\\n\\n        // bubble up the return value of the validator module\\n        validSignature = IValidator(validator).validateUserOp(\\n            userOp,\\n            userOpHash\\n        );\\n    }\\n\\n    /**\\n     * @dev ERC-1271 isValidSignature\\n     *         This function is intended to be used to validate a smart account signature\\n     * and may forward the call to a validator module\\n     *\\n     * @param hash The hash of the data that is signed\\n     * @param data The data that is signed\\n     */\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes calldata data\\n    ) external view virtual override returns (bytes4) {\\n        address validator = address(bytes20(data[0:20]));\\n        if (!_isValidatorInstalled(validator)) revert InvalidModule(validator);\\n        return\\n            IValidator(validator).isValidSignatureWithSender(\\n                msg.sender,\\n                hash,\\n                data[20:]\\n            );\\n    }\\n\\n    /**\\n     * @dev see {IERC7579Account}.\\n     */\\n    function isModuleInstalled(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    ) external view override returns (bool) {\\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\\n            return _isValidatorInstalled(module);\\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\\n            return _isExecutorInstalled(module);\\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\\n            return\\n                _isFallbackHandlerInstalled(\\n                    abi.decode(additionalContext, (bytes4)),\\n                    module\\n                );\\n        } else if (moduleTypeId == MODULE_TYPE_HOOK) {\\n            return _isHookInstalled(module);\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     *  @dev see {IERC7579Account}.\\n     */\\n    function accountId()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"etherspotwallet.modular.v1.0.0\\\";\\n    }\\n\\n    /**\\n     * @dev see {IERC7579Account}.\\n     */\\n    function supportsExecutionMode(\\n        ModeCode mode\\n    ) external view virtual override returns (bool isSupported) {\\n        (CallType callType, ExecType execType, , ) = mode.decode();\\n        if (callType == CALLTYPE_BATCH) isSupported = true;\\n        else if (callType == CALLTYPE_SINGLE) isSupported = true;\\n        else if (callType == CALLTYPE_DELEGATECALL)\\n            isSupported = true;\\n            // if callType is not single, batch or delegatecall return false\\n        else return false;\\n\\n        if (execType == EXECTYPE_DEFAULT) isSupported = true;\\n        else if (execType == EXECTYPE_TRY)\\n            isSupported = true;\\n            // if execType is not default or try, return false\\n        else return false;\\n    }\\n\\n    /**\\n     *  @dev see {IERC7579Account}.\\n     */\\n    function supportsModule(\\n        uint256 modulTypeId\\n    ) external view virtual override returns (bool) {\\n        if (modulTypeId == MODULE_TYPE_VALIDATOR) return true;\\n        else if (modulTypeId == MODULE_TYPE_EXECUTOR) return true;\\n        else if (modulTypeId == MODULE_TYPE_FALLBACK) return true;\\n        else if (modulTypeId == MODULE_TYPE_HOOK) return true;\\n        else return false;\\n    }\\n\\n    /**\\n     *  @dev see {IERC7579Account}.\\n     */\\n    function initializeAccount(\\n        bytes calldata data\\n    ) public payable virtual onlyProxy {\\n        _initModuleManager();\\n        (address owner, address bootstrap, bytes memory bootstrapCall) = abi\\n            .decode(data, (address, address, bytes));\\n        _addOwner(owner);\\n        (bool success, ) = bootstrap.delegatecall(bootstrapCall);\\n        if (!success) revert AccountInitializationFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x102592be7d447e1efd3073240421e32eb81c2175d427d8c557875f7e30367c60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c80637dcab4ce1161010d578063bf57159b116100a0578063d691c9641161006f578063d691c964146106de578063e9ae5c53146106fe578063ea5f61d014610711578063eac9b20d14610731578063f2dc691d1461075e576101f9565b8063bf57159b14610662578063c3db883814610678578063c7f758a81461068d578063d03c7914146106be576101f9565b8063a1c0d459116100dc578063a1c0d459146105ec578063a526d83b1461060c578063a71763a81461062c578063b0d691fe1461063f576101f9565b80637dcab4ce1461053f578063855713681461055f5780639517e29f1461058d5780639cfd7cff146105a0576101f9565b80632f54bf6e116101855780635c60da1b116101545780635c60da1b146104b85780637065cb48146104ec578063714041561461050c57806372aea6541461052c576101f9565b80632f54bf6e1461045a57806341c9ddff1461047a5780634b6a14191461048f57806354387ad7146104a2576101f9565b80631626ba7e116101c15780631626ba7e146103d8578063173825d91461041157806319822f7c146104315780632dfca44514610444576101f9565b80630a664dba146103325780630c68ba21146103645780630db0262214610394578063112d3a7d146103b8576101f9565b366101f957005b61020e6000356001600160e01b03191661077e565b6000610218610831565b600080356001600160e01b03191681526002919091016020526040902080549091506001600160a01b03811690600160a01b900460f81b8161028057604051632464e76d60e11b81526001600160e01b03196000351660048201526024015b60405180910390fd5b61028e81607f60f91b610855565b156102e25760408051368101909152366000823760408051601481019091523360601b90526000803660140183865afa90506102d03d60408051918201905290565b3d6000823e816102de573d81fd5b3d81f35b6102ed816000610855565b156103305760408051368101909152366000823760408051601481019091523360601b9052600080366014018382875af190506102d03d60408051918201905290565b005b34801561033e57600080fd5b5061034761086c565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561037057600080fd5b5061038461037f366004613627565b610889565b604051901515815260200161035b565b3480156103a057600080fd5b506103aa60005481565b60405190815260200161035b565b3480156103c457600080fd5b506103846103d3366004613685565b6108a7565b3480156103e457600080fd5b506103f86103f33660046136e0565b61090c565b6040516001600160e01b0319909116815260200161035b565b34801561041d57600080fd5b5061033061042c366004613627565b6109e2565b6103aa61043f366004613744565b610aa9565b34801561045057600080fd5b506103aa60025481565b34801561046657600080fd5b50610384610475366004613627565b610b8f565b34801561048657600080fd5b50610330610bad565b61033061049d366004613791565b610d6a565b3480156104ae57600080fd5b506103aa60015481565b3480156104c457600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f857600080fd5b50610330610507366004613627565b610e5e565b34801561051857600080fd5b50610330610527366004613627565b610f1c565b61033061053a3660046137d2565b610fb9565b34801561054b57600080fd5b5061033061055a366004613627565b611099565b34801561056b57600080fd5b5061057f61057a366004613806565b61125e565b60405161035b929190613877565b61033061059b366004613685565b611285565b3480156105ac57600080fd5b50604080518082018252601e81527f657468657273706f7477616c6c65742e6d6f64756c61722e76312e302e3000006020820152905161035b91906138f1565b3480156105f857600080fd5b50610330610607366004613904565b611374565b34801561061857600080fd5b50610330610627366004613627565b6113a9565b61033061063a366004613685565b611467565b34801561064b57600080fd5b506f71727de22e5e9d8baf0edac6f37da032610347565b34801561066e57600080fd5b506103aa60035481565b34801561068457600080fd5b50610330611530565b34801561069957600080fd5b506106ad6106a8366004613904565b611673565b60405161035b95949392919061391d565b3480156106ca57600080fd5b506103846106d9366004613904565b61177d565b6106f16106ec3660046136e0565b61181c565b60405161035b9190613958565b61033061070c3660046136e0565b611e73565b34801561071d57600080fd5b5061057f61072c366004613806565b6122e8565b34801561073d57600080fd5b5061075161074c3660046139d2565b612305565b60405161035b91906139ef565b34801561076a57600080fd5b50610384610779366004613904565b6123dd565b6000610788610831565b6001600160e01b0319831660009081526002919091016020908152604091829020600101805483518184028101840190945280845290918301828280156107f857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107da575b50505050509050610809813361242c565b151560000361082d576040516332cf492b60e11b8152336004820152602401610277565b5050565b7ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea0290565b6001600160f81b0319828116908216145b92915050565b60006108846000805160206140988339815191525490565b905090565b6001600160a01b031660009081526005602052604090205460ff1690565b6000600185036108c1576108ba84612439565b9050610904565b600285036108d2576108ba84612457565b600385036108ef576108ba6108e9838501856139d2565b85612471565b60048503610900576108ba846124af565b5060005b949350505050565b60008061091c6014828587613a6d565b61092591613a97565b60601c905061093381612439565b61095b57604051635c93ff2f60e11b81526001600160a01b0382166004820152602401610277565b6001600160a01b03811663f551e2ee3387610979876014818b613a6d565b6040518563ffffffff1660e01b81526004016109989493929190613af3565b602060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190613b25565b95945050505050565b6109eb33610b8f565b806109f557503330145b610a12576040516311d9f09160e01b815260040160405180910390fd5b610a1b81610b8f565b610a385760405163f1369ccb60e01b815260040160405180910390fd5b600160005411610a5b5760405163021870b960e11b815260040160405180910390fd5b610a64816124e1565b604080513081526001600160a01b03831660208201527fe594d081b4382713733fe631966432c9cea5199afb2db5c3c1931f9f9300367991015b60405180910390a150565b6000336f71727de22e5e9d8baf0edac6f37da03214610adb57604051635629665f60e11b815260040160405180910390fd5b816020850135606081901c90610af082612439565b610aff57600193505050610b75565b604051639700320360e01b81526001600160a01b03831690639700320390610b2d908a908a90600401613b87565b6020604051808303816000875af1158015610b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190613c86565b935050505b8015610b875760003860003884335af1505b509392505050565b6001600160a01b031660009081526004602052604090205460ff1690565b610bb633610889565b610bd357604051636570ecab60e11b815260040160405180910390fd5b600254600081815260066020526040812090829003610c0557604051631dc0650160e31b815260040160405180910390fd5b610c0e82612516565b15610c2c576040516320181a3560e21b815260040160405180910390fd5b610c4e600254600090815260066020526040902054600160a01b900460ff1690565b15610c6c57604051638b19dbcb60e01b815260040160405180910390fd5b60008281526006602090815260408220600180820180549182018155845291832090910180546001600160a01b03191633179055838252600201805491610cb283613cb5565b909155505080546001600160a01b0316610ccb8361258d565b15610cfd576000838152600660205260409020805460ff60a01b1916600160a01b179055610cf8816125c7565b505050565b6000838152600660209081526040918290206002015482513081529182018690526001600160a01b0384169282019290925260608101919091527f7afa94f51443879f537b9be4f09d5d734c2c233b788d2f6af6565add34706bab906080015b60405180910390a1505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610db3576040516308e3edd160e41b815260040160405180910390fd5b610dbb6125f7565b60008080610dcb84860186613d91565b925092509250610dda836125c7565b6000826001600160a01b031682604051610df49190613df2565b600060405180830381855af49150503d8060008114610e2f576040519150601f19603f3d011682016040523d82523d6000602084013e610e34565b606091505b5050905080610e5657604051631b79777760e11b815260040160405180910390fd5b505050505050565b610e6733610b8f565b80610e7157503330145b610e8e576040516311d9f09160e01b815260040160405180910390fd5b6001600160a01b0381161580610ea85750610ea881610889565b80610eb75750610eb781610b8f565b15610ed557604051631a1aefc560e21b815260040160405180910390fd5b610ede816125c7565b604080513081526001600160a01b03831660208201527fc82bdbbf677a2462f2a7e22e4ba9abd209496b69cd7b868b3b1d28f76e09a40a9101610a9e565b610f2533610b8f565b80610f2f57503330145b610f4c576040516311d9f09160e01b815260040160405180910390fd5b610f5581610889565b610f725760405163985f453960e01b815260040160405180910390fd5b610f7b8161261b565b604080513081526001600160a01b03831660208201527fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b9101610a9e565b336f71727de22e5e9d8baf0edac6f37da0321480610fd657503330145b610ff357604051635629665f60e11b815260040160405180910390fd5b3660006110036060840184613e0e565b611011916004908290613a6d565b915091506000306001600160a01b03168383604051611031929190613e54565b600060405180830381855af49150503d806000811461106c576040519150601f19603f3d011682016040523d82523d6000602084013e611071565b606091505b505090508061109357604051632b3f6d1160e21b815260040160405180910390fd5b50505050565b6110a233610889565b6110bf57604051636570ecab60e11b815260040160405180910390fd5b6001600160a01b03811615806110d957506110d981610889565b806110e857506110e881610b8f565b1561110657604051631a1aefc560e21b815260040160405180910390fd5b6003600154101561112a57604051636bb07db960e11b815260040160405180910390fd5b600254600090815260066020526040902060018101541580159061115757508054600160a01b900460ff16155b1561117557604051639fa6dc5760e01b815260040160405180910390fd5b600060025460016111869190613e64565b6000818152600660209081526040822080546001600160a01b0388166001600160a01b03199182161782556001808301805491820181558552928420909201805490921633179091558282526002018054929350906111e483613cb5565b9091555050600081815260066020908152604091829020805460ff60a01b1916815542600390910155600283905581513081529081018390526001600160a01b038516918101919091523360608201527f9fb4a8d051aad8866705f4d52eb05a29939e15ad43dd4aab82cf31806759eac390608001610d5d565b606060008061126b610831565b905061127881868661267c565b92509250505b9250929050565b336f71727de22e5e9d8baf0edac6f37da03214806112a257503330145b6112bf57604051635629665f60e11b815260040160405180910390fd5b600184036112d7576112d2838383612828565b61132c565b600284036112ea576112d28383836128a4565b600384036112fd576112d28383836128bd565b60048403611310576112d2838383612aee565b60405163041c38b360e41b815260048101859052602401610277565b604080518581526001600160a01b03851660208201527fd21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef12391015b60405180910390a150505050565b61137d33610b8f565b8061138757503330145b6113a4576040516311d9f09160e01b815260040160405180910390fd5b600355565b6113b233610b8f565b806113bc57503330145b6113d9576040516311d9f09160e01b815260040160405180910390fd5b6001600160a01b03811615806113f357506113f381610889565b80611402575061140281610b8f565b156114205760405163053bd11560e31b815260040160405180910390fd5b61142981612b51565b604080513081526001600160a01b03831660208201527fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a9101610a9e565b336f71727de22e5e9d8baf0edac6f37da032148061148457503330145b6114a157604051635629665f60e11b815260040160405180910390fd5b600184036114b9576114b4838383612b83565b6114f2565b600284036114cc576114b4838383612c14565b600384036114df576114b4838383612c32565b60048403611310576114b4838383612f0f565b604080518581526001600160a01b03851660208201527f341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e9101611366565b61153933610b8f565b80611548575061154833610889565b8061155257503330145b61156f576040516302d8be6160e21b815260040160405180910390fd5b60025460009081526006602052604081206003549091901561159357600354611598565b620151805b90506115bc600254600090815260066020526040902054600160a01b900460ff1690565b156115da57604051638b19dbcb60e01b815260040160405180910390fd5b60006115e533610889565b90508080156116035750428284600301546116009190613e64565b10155b156116215760405163ae18e9c760e01b815260040160405180910390fd5b825460ff60a01b1916600160a01b17835560025460408051308152602081019290925233908201527faf7f1090397448391393dc134b45d6d20e79a9d2a8f5a82fb42d1514a55ecbf990606001610d5d565b60008060608180851580611688575060025486115b156116a657604051631dc0650160e31b815260040160405180910390fd5b6000868152600660209081526040808320815160a08101835281546001600160a01b0381168252600160a01b900460ff1615158185015260018201805484518187028101870186528181529295939486019383018282801561173157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611713575b5050505050815260200160028201548152602001600382015481525050905080600001518160600151826040015183602001518460800151955095509550955095505091939590929450565b600081600881901b61179382600160f81b610855565b156117a157600192506117e4565b6117ac826000610855565b156117ba57600192506117e4565b6117cc826001600160f81b0319610855565b156117da57600192506117e4565b5060009392505050565b6117ef816000610855565b156117fd5760019250611815565b61180b81600160f81b610855565b156117da57600192505b5050919050565b60606000611828610831565b60010190506118378133612f8b565b61185657604051635c93ff2f60e11b8152336004820152602401610277565b600061186e6000805160206140988339815191525490565b90506001600160a01b038116611b2e5785600881901b61189282600160f81b610855565b1561190157863587016020810190356118ac836000610855565b156118c2576118bb8282612fc5565b96506118fa565b6118d083600160f81b610855565b156118df576118bb828261309d565b826040516308c3ee0360e11b81526004016102779190613e77565b5050611b27565b61190c826000610855565b15611a5a576000803660006119218b8b6131ca565b6040805160018082528183019092529498509296509094509250816020015b606081526020019060019003908161194057905050985060006119638682610855565b15611997576119748585858561321b565b8a60008151811061198757611987613e8c565b6020026020010181905250611a50565b6119a586600160f81b610855565b15611a35576119b685858585613251565b8b6000815181106119c9576119c9613e8c565b6020908102919091010152905080611a30577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb760008b600081518110611a1157611a11613e8c565b6020026020010151604051611a27929190613ea2565b60405180910390a15b611a50565b856040516308c3ee0360e11b81526004016102779190613e77565b5050505050611b27565b611a6c826001600160f81b0319610855565b15611b0c576000611a80601482898b613a6d565b611a8991613a97565b60601c9050366000611a9e896014818d613a6d565b9092509050611aae846000610855565b15611ac457611abe838383613282565b50611b04565b611ad284600160f81b610855565b15611ae957611ae28383836132b6565b5050611b04565b836040516308c3ee0360e11b81526004016102779190613e77565b505050611b27565b81604051632e5bf3f960e21b81526004016102779190613e77565b5050611e6a565b604051631057c74d60e11b81526000906001600160a01b038316906320af8e9a90611b6190339085903690600401613ebb565b6000604051808303816000875af1158015611b80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ba89190810190613ee0565b905086600881901b611bbe82600160f81b610855565b15611c125787358801602081019035611bd8836000610855565b15611bee57611be78282612fc5565b9750611c0b565b611bfc83600160f81b610855565b156118df57611be7828261309d565b5050611dda565b611c1d826000610855565b15611d4b57600080366000611c328c8c6131ca565b6040805160018082528183019092529498509296509094509250816020015b6060815260200190600190039081611c515790505099506000611c748682610855565b15611ca857611c858585858561321b565b8b600081518110611c9857611c98613e8c565b6020026020010181905250611d41565b611cb686600160f81b610855565b15611a3557611cc785858585613251565b8c600081518110611cda57611cda613e8c565b6020908102919091010152905080611d41577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb760008c600081518110611d2257611d22613e8c565b6020026020010151604051611d38929190613ea2565b60405180910390a15b5050505050611dda565b611d5d826001600160f81b0319610855565b15611b0c576000611d716014828a8c613a6d565b611d7a91613a97565b60601c9050366000611d8f8a6014818e613a6d565b9092509050611d9f846000610855565b15611db557611daf838383613282565b50611dd6565b611dc384600160f81b610855565b15611ae957611dd38383836132b6565b50505b5050505b5050604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da90611e089084906004016138f1565b6020604051808303816000875af1158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190613f4d565b611e685760405163546b3e6360e01b815260040160405180910390fd5b505b50509392505050565b336f71727de22e5e9d8baf0edac6f37da0321480611e9057503330145b611ead57604051635629665f60e11b815260040160405180910390fd5b6000611ec56000805160206140988339815191525490565b90506001600160a01b0381166120695783600881901b611ee982600160f81b610855565b15611f3c5784358501602081019035611f03836000610855565b15611f1857611f128282612fc5565b50611f35565b611f2683600160f81b610855565b156118df57611f12828261309d565b5050612062565b611f47826000610855565b15611fd357600080366000611f5c89896131ca565b9350935093509350611f7285600060f81b610855565b15611f8957611f838484848461321b565b50611fca565b611f9785600160f81b610855565b15611faf57611fa884848484613251565b5050611fca565b846040516308c3ee0360e11b81526004016102779190613e77565b50505050612062565b611fe5826001600160f81b0319610855565b15611b0c576000611ff96014828789613a6d565b61200291613a97565b60601c9050366000612017876014818b613a6d565b9092509050612027846000610855565b1561203d57612037838383613282565b5061205e565b61204b84600160f81b610855565b15611ae95761205b8383836132b6565b50505b5050505b5050611093565b604051631057c74d60e11b81526000906001600160a01b038316906320af8e9a9061209c90339085903690600401613ebb565b6000604051808303816000875af11580156120bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120e39190810190613ee0565b905084600881901b6120f982600160f81b610855565b1561214c5785358601602081019035612113836000610855565b15612128576121228282612fc5565b50612145565b61213683600160f81b610855565b156118df57612122828261309d565b5050612253565b612157826000610855565b156121c45760008036600061216c8a8a6131ca565b935093509350935061218285600060f81b610855565b15612199576121938484848461321b565b506121bb565b6121a785600160f81b610855565b15611faf576121b884848484613251565b50505b50505050612253565b6121d6826001600160f81b0319610855565b15611b0c5760006121ea601482888a613a6d565b6121f391613a97565b60601c9050366000612208886014818c613a6d565b9092509050612218846000610855565b1561222e57612228838383613282565b5061224f565b61223c84600160f81b610855565b15611ae95761224c8383836132b6565b50505b5050505b5050604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da906122819084906004016138f1565b6020604051808303816000875af11580156122a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c49190613f4d565b6122e15760405163546b3e6360e01b815260040160405180910390fd5b5050505050565b60606000806122f5610831565b600101905061127881868661267c565b60408051606080820183526000808352602083015291810191909152612329610831565b6001600160e01b0319831660009081526002919091016020908152604091829020825160608101845281546001600160a01b0381168252600160a01b900460f81b6001600160f81b03191681840152600182018054855181860281018601875281815292959394938601938301828280156123cd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116123af575b5050505050815250509050919050565b6000600182036123ef57506001919050565b600282036123ff57506001919050565b6003820361240f57506001919050565b6004820361241f57506001919050565b506000919050565b919050565b6000806109d984846132e5565b600080612444610831565b90506124508184612f8b565b9392505050565b600080612462610831565b60010190506124508184612f8b565b60008061247c610831565b6001600160e01b0319949094166000908152600290940160205250506040909120546001600160a01b0390811691161490565b6000816001600160a01b03166124d16000805160206140988339815191525490565b6001600160a01b03161492915050565b6001600160a01b0381166000908152600460205260408120805460ff191690558054908061250e83613f6f565b919050555050565b6000805b60008381526006602052604090206001015481101561258457600083815260066020526040902060010180543391908390811061255957612559613e8c565b6000918252602090912001546001600160a01b03160361257c5750600192915050565b60010161251a565b50600092915050565b6001546000828152600660205260408120600201549091610258916125b5906103e890613f86565b6125bf9190613f9d565b101592915050565b6001600160a01b0381166000908152600460205260408120805460ff191660011790558054908061250e83613cb5565b6000612601610831565b905061260f8160010161334b565b6126188161334b565b50565b6001600160a01b0381166000908152600560205260408120805460ff19169055600180549161264983613f6f565b9190505550612670600254600090815260066020526040902054600160a01b900460ff1690565b61261857612618611530565b606060006001600160a01b0384166001148015906126a1575061269f8585612f8b565b155b156126ca57604051637c84ecfb60e01b81526001600160a01b0385166004820152602401610277565b826000036126eb5760405163f725081760e01b815260040160405180910390fd5b826001600160401b0381111561270357612703613cce565b60405190808252806020026020018201604052801561272c578160200160208202803683370190505b506001600160a01b03808616600090815260208890526040812054929450911691505b6001600160a01b0382161580159061277157506001600160a01b038216600114155b801561277c57508381105b156127d6578183828151811061279457612794613e8c565b6001600160a01b0392831660209182029290920181019190915292811660009081529287905260409092205490911690806127ce81613cb5565b91505061274f565b6001600160a01b0382166001148015906127f05750600081115b1561281c5782612801600183613fbf565b8151811061281157612811613e8c565b602002602001015191505b80835250935093915050565b6000612832610831565b905061283e81856133a8565b6040516306d61fe760e41b81526001600160a01b03851690636d61fe709061286c9086908690600401613fd2565b600060405180830381600087803b15801561288657600080fd5b505af115801561289a573d6000803e3d6000fd5b5050505050505050565b60006128ae610831565b600101905061283e81856133a8565b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051818a01356020818102601f01601f19168301909352969750893596918a018035965090945060609350915b8181101561293f57602081028381016060013590860152600101612920565b50506040810135602081830103356060818152818385016020830137935061297592508591506001600160f81b03199050610855565b1561299357604051633accf26360e11b815260040160405180910390fd5b61299c8461347e565b156129e95760405162461bcd60e51b815260206004820152601e60248201527f46756e6374696f6e2073656c6563746f7220616c7265616479207573656400006044820152606401610277565b604080516060810182526001600160a01b038a1681526001600160f81b031985166020820152908101839052612a1d610831565b6001600160e01b0319861660009081526002919091016020908152604091829020835181548584015160f81c600160a01b026001600160a81b03199091166001600160a01b0390921691909117178155918301518051612a83926001850192019061358d565b50506040516306d61fe760e41b81526001600160a01b038a169150636d61fe7090612ab29084906004016138f1565b600060405180830381600087803b158015612acc57600080fd5b505af1158015612ae0573d6000803e3d6000fd5b505050505050505050505050565b6000612b066000805160206140988339815191525490565b90506001600160a01b03811615612b3b5760405163741cbe0360e01b81526001600160a01b0382166004820152602401610277565b61283e8460008051602061409883398151915255565b6001600160a01b0381166000908152600560205260408120805460ff1916600190811790915580549161264983613cb5565b6000612b8d610831565b9050600080612b9e84860186613fe6565b9092509050612bae8383886134b8565b604051638a91b0e360e01b81526001600160a01b03871690638a91b0e390612bda9084906004016138f1565b600060405180830381600087803b158015612bf457600080fd5b505af1158015612c08573d6000803e3d6000fd5b50505050505050505050565b6000612c1e610831565b6001019050600080612b9e84860186613fe6565b6000612c416004828486613a6d565b612c4a91614035565b90506000612c5b8360048187613a6d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929350612c9e925084915061347e9050565b612cea5760405162461bcd60e51b815260206004820152601a60248201527f46756e6374696f6e2073656c6563746f72206e6f7420757365640000000000006044820152606401610277565b6000612cf4610831565b6001600160e01b0319841660009081526002919091016020908152604091829020825160608101845281546001600160a01b0381168252600160a01b900460f81b6001600160f81b0319168184015260018201805485518186028101860187528181529295939493860193830182828015612d9857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612d7a575b5050505050815250509050856001600160a01b031681600001516001600160a01b031614612e1b5760405162461bcd60e51b815260206004820152602a60248201527f46756e6374696f6e2073656c6563746f72206e6f74207573656420627920746860448201526934b9903430b7323632b960b11b6064820152608401610277565b6020810151612e32816001600160f81b0319610855565b15612e5057604051633accf26360e11b815260040160405180910390fd5b60408051600080825260808201835260208201818152928201526060810181905290612e7a610831565b6001600160e01b0319871660009081526002919091016020908152604091829020835181548584015160f81c600160a01b026001600160a81b03199091166001600160a01b0390921691909117178155918301518051612ee0926001850192019061358d565b5050604051638a91b0e360e01b81526001600160a01b038a169150638a91b0e390612ab29087906004016138f1565b612f26600060008051602061409883398151915255565b604051638a91b0e360e01b81526001600160a01b03841690638a91b0e390612f549085908590600401613fd2565b600060405180830381600087803b158015612f6e57600080fd5b505af1158015612f82573d6000803e3d6000fd5b50505050505050565b600060016001600160a01b038316148015906124505750506001600160a01b03908116600090815260209290925260409091205416151590565b606081806001600160401b03811115612fe057612fe0613cce565b60405190808252806020026020018201604052801561301357816020015b6060815260200190600190039081612ffe5790505b50915060005b81811015613095573685858381811061303457613034613e8c565b90506020028101906130469190614063565b905061306f6130586020830183613627565b602083013561306a6040850185613e0e565b61321b565b84838151811061308157613081613e8c565b602090810291909101015250600101613019565b505092915050565b606081806001600160401b038111156130b8576130b8613cce565b6040519080825280602002602001820160405280156130eb57816020015b60608152602001906001900390816130d65790505b50915060005b81811015613095573685858381811061310c5761310c613e8c565b905060200281019061311e9190614063565b905060006131496131326020840184613627565b60208401356131446040860186613e0e565b613251565b86858151811061315b5761315b613e8c565b60209081029190910101529050806131c0577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb7838685815181106131a1576131a1613e8c565b60200260200101516040516131b7929190613ea2565b60405180910390a15b50506001016130f1565b60008036816131dc6014828789613a6d565b6131e591613a97565b60601c93506131f8603460148789613a6d565b61320191614079565b92506132108560348189613a6d565b949793965094505050565b60405181838237600038838387895af1613238573d6000823e3d81fd5b3d8152602081013d6000823e3d01604052949350505050565b604051600090828482376000388483888a5af191503d8152602081013d6000823e3d81016040525094509492505050565b604051818382376000388383875af461329e573d6000823e3d81fd5b3d8152602081013d6000823e3d016040529392505050565b604051600090828482376000388483885af491503d8152602081013d6000823e3d810160405250935093915050565b81516000908190815b8181101561333d57846001600160a01b031686828151811061331257613312613e8c565b60200260200101516001600160a01b0316036133355792506001915061127e9050565b6001016132ee565b506000958695509350505050565b60016000908152602082905260409020546001600160a01b031615613383576040516329e42f3360e11b815260040160405180910390fd5b60016000818152602092909252604090912080546001600160a01b0319169091179055565b6001600160a01b03811615806133c757506001600160a01b0381166001145b156133f057604051637c84ecfb60e01b81526001600160a01b0382166004820152602401610277565b6001600160a01b03818116600090815260208490526040902054161561343457604051631034f46960e21b81526001600160a01b0382166004820152602401610277565b60016000818152602093909352604080842080546001600160a01b039485168087529286208054959091166001600160a01b03199586161790559190935280549091169091179055565b600080613489610831565b6001600160e01b03199093166000908152600293909301602052505060409020546001600160a01b0316151590565b6001600160a01b03811615806134d757506001600160a01b0381166001145b1561350057604051637c84ecfb60e01b81526001600160a01b0383166004820152602401610277565b6001600160a01b0382811660009081526020859052604090205481169082161461354857604051637c84ecfb60e01b81526001600160a01b0382166004820152602401610277565b6001600160a01b0390811660008181526020949094526040808520805494841686529085208054949093166001600160a01b0319948516179092559092528154169055565b8280548282559060005260206000209081019282156135e2579160200282015b828111156135e257825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906135ad565b506135ee9291506135f2565b5090565b5b808211156135ee57600081556001016135f3565b6001600160a01b038116811461261857600080fd5b803561242781613607565b60006020828403121561363957600080fd5b813561245081613607565b60008083601f84011261365657600080fd5b5081356001600160401b0381111561366d57600080fd5b60208301915083602082850101111561127e57600080fd5b6000806000806060858703121561369b57600080fd5b8435935060208501356136ad81613607565b925060408501356001600160401b038111156136c857600080fd5b6136d487828801613644565b95989497509550505050565b6000806000604084860312156136f557600080fd5b8335925060208401356001600160401b0381111561371257600080fd5b61371e86828701613644565b9497909650939450505050565b6000610120828403121561373e57600080fd5b50919050565b60008060006060848603121561375957600080fd5b83356001600160401b0381111561376f57600080fd5b61377b8682870161372b565b9660208601359650604090950135949350505050565b600080602083850312156137a457600080fd5b82356001600160401b038111156137ba57600080fd5b6137c685828601613644565b90969095509350505050565b6000602082840312156137e457600080fd5b81356001600160401b038111156137fa57600080fd5b6109048482850161372b565b6000806040838503121561381957600080fd5b823561382481613607565b946020939093013593505050565b60008151808452602080850194506020840160005b8381101561386c5781516001600160a01b031687529582019590820190600101613847565b509495945050505050565b60408152600061388a6040830185613832565b905060018060a01b03831660208301529392505050565b60005b838110156138bc5781810151838201526020016138a4565b50506000910152565b600081518084526138dd8160208601602086016138a1565b601f01601f19169290920160200192915050565b60208152600061245060208301846138c5565b60006020828403121561391657600080fd5b5035919050565b60018060a01b038616815284602082015260a06040820152600061394460a0830186613832565b931515606083015250608001529392505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156139af57603f1988860301845261399d8583516138c5565b94509285019290850190600101613981565b5092979650505050505050565b6001600160e01b03198116811461261857600080fd5b6000602082840312156139e457600080fd5b8135612450816139bc565b602080825282516001600160a01b0390811683830152838201516001600160f81b031916604080850191909152840151606080850152805160808501819052600093929183019190849060a08701905b80831015613a6157845184168252938501936001929092019190850190613a3f565b50979650505050505050565b60008085851115613a7d57600080fd5b83861115613a8a57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156130955760149490940360031b84901b1690921692915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000613b1b606083018486613aca565b9695505050505050565b600060208284031215613b3757600080fd5b8151612450816139bc565b6000808335601e19843603018112613b5957600080fd5b83016020810192503590506001600160401b03811115613b7857600080fd5b80360382131561127e57600080fd5b60408152613ba860408201613b9b8561361c565b6001600160a01b03169052565b602083013560608201526000613bc16040850185613b42565b610120806080860152613bd961016086018385613aca565b9250613be86060880188613b42565b9250603f19808786030160a0880152613c02858584613aca565b9450608089013560c088015260a089013560e0880152610100935060c089013584880152613c3360e08a018a613b42565b9250818887030184890152613c49868483613aca565b955050613c58848a018a613b42565b9450925080878603016101408801525050613c74838383613aca565b93505050508260208301529392505050565b600060208284031215613c9857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201613cc757613cc7613c9f565b5060010190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613d0c57613d0c613cce565b604052919050565b60006001600160401b03821115613d2d57613d2d613cce565b50601f01601f191660200190565b600082601f830112613d4c57600080fd5b8135613d5f613d5a82613d14565b613ce4565b818152846020838601011115613d7457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215613da657600080fd5b8335613db181613607565b92506020840135613dc181613607565b915060408401356001600160401b03811115613ddc57600080fd5b613de886828701613d3b565b9150509250925092565b60008251613e048184602087016138a1565b9190910192915050565b6000808335601e19843603018112613e2557600080fd5b8301803591506001600160401b03821115613e3f57600080fd5b60200191503681900382131561127e57600080fd5b8183823760009101908152919050565b8082018082111561086657610866613c9f565b6001600160f81b031991909116815260200190565b634e487b7160e01b600052603260045260246000fd5b82815260406020820152600061090460408301846138c5565b6001600160a01b03841681526040602082018190526000906109d99083018486613aca565b600060208284031215613ef257600080fd5b81516001600160401b03811115613f0857600080fd5b8201601f81018413613f1957600080fd5b8051613f27613d5a82613d14565b818152856020838501011115613f3c57600080fd5b6109d98260208301602086016138a1565b600060208284031215613f5f57600080fd5b8151801515811461245057600080fd5b600081613f7e57613f7e613c9f565b506000190190565b808202811582820484141761086657610866613c9f565b600082613fba57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561086657610866613c9f565b602081526000610904602083018486613aca565b60008060408385031215613ff957600080fd5b823561400481613607565b915060208301356001600160401b0381111561401f57600080fd5b61402b85828601613d3b565b9150509250929050565b6001600160e01b031981358181169160048510156130955760049490940360031b84901b1690921692915050565b60008235605e19833603018112613e0457600080fd5b8035602083101561086657600019602084900360031b1b169291505056fe36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb28431608a26469706673582212204ed810819e647f95a7c6fe5f2e6cd135b2c09e8e50f907384304dd77b61e586264736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountId()": {
        "details": "see {IERC7579Account}."
      },
      "addGuardian(address)": {
        "details": "Only owner or wallet.",
        "params": {
          "_newGuardian": "address of new guardian to add to wallet."
        }
      },
      "addOwner(address)": {
        "details": "Only owner or wallet.",
        "params": {
          "_newOwner": "address of new owner to add."
        }
      },
      "changeProposalTimelock(uint256)": {
        "details": "Only owner or wallet.",
        "params": {
          "_newTimelock": "new timelock in seconds."
        }
      },
      "discardCurrentProposal()": {
        "details": "Only owner or guardian or wallet. Must be after the proposal timelock is met."
      },
      "execute(bytes32,bytes)": {
        "details": "see {IERC7579Account}.this function is only callable by the entry point or the account itselfthis function demonstrates how to implement CallType SINGLE and BATCH and ExecType DEFAULT and TRYthis function demonstrates how to implement hook support (modifier)"
      },
      "executeFromExecutor(bytes32,bytes)": {
        "details": "see {IERC7579Account}.this function is only callable by an installed executor modulethis function demonstrates how to implement CallType SINGLE and BATCH and ExecType DEFAULT and TRYthis function demonstrates how to implement hook support (modifier)"
      },
      "executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": {
        "details": "see {IERC7579Account}."
      },
      "getProposal(uint256)": {
        "params": {
          "_proposalId": "proposal id to return data for."
        },
        "returns": {
          "approvalCount_": "number of guardians that have approved the proposal.",
          "guardiansApproved_": "array of guardian addresses that have approved proposal.",
          "ownerProposed_": "the new owner proposed.",
          "proposedAt_": "timestamp of when proposal was initiated.",
          "resolved_": "bool is the proposal resolved."
        }
      },
      "guardianCosign()": {
        "details": "Only guardian. Must meet minimum threshold of 60% of total guardians to add new owner."
      },
      "guardianPropose(address)": {
        "details": "Only guardian.",
        "params": {
          "_newOwner": "the proposed new owner for the wallet."
        }
      },
      "initializeAccount(bytes)": {
        "details": "see {IERC7579Account}."
      },
      "installModule(uint256,address,bytes)": {
        "details": "see {IERC7579Account}."
      },
      "isGuardian(address)": {
        "params": {
          "_address": "address to check if guardian of wallet."
        },
        "returns": {
          "_0": "bool."
        }
      },
      "isModuleInstalled(uint256,address,bytes)": {
        "details": "see {IERC7579Account}."
      },
      "isOwner(address)": {
        "params": {
          "_address": "address to check if owner of wallet."
        },
        "returns": {
          "_0": "bool."
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "ERC-1271 isValidSignature         This function is intended to be used to validate a smart account signature and may forward the call to a validator module",
        "params": {
          "data": "The data that is signed",
          "hash": "The hash of the data that is signed"
        }
      },
      "removeGuardian(address)": {
        "details": "Only owner or wallet.",
        "params": {
          "_guardian": "address of existing guardian to remove."
        }
      },
      "removeOwner(address)": {
        "details": "Only owner or wallet.",
        "params": {
          "_owner": "address of wallet owner to remove ."
        }
      },
      "supportsExecutionMode(bytes32)": {
        "details": "see {IERC7579Account}."
      },
      "supportsModule(uint256)": {
        "details": "see {IERC7579Account}."
      },
      "uninstallModule(uint256,address,bytes)": {
        "details": "see {IERC7579Account}."
      },
      "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)": {
        "details": "see {IERC7579Account}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OnlyOwnerOrSelf()": [
        {
          "notice": "AccessController"
        }
      ]
    },
    "events": {
      "OwnerAdded(address,address)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "addGuardian(address)": {
        "notice": "Add guardian for the wallet."
      },
      "addOwner(address)": {
        "notice": "Add owner to the wallet."
      },
      "changeProposalTimelock(uint256)": {
        "notice": "Change the timelock on proposals. The minimum time (secs) that a proposal is allowed to be discarded."
      },
      "discardCurrentProposal()": {
        "notice": "Discards the current proposal."
      },
      "getExecutorsPaginated(address,uint256)": {
        "notice": "THIS IS NOT PART OF THE STANDARD Helper Function to access linked list"
      },
      "getProposal(uint256)": {
        "notice": "Returns new owner proposal data."
      },
      "getValidatorPaginated(address,uint256)": {
        "notice": "THIS IS NOT PART OF THE STANDARD Helper Function to access linked list"
      },
      "guardianCosign()": {
        "notice": "Cosigns a new owner proposal."
      },
      "guardianPropose(address)": {
        "notice": "Creates a new owner proposal (adds new owner to wallet)."
      },
      "isGuardian(address)": {
        "notice": "Checks if _address is guardian of wallet."
      },
      "isOwner(address)": {
        "notice": "Checks if _address is owner of wallet."
      },
      "removeGuardian(address)": {
        "notice": "Remove guardian from the wallet."
      },
      "removeOwner(address)": {
        "notice": "Remove owner from wallet."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2376,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "ownerCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2378,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "guardianCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2380,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "proposalId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2382,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "proposalTimelock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2387,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2391,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "_guardians",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2396,
        "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
        "label": "_proposals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(NewOwnerProposal)5698_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(NewOwnerProposal)5698_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAccessController.NewOwnerProposal)",
        "numberOfBytes": "32",
        "value": "t_struct(NewOwnerProposal)5698_storage"
      },
      "t_struct(NewOwnerProposal)5698_storage": {
        "encoding": "inplace",
        "label": "struct IAccessController.NewOwnerProposal",
        "members": [
          {
            "astId": 5688,
            "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
            "label": "newOwnerProposed",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5690,
            "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
            "label": "resolved",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5693,
            "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
            "label": "guardiansApproved",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5695,
            "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
            "label": "approvalCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5697,
            "contract": "src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol:ModularEtherspotWallet",
            "label": "proposedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}