{
  "address": "0xbF3bB56D80bAA76d67d1FbDeA92377db5B586CF1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_entryPoint",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_tokenOracle",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_nativeAssetOracle",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_stalenessThreshold",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_priceMarkupLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_priceMarkup",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_refundPostOpCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundPostOpCostWithGuarantor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OracleDecimalsInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OraclePriceNotPositive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OraclePriceStale",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymasterDataLengthInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymasterDataModeInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceMarkupTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceMarkupTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenLimitZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "priceMarkup",
          "type": "uint32"
        }
      ],
      "name": "MarkupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guarantor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paidByGuarantor",
          "type": "bool"
        }
      ],
      "name": "UserOperationSponsored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "uint48",
          "name": "validUntil",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "validAfter",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "tokenLimit",
          "type": "uint256"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeAssetOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IPaymaster.PostOpMode",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualUserOpFeePerGas",
          "type": "uint256"
        }
      ],
      "name": "postOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceMarkup",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceMarkupLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundPostOpCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundPostOpCostWithGuarantor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalenessThreshold",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_priceMarkup",
          "type": "uint32"
        }
      ],
      "name": "updateMarkup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxCost",
          "type": "uint256"
        }
      ],
      "name": "validatePaymasterUserOp",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5bd9de57c95b04ba5faa82b4b3e9159ce987bfcf06f3eb09717b4132b58e1fb",
  "receipt": {
    "to": null,
    "from": "0x09FD4F6088f2025427AB1e89257A44747081Ed59",
    "contractAddress": "0xbF3bB56D80bAA76d67d1FbDeA92377db5B586CF1",
    "transactionIndex": 0,
    "gasUsed": "2406995",
    "logsBloom": "0x
    "blockHash": "0x92bb6c3fb780580f9147bcd10386b7dc0020e979f8eedffe552b135b88789233",
    "transactionHash": "0xc5bd9de57c95b04ba5faa82b4b3e9159ce987bfcf06f3eb09717b4132b58e1fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 65895234,
        "transactionHash": "0xc5bd9de57c95b04ba5faa82b4b3e9159ce987bfcf06f3eb09717b4132b58e1fb",
        "address": "0xbF3bB56D80bAA76d67d1FbDeA92377db5B586CF1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000009fd4f6088f2025427ab1e89257a44747081ed59"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x92bb6c3fb780580f9147bcd10386b7dc0020e979f8eedffe552b135b88789233"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 65895234,
        "transactionHash": "0xc5bd9de57c95b04ba5faa82b4b3e9159ce987bfcf06f3eb09717b4132b58e1fb",
        "address": "0xbF3bB56D80bAA76d67d1FbDeA92377db5B586CF1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000009fd4f6088f2025427ab1e89257a44747081ed59",
          "0x00000000000000000000000009fd4f6088f2025427ab1e89257a44747081ed59"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x92bb6c3fb780580f9147bcd10386b7dc0020e979f8eedffe552b135b88789233"
      }
    ],
    "blockNumber": 65895234,
    "cumulativeGasUsed": "2406995",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x453478E2E0c846c069e544405d5877086960BEf2",
    "0x0000000071727De22E5E9d8BAf0edAc6f37da032",
    "0x1310F6cB60D99fb2bB6AdEB4F5449156D2dcb8eD",
    "0x5881E0238Ace27e32110Bd6EabC53d5f7Ee78829",
    259200000,
    "0x09FD4F6088f2025427AB1e89257A44747081Ed59",
    10000000,
    1000000,
    30000,
    50000
  ],
  "numDeployments": 4,
  "solcInputHash": "3ec0cc918b844fce95962525e7088d46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_tokenOracle\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_nativeAssetOracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_stalenessThreshold\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_priceMarkupLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_priceMarkup\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_refundPostOpCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundPostOpCostWithGuarantor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OracleDecimalsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OraclePriceNotPositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OraclePriceStale\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymasterDataLengthInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymasterDataModeInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMarkupTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMarkupTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenLimitZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"priceMarkup\",\"type\":\"uint32\"}],\"name\":\"MarkupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paidByGuarantor\",\"type\":\"bool\"}],\"name\":\"UserOperationSponsored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeAssetOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUserOpFeePerGas\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceMarkup\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceMarkupLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundPostOpCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundPostOpCostWithGuarantor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalenessThreshold\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_priceMarkup\",\"type\":\"uint32\"}],\"name\":\"updateMarkup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pimlico (https://github.com/pimlicolabs/erc20-paymaster/blob/main/src/ERC20PaymasterV06.sol)Using Solady (https://github.com/vectorized/solady)\",\"custom:security-contact\":\"security@pimlico.io\",\"details\":\"Inherits from BaseERC20Paymaster.\",\"errors\":{\"OracleDecimalsInvalid()\":[{\"details\":\"The oracle decimals are not set to 8.\"}],\"OraclePriceNotPositive()\":[{\"details\":\"The oracle price is less than or equal to zero.\"}],\"OraclePriceStale()\":[{\"details\":\"The oracle price is stale.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"PaymasterDataLengthInvalid()\":[{\"details\":\"The paymaster data length is invalid for the selected mode.\"}],\"PaymasterDataModeInvalid()\":[{\"details\":\"The paymaster data mode is invalid. The mode should be 0, 1, 2, or 3.\"}],\"PriceMarkupTooHigh()\":[{\"details\":\"The price markup selected is higher than the price markup limit.\"}],\"PriceMarkupTooLow()\":[{\"details\":\"The price markup selected is lower than break-even.\"}],\"TokenAmountTooHigh()\":[{\"details\":\"The token amount is higher than the limit set.\"}],\"TokenLimitZero()\":[{\"details\":\"The token limit is set to zero in a paymaster mode that uses a limit.\"}]},\"events\":{\"MarkupUpdated(uint32)\":{\"details\":\"Emitted when the price markup is updated.\"},\"UserOperationSponsored(bytes32,address,address,uint256,uint256,bool)\":{\"details\":\"Emitted when a user operation is sponsored by the paymaster.\"}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- The unstake delay for this paymaster. Can only be increased.\"}},\"getHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),uint48,uint48,uint256)\":{\"params\":{\"tokenLimit\":\"The maximum amount of tokens allowed for the user operation. 0 if no limit.\",\"userOp\":\"The user operation data.\",\"validAfter\":\"The timestamp after which the user operation is valid.\",\"validUntil\":\"The timestamp until which the user operation is valid.\"}},\"getPrice()\":{\"returns\":{\"_0\":\"price The latest token price fetched from the oracles.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256,uint256)\":{\"params\":{\"actualGasCost\":\"- Actual gas used so far (without this postOp call).\",\"actualUserOpFeePerGas\":\"- the gas price this UserOp pays. This value is based on the UserOp's maxFeePerGas                        and maxPriorityFee (and basefee)                        It is not the same as tx.gasprice, which is what the bundler pays.\",\"context\":\"- The context value returned by validatePaymasterUserOp\",\"mode\":\"- Enum with the following options:                        opSucceeded - User operation succeeded.                        opReverted  - User op reverted. The paymaster still has to pay for gas.                        postOpReverted - never passed in a call to postOp().\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMarkup(uint32)\":{\"params\":{\"_priceMarkup\":\"The new price markup percentage (1e6 = 100%).\"}},\"validatePaymasterUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"- The maximum cost of this transaction (based on maximum gas and gas price from userOp).\",\"userOp\":\"- The user operation.\",\"userOpHash\":\"- Hash of the user's request data.\"},\"returns\":{\"context\":\"       - Value to send to a postOp. Zero length to signify postOp is not required.\",\"validationData\":\"- Signature and time-range of this operation, encoded the same as the return                          value of validateUserOperation.                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                                    other values are invalid for paymaster.                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"                          <6-byte> validAfter - first timestamp this operation is valid                          Note that the validation code cannot use block.timestamp (or block.number) directly.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"- The address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"- Amount to withdraw.\",\"withdrawAddress\":\"- Target to send to.\"}},\"withdrawToken(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"to\":\"The address to transfer the tokens to.\"}}},\"title\":\"ERC20PaymasterV07\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"Add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"deposit()\":{\"notice\":\"Add a deposit for this paymaster, used for paying for transaction fees.\"},\"getDeposit()\":{\"notice\":\"Return current paymaster's deposit on the entryPoint.\"},\"getHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),uint48,uint48,uint256)\":{\"notice\":\"Hashes the user operation data.\"},\"getPrice()\":{\"notice\":\"Fetches the latest token price.\"},\"postOp(uint8,bytes,uint256,uint256)\":{\"notice\":\"Post-operation handler. Must verify sender is the entryPoint.\"},\"unlockStake()\":{\"notice\":\"Unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"updateMarkup(uint32)\":{\"notice\":\"Updates the price markup.\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted). The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"},\"withdrawStake(address)\":{\"notice\":\"Withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"Withdraw value from the deposit.\"},\"withdrawToken(address,uint256)\":{\"notice\":\"Allows the contract owner to withdraw a specified amount of tokens from the contract.\"}},\"notice\":\"An ERC-4337 Paymaster contract which is able to sponsor gas fees in exchange for ERC-20 tokens. The contract refunds excess tokens. It also allows updating price configuration and withdrawing tokens by the contract owner. The contract uses oracles to fetch the latest token prices. The paymaster supports standard and up-rebasing ERC-20 tokens. It does not support down-rebasing and fee-on-transfer tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/modular-etherspot-wallet/ERC20PaymasterEP07/ERC20PaymasterV07.sol\":\"ERC20Paymaster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n\\n /*\\n  * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\\n  * must return this value in case of signature failure, instead of revert.\\n  */\\nuint256 constant SIG_VALIDATION_FAILED = 1;\\n\\n\\n/*\\n * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\\n * return this value on success.\\n */\\nuint256 constant SIG_VALIDATION_SUCCESS = 0;\\n\\n\\n/**\\n * Returned data from validateUserOp.\\n * validateUserOp returns a uint256, which is created by `_packedValidationData` and\\n * parsed by `_parseValidationData`.\\n * @param aggregator  - address(0) - The account validated the signature by itself.\\n *                      address(1) - The account failed to validate the signature.\\n *                      otherwise - This is an address of a signature aggregator that must\\n *                                  be used to validate the signature.\\n * @param validAfter  - This UserOp is valid only after this timestamp.\\n * @param validaUntil - This UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n    address aggregator;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n}\\n\\n/**\\n * Extract sigFailed, validAfter, validUntil.\\n * Also convert zero validUntil to type(uint48).max.\\n * @param validationData - The packed validation data.\\n */\\nfunction _parseValidationData(\\n    uint256 validationData\\n) pure returns (ValidationData memory data) {\\n    address aggregator = address(uint160(validationData));\\n    uint48 validUntil = uint48(validationData >> 160);\\n    if (validUntil == 0) {\\n        validUntil = type(uint48).max;\\n    }\\n    uint48 validAfter = uint48(validationData >> (48 + 160));\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * Helper to pack the return value for validateUserOp.\\n * @param data - The ValidationData to pack.\\n */\\nfunction _packValidationData(\\n    ValidationData memory data\\n) pure returns (uint256) {\\n    return\\n        uint160(data.aggregator) |\\n        (uint256(data.validUntil) << 160) |\\n        (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * Helper to pack the return value for validateUserOp, when not using an aggregator.\\n * @param sigFailed  - True for signature failure, false for success.\\n * @param validUntil - Last timestamp this UserOperation is valid (or zero for infinite).\\n * @param validAfter - First timestamp this UserOperation is valid.\\n */\\nfunction _packValidationData(\\n    bool sigFailed,\\n    uint48 validUntil,\\n    uint48 validAfter\\n) pure returns (uint256) {\\n    return\\n        (sigFailed ? 1 : 0) |\\n        (uint256(validUntil) << 160) |\\n        (uint256(validAfter) << (160 + 48));\\n}\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly (\\\"memory-safe\\\") {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\\n/**\\n * The minimum of two numbers.\\n * @param a - First number.\\n * @param b - Second number.\\n */\\n    function min(uint256 a, uint256 b) pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\",\"keccak256\":\"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/core/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\",\"keccak256\":\"0x20c1d0f620acbfc8e56ccfb5f7f7c3f25bcc37d00d8380dffabb7b706adb58d6\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/core/UserOperationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport \\\"../interfaces/PackedUserOperation.sol\\\";\\nimport {calldataKeccak, min} from \\\"./Helpers.sol\\\";\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    uint256 public constant PAYMASTER_VALIDATION_GAS_OFFSET = 20;\\n    uint256 public constant PAYMASTER_POSTOP_GAS_OFFSET = 36;\\n    uint256 public constant PAYMASTER_DATA_OFFSET = 52;\\n    /**\\n     * Get sender from user operation data.\\n     * @param userOp - The user operation data.\\n     */\\n    function getSender(\\n        PackedUserOperation calldata userOp\\n    ) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {\\n            data := calldataload(userOp)\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /**\\n     * Relayer/block builder might submit the TX with higher priorityFee,\\n     * but the user should not pay above what he signed for.\\n     * @param userOp - The user operation data.\\n     */\\n    function gasPrice(\\n        PackedUserOperation calldata userOp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            (uint256 maxPriorityFeePerGas, uint256 maxFeePerGas) = unpackUints(userOp.gasFees);\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    /**\\n     * Pack the user operation data into bytes for hashing.\\n     * @param userOp - The user operation data.\\n     */\\n    function encode(\\n        PackedUserOperation calldata userOp\\n    ) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        bytes32 accountGasLimits = userOp.accountGasLimits;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        bytes32 gasFees = userOp.gasFees;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            accountGasLimits, preVerificationGas, gasFees,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function unpackUints(\\n        bytes32 packed\\n    ) internal pure returns (uint256 high128, uint256 low128) {\\n        return (uint128(bytes16(packed)), uint128(uint256(packed)));\\n    }\\n\\n    //unpack just the high 128-bits from a packed value\\n    function unpackHigh128(bytes32 packed) internal pure returns (uint256) {\\n        return uint256(packed) >> 128;\\n    }\\n\\n    // unpack just the low 128-bits from a packed value\\n    function unpackLow128(bytes32 packed) internal pure returns (uint256) {\\n        return uint128(uint256(packed));\\n    }\\n\\n    function unpackMaxPriorityFeePerGas(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackHigh128(userOp.gasFees);\\n    }\\n\\n    function unpackMaxFeePerGas(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackLow128(userOp.gasFees);\\n    }\\n\\n    function unpackVerificationGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackHigh128(userOp.accountGasLimits);\\n    }\\n\\n    function unpackCallGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return unpackLow128(userOp.accountGasLimits);\\n    }\\n\\n    function unpackPaymasterVerificationGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return uint128(bytes16(userOp.paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET : PAYMASTER_POSTOP_GAS_OFFSET]));\\n    }\\n\\n    function unpackPostOpGasLimit(PackedUserOperation calldata userOp)\\n    internal pure returns (uint256) {\\n        return uint128(bytes16(userOp.paymasterAndData[PAYMASTER_POSTOP_GAS_OFFSET : PAYMASTER_DATA_OFFSET]));\\n    }\\n\\n    function unpackPaymasterStaticFields(\\n        bytes calldata paymasterAndData\\n    ) internal pure returns (address paymaster, uint256 validationGasLimit, uint256 postOpGasLimit) {\\n        return (\\n            address(bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])),\\n            uint128(bytes16(paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET : PAYMASTER_POSTOP_GAS_OFFSET])),\\n            uint128(bytes16(paymasterAndData[PAYMASTER_POSTOP_GAS_OFFSET : PAYMASTER_DATA_OFFSET]))\\n        );\\n    }\\n\\n    /**\\n     * Hash the user operation data.\\n     * @param userOp - The user operation data.\\n     */\\n    function hash(\\n        PackedUserOperation calldata userOp\\n    ) internal pure returns (bytes32) {\\n        return keccak256(encode(userOp));\\n    }\\n}\\n\",\"keccak256\":\"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n    /**\\n     * Validate aggregated signature.\\n     * Revert if the aggregated signature does not match the given list of operations.\\n     * @param userOps   - Array of UserOperations to validate the signature for.\\n     * @param signature - The aggregated signature.\\n     */\\n    function validateSignatures(\\n        PackedUserOperation[] calldata userOps,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * Validate signature of a single userOp.\\n     * This method should be called by bundler after EntryPointSimulation.simulateValidation() returns\\n     * the aggregator this account uses.\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp        - The userOperation received from the user.\\n     * @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\\n     *                        (usually empty, unless account and aggregator support some kind of \\\"multisig\\\".\\n     */\\n    function validateUserOpSignature(\\n        PackedUserOperation calldata userOp\\n    ) external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * Aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation.\\n     * @param userOps              - Array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature - The aggregated signature.\\n     */\\n    function aggregateSignatures(\\n        PackedUserOperation[] calldata userOps\\n    ) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n    /***\\n     * An event emitted after each successful request.\\n     * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\\n     * @param sender        - The account that generates this request.\\n     * @param paymaster     - If non-null, the paymaster that pays for this request.\\n     * @param nonce         - The nonce value from the request.\\n     * @param success       - True if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\\n     *                        validation and execution).\\n     */\\n    event UserOperationEvent(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 nonce,\\n        bool success,\\n        uint256 actualGasCost,\\n        uint256 actualGasUsed\\n    );\\n\\n    /**\\n     * Account \\\"sender\\\" was deployed.\\n     * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender     - The account that is deployed\\n     * @param factory    - The factory used to deploy this account (in the initCode)\\n     * @param paymaster  - The paymaster used by this UserOp\\n     */\\n    event AccountDeployed(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address factory,\\n        address paymaster\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length.\\n     * @param userOpHash   - The request unique identifier.\\n     * @param sender       - The sender of this request.\\n     * @param nonce        - The nonce used in the request.\\n     * @param revertReason - The return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation Paymaster's \\\"postOp\\\" call reverted with non-zero length.\\n     * @param userOpHash   - The request unique identifier.\\n     * @param sender       - The sender of this request.\\n     * @param nonce        - The nonce used in the request.\\n     * @param revertReason - The return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event PostOpRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\\n     * @param userOpHash   - The request unique identifier.\\n     * @param sender       - The sender of this request.\\n     * @param nonce        - The nonce used in the request.\\n     */\\n    event UserOperationPrefundTooLow(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce\\n    );\\n\\n    /**\\n     * An event emitted by handleOps(), before starting the execution loop.\\n     * Any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * Signature aggregator used by the following UserOperationEvents within this bundle.\\n     * @param aggregator - The aggregator used for the following UserOperationEvents.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * A custom revert error of handleOps, to identify the offending op.\\n     * Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\\n     * @param reason  - Revert reason. The string starts with a unique code \\\"AAmn\\\",\\n     *                  where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *                  so a failure can be attributed to the correct entity.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * A custom revert error of handleOps, to report a revert by account or paymaster.\\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\\n     * @param reason  - Revert reason. see FailedOp(uint256,string), above\\n     * @param inner   - data from inner cought revert reason\\n     * @dev note that inner is truncated to 2048 bytes\\n     */\\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\\n\\n    error PostOpReverted(bytes returnData);\\n\\n    /**\\n     * Error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     * @param aggregator The aggregator that failed to verify the signature\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    // Return value of getSenderAddress.\\n    error SenderAddressResult(address sender);\\n\\n    // UserOps handled, per aggregator.\\n    struct UserOpsPerAggregator {\\n        PackedUserOperation[] userOps;\\n        // Aggregator address\\n        IAggregator aggregator;\\n        // Aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperations.\\n     * No signature aggregator is used.\\n     * If any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops         - The operations to execute.\\n     * @param beneficiary - The address to receive the fees.\\n     */\\n    function handleOps(\\n        PackedUserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\\n     * @param beneficiary      - The address to receive the fees.\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Generate a request Id - unique identifier for this request.\\n     * The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     * @param userOp - The user operation to generate the request ID for.\\n     * @return hash the hash of this UserOperation\\n     */\\n    function getUserOpHash(\\n        PackedUserOperation calldata userOp\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Gas and return values during simulation.\\n     * @param preOpGas         - The gas used for validation (including preValidationGas)\\n     * @param prefund          - The required prefund for this operation\\n     * @param accountValidationData   - returned validationData from account.\\n     * @param paymasterValidationData - return validationData from paymaster.\\n     * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        uint256 accountValidationData;\\n        uint256 paymasterValidationData;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * Returned aggregated signature info:\\n     * The aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * This method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode - The constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n    error DelegateAndRevert(bool success, bytes ret);\\n\\n    /**\\n     * Helper method for dry-run testing.\\n     * @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\\n     *  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\\n     *  actual EntryPoint code is less convenient.\\n     * @param target a target contract to make a delegatecall from entrypoint\\n     * @param data data to pass to target in a delegatecall\\n     */\\n    function delegateAndRevert(address target, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.5;\\n\\n/**\\n * Manage deposits and stakes.\\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\\n * Stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n    event Deposited(address indexed account, uint256 totalDeposit);\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    // Emitted when stake or unstake delay are modified.\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    // Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit         - The entity's deposit.\\n     * @param staked          - True if this entity is staked.\\n     * @param stake           - Actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec - Minimum delay to withdraw the stake.\\n     * @param withdrawTime    - First block timestamp where 'withdrawStake' will be callable, or zero if already locked.\\n     * @dev Sizes were chosen so that deposit fits into one cell (used during handleOp)\\n     *      and the rest fit into a 2nd cell (used during stake/unstake)\\n     *      - 112 bit allows for 10^15 eth\\n     *      - 48 bit for full timestamp\\n     *      - 32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint256 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    // API struct used by getStakeInfo and simulateValidation.\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /**\\n     * Get deposit info.\\n     * @param account - The account to query.\\n     * @return info   - Full deposit information of given account.\\n     */\\n    function getDepositInfo(\\n        address account\\n    ) external view returns (DepositInfo memory info);\\n\\n    /**\\n     * Get account balance.\\n     * @param account - The account to query.\\n     * @return        - The deposit (for gas payment) of the account.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * Add to the deposit of the given account.\\n     * @param account - The account to add to.\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * Add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec - The new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * Attempt to unlock the stake.\\n     * The value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * Withdraw from the (unlocked) stake.\\n     * Must first call unlockStake and wait for the unstakeDelay to pass.\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * Withdraw from the deposit.\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     * @param withdrawAmount  - The amount to withdraw.\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 withdrawAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04\",\"license\":\"GPL-3.0-only\"},\"account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/**\\n * User Operation struct\\n * @param sender                - The sender account of this request.\\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\\n * @param initCode              - If set, the account contract will be created by this constructor/\\n * @param callData              - The method call to execute on this account.\\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\\n *                                Covers batch overhead.\\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\\n *                                The paymaster will pay for the transaction instead of the sender.\\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct PackedUserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    bytes32 accountGasLimits;\\n    uint256 preVerificationGas;\\n    bytes32 gasFees;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\"},\"src/modular-etherspot-wallet/ERC20PaymasterEP07/ERC20PaymasterV07.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IEntryPoint} from \\\"../../../account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\nimport {_packValidationData} from \\\"../../../account-abstraction/contracts/core/Helpers.sol\\\";\\nimport {UserOperationLib} from \\\"../../../account-abstraction/contracts/core/UserOperationLib.sol\\\";\\nimport {PackedUserOperation} from \\\"../../../account-abstraction/contracts/interfaces/PackedUserOperation.sol\\\";\\n\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport {IOracle} from \\\"./interfaces/oracles/IOracle.sol\\\";\\nimport {SafeTransferLib} from \\\"./utils/SafeTransferLib.sol\\\";\\nimport {BaseERC20Paymaster} from \\\"./base/BaseERC20Paymaster.sol\\\";\\nimport {IPaymaster} from \\\"./interfaces/paymasters/IPaymasterV07.sol\\\";\\n\\nusing UserOperationLib for PackedUserOperation;\\n\\n/// @title ERC20PaymasterV07\\n/// @author Pimlico (https://github.com/pimlicolabs/erc20-paymaster/blob/main/src/ERC20PaymasterV06.sol)\\n/// @author Using Solady (https://github.com/vectorized/solady)\\n/// @notice An ERC-4337 Paymaster contract which is able to sponsor gas fees in exchange for ERC-20 tokens.\\n/// The contract refunds excess tokens. It also allows updating price configuration and withdrawing tokens by the contract owner.\\n/// The contract uses oracles to fetch the latest token prices.\\n/// The paymaster supports standard and up-rebasing ERC-20 tokens. It does not support down-rebasing and fee-on-transfer tokens.\\n/// @dev Inherits from BaseERC20Paymaster.\\n/// @custom:security-contact security@pimlico.io\\ncontract ERC20Paymaster is BaseERC20Paymaster, IPaymaster {\\n    constructor(\\n        IERC20Metadata _token,\\n        address _entryPoint,\\n        IOracle _tokenOracle,\\n        IOracle _nativeAssetOracle,\\n        uint32 _stalenessThreshold,\\n        address _owner,\\n        uint32 _priceMarkupLimit,\\n        uint32 _priceMarkup,\\n        uint256 _refundPostOpCost,\\n        uint256 _refundPostOpCostWithGuarantor\\n    ) BaseERC20Paymaster(\\n        _token,\\n        _entryPoint,\\n        _tokenOracle,\\n        _nativeAssetOracle,\\n        _stalenessThreshold,\\n        _owner,\\n        _priceMarkupLimit,\\n        _priceMarkup,\\n        _refundPostOpCost,\\n        _refundPostOpCostWithGuarantor\\n    ) {}\\n\\n    /// @inheritdoc IPaymaster\\n    function validatePaymasterUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 maxCost\\n    ) external override returns (bytes memory context, uint256 validationData) {\\n        _requireFromEntryPoint();\\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\\n    }\\n\\n    /// @inheritdoc IPaymaster\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost,\\n        uint256 actualUserOpFeePerGas\\n    ) external override {\\n        _requireFromEntryPoint();\\n        _postOp(mode, context, actualGasCost, actualUserOpFeePerGas);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                ERC-4337 PAYMASTER FUNCTIONS                */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /**\\n     * Validate a user operation.\\n     * @param userOp     - The user operation.\\n     * @param userOpHash - The hash of the user operation.\\n     * @param maxCost    - The maximum cost of the user operation.\\n     */\\n    function _validatePaymasterUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n        internal\\n        returns (bytes memory context, uint256 validationResult)\\n    {\\n        (uint8 mode, bytes calldata paymasterConfig) = _parsePaymasterAndData(userOp.paymasterAndData);\\n\\n        // valid modes are 0, 1, 2, 3\\n        if (mode >= 4) {\\n            revert PaymasterDataModeInvalid();\\n        }\\n\\n        uint192 tokenPrice = getPrice();\\n        uint256 tokenAmount;\\n        {\\n            uint256 maxFeePerGas = UserOperationLib.unpackMaxFeePerGas(userOp);\\n            if (mode == 0 || mode == 1) {\\n                tokenAmount = (maxCost + (refundPostOpCost) * maxFeePerGas) * priceMarkup * tokenPrice\\n                    / (1e18 * PRICE_DENOMINATOR);\\n            } else {\\n                tokenAmount = (maxCost + (refundPostOpCostWithGuarantor) * maxFeePerGas) * priceMarkup * tokenPrice\\n                    / (1e18 * PRICE_DENOMINATOR);\\n            }\\n        }\\n\\n        if (mode == 0) {\\n            SafeTransferLib.safeTransferFrom(address(token), userOp.sender, address(this), tokenAmount);\\n            context = abi.encodePacked(tokenAmount, tokenPrice, userOp.sender, userOpHash);\\n            validationResult = 0;\\n        } else if (mode == 1) {\\n            if (paymasterConfig.length != 32) {\\n                revert PaymasterDataLengthInvalid();\\n            }\\n            if (uint256(bytes32(paymasterConfig[0:32])) == 0) {\\n                revert TokenLimitZero();\\n            }\\n            if (tokenAmount > uint256(bytes32(paymasterConfig[0:32]))) {\\n                revert TokenAmountTooHigh();\\n            }\\n            SafeTransferLib.safeTransferFrom(address(token), userOp.sender, address(this), tokenAmount);\\n            context = abi.encodePacked(tokenAmount, tokenPrice, userOp.sender, userOpHash);\\n            validationResult = 0;\\n        } else if (mode == 2) {\\n            if (paymasterConfig.length < 32) {\\n                revert PaymasterDataLengthInvalid();\\n            }\\n\\n            address guarantor = address(bytes20(paymasterConfig[0:20]));\\n\\n            bool signatureValid = SignatureChecker.isValidSignatureNow(\\n                guarantor,\\n                getHash(userOp, uint48(bytes6(paymasterConfig[20:26])), uint48(bytes6(paymasterConfig[26:32])), 0),\\n                paymasterConfig[32:]\\n            );\\n\\n            SafeTransferLib.safeTransferFrom(address(token), guarantor, address(this), tokenAmount);\\n            context = abi.encodePacked(tokenAmount, tokenPrice, userOp.sender, userOpHash, guarantor);\\n            validationResult = _packValidationData(\\n                !signatureValid, uint48(bytes6(paymasterConfig[20:26])), uint48(bytes6(paymasterConfig[26:32]))\\n            );\\n        } else {\\n            if (paymasterConfig.length < 64) {\\n                revert PaymasterDataLengthInvalid();\\n            }\\n\\n            address guarantor = address(bytes20(paymasterConfig[32:52]));\\n\\n            if (uint256(bytes32(paymasterConfig[0:32])) == 0) {\\n                revert TokenLimitZero();\\n            }\\n            if (tokenAmount > uint256(bytes32(paymasterConfig[0:32]))) {\\n                revert TokenAmountTooHigh();\\n            }\\n\\n            bool signatureValid = SignatureChecker.isValidSignatureNow(\\n                guarantor,\\n                getHash(\\n                    userOp,\\n                    uint48(bytes6(paymasterConfig[52:58])),\\n                    uint48(bytes6(paymasterConfig[58:64])),\\n                    uint256(bytes32(paymasterConfig[0:32]))\\n                ),\\n                paymasterConfig[64:]\\n            );\\n\\n            SafeTransferLib.safeTransferFrom(address(token), guarantor, address(this), tokenAmount);\\n            context = abi.encodePacked(tokenAmount, tokenPrice, userOp.sender, userOpHash, guarantor);\\n            validationResult = _packValidationData(\\n                !signatureValid, uint48(bytes6(paymasterConfig[52:58])), uint48(bytes6(paymasterConfig[58:64]))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Post-operation handler.\\n     * (verified to be called only through the entryPoint)\\n     * @dev If subclass returns a non-empty context from validatePaymasterUserOp,\\n     *      it must also implement this method.\\n     * @param context       - The context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - Actual gas used so far (without this postOp call).\\n     * @param actualUserOpFeePerGas - the gas price this UserOp pays. This value is based on the UserOp's maxFeePerGas\\n     *                        and maxPriorityFee (and basefee)\\n     *                        It is not the same as tx.gasprice, which is what the bundler pays.\\n     */\\n    function _postOp(PostOpMode, bytes calldata context, uint256 actualGasCost, uint256 actualUserOpFeePerGas)\\n        internal\\n    {\\n        uint256 prefundTokenAmount = uint256(bytes32(context[0:32]));\\n        uint192 tokenPrice = uint192(bytes24(context[32:56]));\\n        address sender = address(bytes20(context[56:76]));\\n        bytes32 userOpHash = bytes32(context[76:108]);\\n\\n        if (context.length == 128) {\\n            // A guarantor is used\\n            uint256 actualTokenNeeded = (actualGasCost + refundPostOpCostWithGuarantor * actualUserOpFeePerGas)\\n                * priceMarkup * tokenPrice / (1e18 * PRICE_DENOMINATOR);\\n            address guarantor = address(bytes20(context[108:128]));\\n\\n            bool success = SafeTransferLib.trySafeTransferFrom(address(token), sender, address(this), actualTokenNeeded);\\n            if (success) {\\n                // If the token transfer is successful, transfer the held tokens back to the guarantor\\n                SafeTransferLib.safeTransfer(address(token), guarantor, prefundTokenAmount);\\n                emit UserOperationSponsored(userOpHash, sender, guarantor, actualTokenNeeded, tokenPrice, false);\\n            } else {\\n                // If the token transfer fails, the guarantor is deemed responsible for the token payment\\n                SafeTransferLib.safeTransfer(address(token), guarantor, prefundTokenAmount - actualTokenNeeded);\\n                emit UserOperationSponsored(userOpHash, sender, guarantor, actualTokenNeeded, tokenPrice, true);\\n            }\\n        } else {\\n            uint256 actualTokenNeeded = (actualGasCost + refundPostOpCost * actualUserOpFeePerGas) * priceMarkup\\n                * tokenPrice / (1e18 * PRICE_DENOMINATOR);\\n\\n            SafeTransferLib.safeTransfer(address(token), sender, prefundTokenAmount - actualTokenNeeded);\\n            emit UserOperationSponsored(userOpHash, sender, address(0), actualTokenNeeded, tokenPrice, false);\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PUBLIC HELPERS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @notice Hashes the user operation data.\\n    /// @param userOp The user operation data.\\n    /// @param validUntil The timestamp until which the user operation is valid.\\n    /// @param validAfter The timestamp after which the user operation is valid.\\n    /// @param tokenLimit The maximum amount of tokens allowed for the user operation. 0 if no limit.\\n    function getHash(PackedUserOperation calldata userOp, uint48 validUntil, uint48 validAfter, uint256 tokenLimit)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        address sender = userOp.getSender();\\n        return keccak256(\\n            abi.encode(\\n                sender,\\n                userOp.nonce,\\n                keccak256(userOp.initCode),\\n                keccak256(userOp.callData),\\n                userOp.accountGasLimits,\\n                uint256(bytes32(userOp.paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET:PAYMASTER_DATA_OFFSET])),\\n                userOp.preVerificationGas,\\n                userOp.gasFees,\\n                block.chainid,\\n                address(this),\\n                validUntil,\\n                validAfter,\\n                tokenLimit\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb82a92697fbc55da89e72d65de769373d139d7b200f2a5b85d4515d253ba5901\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/ERC20PaymasterEP07/base/BaseERC20Paymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\nimport \\\"./BasePaymaster.sol\\\";\\n\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"./../utils/SafeTransferLib.sol\\\";\\nimport {IOracle} from \\\"./../interfaces/oracles/IOracle.sol\\\";\\n\\nabstract contract BaseERC20Paymaster is BasePaymaster {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The paymaster data mode is invalid. The mode should be 0, 1, 2, or 3.\\n    error PaymasterDataModeInvalid();\\n\\n    /// @dev The paymaster data length is invalid for the selected mode.\\n    error PaymasterDataLengthInvalid();\\n\\n    /// @dev The token amount is higher than the limit set.\\n    error TokenAmountTooHigh();\\n\\n    /// @dev The token limit is set to zero in a paymaster mode that uses a limit.\\n    error TokenLimitZero();\\n\\n    /// @dev The price markup selected is higher than the price markup limit.\\n    error PriceMarkupTooHigh();\\n\\n    /// @dev The price markup selected is lower than break-even.\\n    error PriceMarkupTooLow();\\n\\n    /// @dev The oracle price is stale.\\n    error OraclePriceStale();\\n\\n    /// @dev The oracle price is less than or equal to zero.\\n    error OraclePriceNotPositive();\\n\\n    /// @dev The oracle decimals are not set to 8.\\n    error OracleDecimalsInvalid();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ENUMS                            */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n    enum PaymasterType {\\n        V06,\\n        V07\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when the price markup is updated.\\n    event MarkupUpdated(uint32 priceMarkup);\\n\\n    /// @dev Emitted when a user operation is sponsored by the paymaster.\\n    event UserOperationSponsored(\\n        bytes32 indexed userOpHash,\\n        address indexed user,\\n        address indexed guarantor,\\n        uint256 tokenAmountPaid,\\n        uint256 tokenPrice,\\n        bool paidByGuarantor\\n    );\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  CONSTANTS AND IMMUTABLES                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The precision used for token price calculations.\\n    uint256 public constant PRICE_DENOMINATOR = 1e6;\\n\\n    /// @dev The estimated gas cost for refunding tokens after the transaction is completed.\\n    uint256 public immutable refundPostOpCost;\\n\\n    /// @dev The estimated gas cost for refunding tokens after the transaction is completed with a guarantor.\\n    uint256 public immutable refundPostOpCostWithGuarantor;\\n\\n    /// @dev The ERC20 token used for transaction fee payments.\\n    IERC20 public immutable token;\\n\\n    /// @dev The number of decimals used by the ERC20 token.\\n    uint256 public immutable tokenDecimals;\\n\\n    /// @dev The oracle contract used to fetch the latest ERC20 to USD token prices.\\n    IOracle public immutable tokenOracle;\\n\\n    /// @dev The Oracle contract used to fetch the latest native asset (e.g. ETH) to USD prices.\\n    IOracle public immutable nativeAssetOracle;\\n\\n    // @dev The amount of time in seconds after which an oracle result should be considered stale.\\n    uint32 public immutable stalenessThreshold;\\n\\n    /// @dev The maximum price markup percentage allowed (1e6 = 100%).\\n    uint32 public immutable priceMarkupLimit;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The price markup percentage applied to the token price (1e6 = 100%).\\n    uint32 public priceMarkup;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CONSTRUCTOR                         */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @notice Initializes the ERC20Paymaster contract with the given parameters.\\n    /// @param _token The ERC20 token used for transaction fee payments.\\n    /// @param _entryPoint The ERC-4337 EntryPoint contract.\\n    /// @param _tokenOracle The oracle contract used to fetch the latest token prices.\\n    /// @param _nativeAssetOracle The oracle contract used to fetch the latest native asset (ETH, Matic, Avax, etc.) prices.\\n    /// @param _owner The address that will be set as the owner of the contract.\\n    /// @param _priceMarkupLimit The maximum price markup percentage allowed (1e6 = 100%).\\n    /// @param _priceMarkup The initial price markup percentage applied to the token price (1e6 = 100%).\\n    /// @param _refundPostOpCost The estimated gas cost for refunding tokens after the transaction is completed.\\n    /// @param _refundPostOpCostWithGuarantor The estimated gas cost for refunding tokens after the transaction is completed with a guarantor.\\n    constructor(\\n        IERC20Metadata _token,\\n        address _entryPoint,\\n        IOracle _tokenOracle,\\n        IOracle _nativeAssetOracle,\\n        uint32 _stalenessThreshold,\\n        address _owner,\\n        uint32 _priceMarkupLimit,\\n        uint32 _priceMarkup,\\n        uint256 _refundPostOpCost,\\n        uint256 _refundPostOpCostWithGuarantor\\n    ) BasePaymaster(_entryPoint) {\\n        token = _token;\\n        tokenOracle = _tokenOracle; // oracle for token -> usd\\n        nativeAssetOracle = _nativeAssetOracle; // oracle for native asset(eth/matic/avax..) -> usd\\n        stalenessThreshold = _stalenessThreshold;\\n        priceMarkupLimit = _priceMarkupLimit;\\n        priceMarkup = _priceMarkup;\\n        refundPostOpCost = _refundPostOpCost;\\n        refundPostOpCostWithGuarantor = _refundPostOpCostWithGuarantor;\\n        transferOwnership(_owner);\\n        tokenDecimals = 10 ** _token.decimals();\\n        if (_priceMarkup < 1e6) {\\n            revert PriceMarkupTooLow();\\n        }\\n        if (_priceMarkup > _priceMarkupLimit) {\\n            revert PriceMarkupTooHigh();\\n        }\\n        if (_tokenOracle.decimals() != 8 || _nativeAssetOracle.decimals() != 8) {\\n            revert OracleDecimalsInvalid();\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ADMIN FUNCTIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @notice Updates the price markup.\\n    /// @param _priceMarkup The new price markup percentage (1e6 = 100%).\\n    function updateMarkup(uint32 _priceMarkup) external onlyOwner {\\n        if (_priceMarkup < 1e6) {\\n            revert PriceMarkupTooLow();\\n        }\\n        if (_priceMarkup > priceMarkupLimit) {\\n            revert PriceMarkupTooHigh();\\n        }\\n        priceMarkup = _priceMarkup;\\n        emit MarkupUpdated(_priceMarkup);\\n    }\\n\\n    /// @notice Allows the contract owner to withdraw a specified amount of tokens from the contract.\\n    /// @param to The address to transfer the tokens to.\\n    /// @param amount The amount of tokens to transfer.\\n    function withdrawToken(address to, uint256 amount) external onlyOwner {\\n        SafeTransferLib.safeTransfer(address(token), to, amount);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PUBLIC HELPERS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @notice Fetches the latest token price.\\n    /// @return price The latest token price fetched from the oracles.\\n    function getPrice() public view returns (uint192) {\\n        uint192 tokenPrice = _fetchPrice(tokenOracle);\\n        uint192 nativeAssetPrice = _fetchPrice(nativeAssetOracle);\\n        uint192 price = nativeAssetPrice * uint192(tokenDecimals) / tokenPrice;\\n\\n        return price;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      INTERNAL HELPERS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @notice Parses the paymasterAndData field of the user operation and returns the paymaster mode and data.\\n    /// @param _paymasterAndData The paymasterAndData field of the user operation.\\n    /// @return mode The paymaster mode.\\n    /// @return paymasterConfig The paymaster configuration data.\\n    function _parsePaymasterAndData(bytes calldata _paymasterAndData) internal pure returns (uint8, bytes calldata) {\\n        if (_paymasterAndData.length < 53) {\\n            return (0, msg.data[0:0]);\\n        }\\n        return (uint8(_paymasterAndData[52]), _paymasterAndData[53:]);\\n    }\\n\\n    /// @notice Fetches the latest price from the given oracle.\\n    /// @dev This function is used to get the latest price from the tokenOracle or nativeAssetOracle.\\n    /// @param _oracle The oracle contract to fetch the price from.\\n    /// @return price The latest price fetched from the oracle.\\n    function _fetchPrice(IOracle _oracle) internal view returns (uint192 price) {\\n        (, int256 answer,, uint256 updatedAt,) = _oracle.latestRoundData();\\n        if (answer <= 0) {\\n            revert OraclePriceNotPositive();\\n        }\\n        if (updatedAt < block.timestamp - stalenessThreshold) {\\n            revert OraclePriceStale();\\n        }\\n        price = uint192(int192(answer));\\n    }\\n}\",\"keccak256\":\"0xd60105b9f0e92b8c81b59cd2568f156bd5bc0bdc5879b860188a911bd610e8ac\",\"license\":\"GPL-3.0\"},\"src/modular-etherspot-wallet/ERC20PaymasterEP07/base/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.23;\\n\\n/* solhint-disable reason-string */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"../../../../account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\nimport {\\n    UserOperationLib as UserOperationLibV07,\\n    PackedUserOperation\\n} from \\\"../../../../account-abstraction/contracts/core/UserOperationLib.sol\\\";\\n\\nimport {\\n    UserOperationLib as UserOperationLibV06,\\n    UserOperation\\n} from \\\"../../../../account-abstraction/contracts/core/UserOperation.sol\\\";\\n\\n/**\\n * Helper class for creating a paymaster.\\n * provides helper methods for staking.\\n * Validates that the postOp is called only by the entryPoint.\\n */\\nabstract contract BasePaymaster is Ownable {\\n    IEntryPoint public immutable entryPoint;\\n\\n    uint256 internal constant PAYMASTER_VALIDATION_GAS_OFFSET = UserOperationLibV07.PAYMASTER_VALIDATION_GAS_OFFSET;\\n    uint256 internal constant PAYMASTER_POSTOP_GAS_OFFSET = UserOperationLibV07.PAYMASTER_POSTOP_GAS_OFFSET;\\n    uint256 internal constant PAYMASTER_DATA_OFFSET = UserOperationLibV07.PAYMASTER_DATA_OFFSET;\\n\\n    constructor(\\n        address _entryPoint\\n    ) Ownable(msg.sender) {\\n        entryPoint = IEntryPoint(_entryPoint);\\n    }\\n\\n    /**\\n     * Add a deposit for this paymaster, used for paying for transaction fees.\\n     */\\n    function deposit() public payable {\\n        entryPoint.depositTo{value: msg.value}(address(this));\\n    }\\n\\n    /**\\n     * Withdraw value from the deposit.\\n     * @param withdrawAddress - Target to send to.\\n     * @param amount          - Amount to withdraw.\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 amount\\n    ) public onlyOwner {\\n        entryPoint.withdrawTo(withdrawAddress, amount);\\n    }\\n\\n    /**\\n     * Add stake for this paymaster.\\n     * This method can also carry eth value to add to the current stake.\\n     * @param unstakeDelaySec - The unstake delay for this paymaster. Can only be increased.\\n     */\\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\\n        entryPoint.addStake{value: msg.value}(unstakeDelaySec);\\n    }\\n\\n    /**\\n     * Return current paymaster's deposit on the entryPoint.\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * Unlock the stake, in order to withdraw it.\\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\\n     */\\n    function unlockStake() external onlyOwner {\\n        entryPoint.unlockStake();\\n    }\\n\\n    /**\\n     * Withdraw the entire paymaster's stake.\\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\\n     * @param withdrawAddress - The address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\\n        entryPoint.withdrawStake(withdrawAddress);\\n    }\\n\\n    /**\\n     * Validate the call is made from a valid entrypoint\\n     */\\n    function _requireFromEntryPoint() internal virtual {\\n        require(msg.sender == address(entryPoint), \\\"Sender not EntryPoint\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xacab8b1e589bd248e57c92694951ef5a85ede4998df4fab8e909de131a24ae0a\",\"license\":\"GPL-3.0\"},\"src/modular-etherspot-wallet/ERC20PaymasterEP07/interfaces/oracles/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IOracle {\\n    function decimals() external view returns (uint8);\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xf25c92642c5c71ee7c32d84ddc99be5c5f3095c52701afc4aeabf6cc6c5fb611\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/ERC20PaymasterEP07/interfaces/paymasters/IPaymasterV07.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport {\\n    UserOperationLib as UserOperationLibV07,\\n    PackedUserOperation\\n} from \\\"../../../../../account-abstraction/contracts/core/UserOperationLib.sol\\\";\\n\\n\\n/**\\n * The interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * A paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n    enum PostOpMode {\\n        // User op succeeded.\\n        opSucceeded,\\n        // User op reverted. Still has to pay for gas.\\n        opReverted,\\n        // Only used internally in the EntryPoint (cleanup after postOp reverts). Never calling paymaster with this value\\n        postOpReverted\\n    }\\n\\n    /**\\n     * Payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted).\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp          - The user operation.\\n     * @param userOpHash      - Hash of the user's request data.\\n     * @param maxCost         - The maximum cost of this transaction (based on maximum gas and gas price from userOp).\\n     * @return context        - Value to send to a postOp. Zero length to signify postOp is not required.\\n     * @return validationData - Signature and time-range of this operation, encoded the same as the return\\n     *                          value of validateUserOperation.\\n     *                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *                                                    other values are invalid for paymaster.\\n     *                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *                          <6-byte> validAfter - first timestamp this operation is valid\\n     *                          Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 maxCost\\n    ) external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * Post-operation handler.\\n     * Must verify sender is the entryPoint.\\n     * @param mode          - Enum with the following options:\\n     *                        opSucceeded - User operation succeeded.\\n     *                        opReverted  - User op reverted. The paymaster still has to pay for gas.\\n     *                        postOpReverted - never passed in a call to postOp().\\n     * @param context       - The context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - Actual gas used so far (without this postOp call).\\n     * @param actualUserOpFeePerGas - the gas price this UserOp pays. This value is based on the UserOp's maxFeePerGas\\n     *                        and maxPriorityFee (and basefee)\\n     *                        It is not the same as tx.gasprice, which is what the bundler pays.\\n     */\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost,\\n        uint256 actualUserOpFeePerGas\\n    ) external;\\n}\\n\",\"keccak256\":\"0x263a30d1c26d8b6a89918d07a7a5dc09e62ddfc2786ae8da081ef7a5346c5c49\",\"license\":\"GPL-3.0\"},\"src/modular-etherspot-wallet/ERC20PaymasterEP07/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Permit2 operations from (https://github.com/Uniswap/permit2/blob/main/src/libraries/Permit2Lib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n///   responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /// @dev The Permit2 operation has failed.\\n    error Permit2Failed();\\n\\n    /// @dev The Permit2 amount must be less than `2**160 - 1`.\\n    error Permit2AmountOverflow();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\\n    bytes32 internal constant DAI_DOMAIN_SEPARATOR = 0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\\n\\n    /// @dev The address for the WETH9 contract on Ethereum mainnet.\\n    address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /// @dev The canonical Permit2 address.\\n    /// [Github](https://github.com/Uniswap/permit2)\\n    /// [Etherscan](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)\\n    address internal constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\\n    //\\n    // The regular variants:\\n    // - Forwards all remaining gas to the target.\\n    // - Reverts if the target reverts.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The force variants:\\n    // - Forwards with an optional gas stipend\\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\\n    // - If the target reverts, or if the gas stipend is exhausted,\\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The try variants:\\n    // - Forwards with a mandatory gas stipend.\\n    // - Instead of reverting, returns whether the transfer succeeded.\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`.\\n    function safeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer all the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // forgefmt: disable-next-item\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function trySafeTransferAllETH(address to, uint256 gasStipend) internal returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    ///\\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\\n    function trySafeTransferFrom(address token, address from, address to, uint256 amount)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n            success :=\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x14, to) // Store the `to` argument.\\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\\n    /// Reverts upon failure.\\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, retrying upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\\n                mstore(0x34, amount) // Store back the original `amount`.\\n                // Retry the approval, reverting upon failure.\\n                if iszero(\\n                    and(\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            amount :=\\n                mul( // The arguments of `mul` are evaluated from right to left.\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// If the initial attempt fails, try to use Permit2 to transfer the token.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\\n    function safeTransferFrom2(address token, address from, address to, uint256 amount) internal {\\n        if (!trySafeTransferFrom(token, from, to, amount)) {\\n            permit2TransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to` via Permit2.\\n    /// Reverts upon failure.\\n    function permit2TransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 0x74), shr(96, shl(96, token)))\\n            mstore(add(m, 0x54), amount)\\n            mstore(add(m, 0x34), to)\\n            mstore(add(m, 0x20), shl(96, from))\\n            // `transferFrom(address,address,uint160,address)`.\\n            mstore(m, 0x36c78516000000000000000000000000)\\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\\n            if iszero(mul(call(gas(), p, 0, add(m, 0x10), 0x84, codesize(), 0x00), extcodesize(p))) {\\n                mstore(0x00, 0x7939f4248757f0fd) // `TransferFromFailed()` or `Permit2AmountOverflow()`.\\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Permit a user to spend a given amount of\\n    /// another user's tokens via native EIP-2612 permit if possible, falling\\n    /// back to Permit2 if native permit fails or is not implemented on the token.\\n    function permit2(\\n        address token,\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} shl(96, xor(token, WETH9)) {} {\\n                mstore(0x00, 0x3644e515) // `DOMAIN_SEPARATOR()`.\\n                if iszero(\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        lt(iszero(mload(0x00)), eq(returndatasize(), 0x20)), // Returns 1 non-zero word.\\n                        // Gas stipend to limit gas burn for tokens that don't refund gas when\\n                        // an non-existing function is called. 5K should be enough for a SLOAD.\\n                        staticcall(5000, token, 0x1c, 0x04, 0x00, 0x20)\\n                    )\\n                ) { break }\\n                let m := mload(0x40)\\n                mstore(add(m, 0x34), spender)\\n                mstore(add(m, 0x20), shl(96, owner))\\n                mstore(add(m, 0x74), deadline)\\n                if eq(mload(0x00), DAI_DOMAIN_SEPARATOR) {\\n                    mstore(0x14, owner)\\n                    mstore(0x00, 0x7ecebe00000000000000000000000000) // `nonces(address)`.\\n                    mstore(add(m, 0x94), staticcall(gas(), token, 0x10, 0x24, add(m, 0x54), 0x20))\\n                    mstore(m, 0x8fcbaf0c000000000000000000000000) // `IDAIPermit.permit`.\\n                    // `nonces` is already at `add(m, 0x54)`.\\n                    // `1` is already stored at `add(m, 0x94)`.\\n                    mstore(add(m, 0xb4), and(0xff, v))\\n                    mstore(add(m, 0xd4), r)\\n                    mstore(add(m, 0xf4), s)\\n                    success := call(gas(), token, 0, add(m, 0x10), 0x104, codesize(), 0x00)\\n                    break\\n                }\\n                mstore(m, 0xd505accf000000000000000000000000) // `IERC20Permit.permit`.\\n                mstore(add(m, 0x54), amount)\\n                mstore(add(m, 0x94), and(0xff, v))\\n                mstore(add(m, 0xb4), r)\\n                mstore(add(m, 0xd4), s)\\n                success := call(gas(), token, 0, add(m, 0x10), 0xe4, codesize(), 0x00)\\n                break\\n            }\\n        }\\n        if (!success) simplePermit2(token, owner, spender, amount, deadline, v, r, s);\\n    }\\n\\n    /// @dev Simple permit on the Permit2 contract.\\n    function simplePermit2(\\n        address token,\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(m, 0x927da105) // `allowance(address,address,address)`.\\n            {\\n                let addressMask := shr(96, not(0))\\n                mstore(add(m, 0x20), and(addressMask, owner))\\n                mstore(add(m, 0x40), and(addressMask, token))\\n                mstore(add(m, 0x60), and(addressMask, spender))\\n                mstore(add(m, 0xc0), and(addressMask, spender))\\n            }\\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x5f), // Returns 3 words: `amount`, `expiration`, `nonce`.\\n                    staticcall(gas(), p, add(m, 0x1c), 0x64, add(m, 0x60), 0x60)\\n                )\\n            ) {\\n                mstore(0x00, 0x6b836e6b8757f0fd) // `Permit2Failed()` or `Permit2AmountOverflow()`.\\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\\n            }\\n            mstore(m, 0x2b67b570) // `Permit2.permit` (PermitSingle variant).\\n            // `owner` is already `add(m, 0x20)`.\\n            // `token` is already at `add(m, 0x40)`.\\n            mstore(add(m, 0x60), amount)\\n            mstore(add(m, 0x80), 0xffffffffffff) // `expiration = type(uint48).max`.\\n            // `nonce` is already at `add(m, 0xa0)`.\\n            // `spender` is already at `add(m, 0xc0)`.\\n            mstore(add(m, 0xe0), deadline)\\n            mstore(add(m, 0x100), 0x100) // `signature` offset.\\n            mstore(add(m, 0x120), 0x41) // `signature` length.\\n            mstore(add(m, 0x140), r)\\n            mstore(add(m, 0x160), s)\\n            mstore(add(m, 0x180), shl(248, v))\\n            if iszero(call(gas(), p, 0, add(m, 0x1c), 0x184, codesize(), 0x00)) {\\n                mstore(0x00, 0x6b836e6b) // `Permit2Failed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7dd5dc55a85891a4db0cb5009ae37ac5125471d94d3e8e443d582912dab31ccd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b5060405162002835380380620028358339810160408190526200003591620003b9565b898989898989898989898833806200006857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200007381620002c4565b506001600160a01b039081166080528a811660e0528881166101205287166101405263ffffffff808716610160528481166101805260008054918516600160a01b0263ffffffff60a01b1990921691909117905560a082905260c0819052620000dc8562000314565b896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200011b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000141919062000483565b6200014e90600a620005c4565b61010052620f424063ffffffff841610156200017d5760405163693d9a8160e11b815260040160405180910390fd5b8363ffffffff168363ffffffff161115620001ab57604051633838f8af60e11b815260040160405180910390fd5b876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000210919062000483565b60ff1660081415806200028b5750866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200025d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000283919062000483565b60ff16600814155b15620002aa576040516336d370b760e11b815260040160405180910390fd5b5050505050505050505050505050505050505050620005d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200031e62000358565b6001600160a01b0381166200034a57604051631e4fbdf760e01b8152600060048201526024016200005f565b6200035581620002c4565b50565b6000546001600160a01b03163314620003875760405163118cdaa760e01b81523360048201526024016200005f565b565b6001600160a01b03811681146200035557600080fd5b805163ffffffff81168114620003b457600080fd5b919050565b6000806000806000806000806000806101408b8d031215620003da57600080fd5b8a51620003e78162000389565b60208c0151909a50620003fa8162000389565b60408c01519099506200040d8162000389565b60608c0151909850620004208162000389565b96506200043060808c016200039f565b955060a08b0151620004428162000389565b94506200045260c08c016200039f565b93506200046260e08c016200039f565b92506101008b015191506101208b015190509295989b9194979a5092959850565b6000602082840312156200049657600080fd5b815160ff81168114620004a857600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000506578160001904821115620004ea57620004ea620004af565b80851615620004f857918102915b93841c9390800290620004ca565b509250929050565b6000826200051f57506001620005be565b816200052e57506000620005be565b8160018114620005475760028114620005525762000572565b6001915050620005be565b60ff841115620005665762000566620004af565b50506001821b620005be565b5060208310610133831016604e8410600b841016171562000597575081810a620005be565b620005a38383620004c5565b8060001904821115620005ba57620005ba620004af565b0290505b92915050565b6000620004a860ff8416836200050e565b60805160a05160c05160e0516101005161012051610140516101605161018051612140620006f5600039600081816103be01526108270152600081816103f2015261171e015260008181610514015261090101526000818161029201526108d40152600081816101cd015261092f0152600081816105680152818161097301528181610e0201528181610f420152818161104b01528181611207015281816114190152818161144d015281816114d801526115f60152600081816104e001528181610da201526113a60152600081816104ac01528181610d1901526115a3015260008181610426015281816105ac01528181610643015281816109a701528181610a4101528181610ab101528181610b3e0152610c0601526121406000f3fe6080604052600436106101815760003560e01c80639e281a98116100d1578063c399ec881161008a578063eb4149d511610064578063eb4149d5146104ce578063efb1ad5d14610502578063f2fde38b14610536578063fc0c546a1461055657600080fd5b8063c399ec881461047d578063d0e30db014610492578063eb38b6d41461049a57600080fd5b80639e281a981461038c578063a1b13f10146103ac578063a84f6ebb146103e0578063b0d691fe14610414578063bb9fe6bf14610448578063c23a5cea1461045d57600080fd5b80636c5ec25c1161013e57806382a59e9e1161011857806382a59e9e146103015780638da5cb5b1461032157806397dce8d41461033f57806398d5fdca1461035f57600080fd5b80636c5ec25c14610280578063715018a6146102cc5780637c627b21146102e157600080fd5b80630396cb6014610186578063205c28781461019b5780633b97e856146101bb5780633e04619d1461020257806352b7512c1461023b5780636c1516e114610269575b600080fd5b610199610194366004611b5b565b61058a565b005b3480156101a757600080fd5b506101996101b6366004611b9d565b610615565b3480156101c757600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561020e57600080fd5b5060005461022690600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016101f9565b34801561024757600080fd5b5061025b610256366004611be2565b610687565b6040516101f9929190611c80565b34801561027557600080fd5b506101ef620f424081565b34801561028c57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f9565b3480156102d857600080fd5b506101996106aa565b3480156102ed57600080fd5b506101996102fc366004611ca2565b6106be565b34801561030d57600080fd5b506101ef61031c366004611d55565b6106da565b34801561032d57600080fd5b506000546001600160a01b03166102b4565b34801561034b57600080fd5b5061019961035a366004611b5b565b6107f3565b34801561036b57600080fd5b506103746108cc565b6040516001600160c01b0390911681526020016101f9565b34801561039857600080fd5b506101996103a7366004611b9d565b610966565b3480156103b857600080fd5b506102267f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ec57600080fd5b506102267f000000000000000000000000000000000000000000000000000000000000000081565b34801561042057600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b5061019961099d565b34801561046957600080fd5b50610199610478366004611dbb565b610a1a565b34801561048957600080fd5b506101ef610a99565b610199610b29565b3480156104a657600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104da57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561050e57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561054257600080fd5b50610199610551366004611dbb565b610b8b565b34801561056257600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b610592610bce565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050505050565b61061d610bce565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b1580156105f957600080fd5b60606000610693610bfb565b61069e858585610c6b565b91509150935093915050565b6106b2610bce565b6106bc60006112a4565b565b6106c6610bfb565b6106d385858585856112f4565b5050505050565b600084358060208701356106f16040890189611dd8565b6040516106ff929190611e26565b60405190819003902061071560608a018a611dd8565b604051610723929190611e26565b60405190819003902060808a013561073e60e08c018c611dd8565b61074d91603491601491611e36565b61075691611e60565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08381019190915260c08381019290925288013560e0830152870135610100820152466101208201523061014082015265ffffffffffff80871661016083015285166101808201526101a081018490526101c00160405160208183030381529060405280519060200120915050949350505050565b6107fb610bce565b620f42408163ffffffff1610156108255760405163693d9a8160e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16111561087257604051633838f8af60e11b815260040160405180910390fd5b6000805463ffffffff60a01b1916600160a01b63ffffffff8416908102919091179091556040519081527f9ea1f42ce64c70800407f967ac1fa12212ba11a4cf535076a37dd1dbffc87b019060200160405180910390a150565b6000806108f87f0000000000000000000000000000000000000000000000000000000000000000611685565b905060006109257f0000000000000000000000000000000000000000000000000000000000000000611685565b90506000826109547f000000000000000000000000000000000000000000000000000000000000000084611e94565b61095e9190611edc565b949350505050565b61096e610bce565b6109997f0000000000000000000000000000000000000000000000000000000000000000838361176b565b5050565b6109a5610bce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b50505050565b610a22610bce565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b158015610a8557600080fd5b505af11580156106d3573d6000803e3d6000fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b249190611f02565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b158015610a8557600080fd5b610b93610bce565b6001600160a01b038116610bc257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610bcb816112a4565b50565b6000546001600160a01b031633146106bc5760405163118cdaa760e01b8152336004820152602401610bb9565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106bc5760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b6044820152606401610bb9565b60606000803681610c87610c8260e08a018a611dd8565b6117b1565b92509250925060048360ff1610610cb1576040516337f4524360e01b815260040160405180910390fd5b6000610cbb6108cc565b9050600080610cc98b61180f565b905060ff86161580610cde57508560ff166001145b15610d6c57610cf8620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03851690600160a01b900463ffffffff16610d3d847f0000000000000000000000000000000000000000000000000000000000000000611f1b565b610d47908d611f32565b610d519190611f1b565b610d5b9190611f1b565b610d659190611f45565b9150610df1565b610d81620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03851690600160a01b900463ffffffff16610dc6847f0000000000000000000000000000000000000000000000000000000000000000611f1b565b610dd0908d611f32565b610dda9190611f1b565b610de49190611f1b565b610dee9190611f45565b91505b508460ff16600003610ea357610e357f0000000000000000000000000000000000000000000000000000000000000000610e2e60208d018d611dbb565b308461182f565b8082610e4460208d018d611dbb565b8b604051602001610e89949392919093845260409290921b67ffffffffffffffff1916602084015260601b6001600160601b0319166038830152604c820152606c0190565b604051602081830303815290604052965060009550611297565b8460ff16600103610f6e5760208314610ecf57604051633fb36d9d60e11b815260040160405180910390fd5b610edd602060008587611e36565b610ee691611e60565b600003610f0657604051633b50362560e11b815260040160405180910390fd5b610f14602060008587611e36565b610f1d91611e60565b811115610f3d57604051635e57ef5760e01b815260040160405180910390fd5b610e357f0000000000000000000000000000000000000000000000000000000000000000610e2e60208d018d611dbb565b8460ff166002036110f0576020831015610f9b57604051633fb36d9d60e11b815260040160405180910390fd5b6000610faa6014828688611e36565b610fb391611f59565b60601c9050600061104482610ffd8e610fd0601a60148b8d611e36565b610fd991611f89565b60d01c610fea6020601a8c8e611e36565b610ff391611f89565b60d01c60006106da565b61100a886020818c611e36565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188392505050565b90506110727f000000000000000000000000000000000000000000000000000000000000000083308661182f565b828461108160208f018f611dbb565b8d85604051602001611097959493929190611fb7565b60408051601f1981840301815291905298506110e781156110bc601a6014898b611e36565b6110c591611f89565b60d01c6110d66020601a8a8c611e36565b6110df91611f89565b60d01c6118e5565b97505050611297565b604083101561111257604051633fb36d9d60e11b815260040160405180910390fd5b6000611122603460208688611e36565b61112b91611f59565b60601c905061113e602060008688611e36565b61114791611e60565b60000361116757604051633b50362560e11b815260040160405180910390fd5b611175602060008688611e36565b61117e91611e60565b82111561119e57604051635e57ef5760e01b815260040160405180910390fd5b6000611200826111f38e6111b6603a60348b8d611e36565b6111bf91611f89565b60d01c6111d06040603a8c8e611e36565b6111d991611f89565b60d01c6111ea602060008d8f611e36565b61031c91611e60565b61100a886040818c611e36565b905061122e7f000000000000000000000000000000000000000000000000000000000000000083308661182f565b828461123d60208f018f611dbb565b8d85604051602001611253959493929190611fb7565b60408051601f1981840301815291905298506112928115611278603a6034898b611e36565b61128191611f89565b60d01c6110d66040603a8a8c611e36565b975050505b5050505050935093915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006113036020828688611e36565b61130c91611e60565b9050600061131e603860208789611e36565b61132791611ffd565b60401c9050600061133c604c6038888a611e36565b61134591611f59565b60601c9050600061135a606c604c898b611e36565b61136391611e60565b9050608087900361156b576000611385620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03861690600160a01b900463ffffffff166113ca897f0000000000000000000000000000000000000000000000000000000000000000611f1b565b6113d4908b611f32565b6113de9190611f1b565b6113e89190611f1b565b6113f29190611f45565b905060006114046080606c8b8d611e36565b61140d91611f59565b60601c905060006114407f000000000000000000000000000000000000000000000000000000000000000086308661191d565b905080156114d3576114737f0000000000000000000000000000000000000000000000000000000000000000838961176b565b604080518481526001600160c01b038816602082015260008183015290516001600160a01b03848116929088169187917fc17fe1e2287d25ac4fb440d6972be81ad64f6c3d0b8ca6ac1f6c9c6011250c52919081900360600190a4611563565b6115077f000000000000000000000000000000000000000000000000000000000000000083611502868b61202c565b61176b565b604080518481526001600160c01b038816602082015260018183015290516001600160a01b03848116929088169187917fc17fe1e2287d25ac4fb440d6972be81ad64f6c3d0b8ca6ac1f6c9c6011250c52919081900360600190a45b50505061167a565b6000611582620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03861690600160a01b900463ffffffff166115c7897f0000000000000000000000000000000000000000000000000000000000000000611f1b565b6115d1908b611f32565b6115db9190611f1b565b6115e59190611f1b565b6115ef9190611f45565b90506116207f000000000000000000000000000000000000000000000000000000000000000084611502848961202c565b604080518281526001600160c01b038616602082015260009181018290526001600160a01b0385169084907fc17fe1e2287d25ac4fb440d6972be81ad64f6c3d0b8ca6ac1f6c9c6011250c529060600160405180910390a4505b505050505050505050565b6000806000836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190612059565b509350509250506000821361171457604051631319f4b960e11b815260040160405180910390fd5b61174463ffffffff7f0000000000000000000000000000000000000000000000000000000000000000164261202c565b811015611764576040516308b9f95b60e01b815260040160405180910390fd5b5092915050565b816014528060345263a9059cbb60601b60005260206000604460106000875af13d1560016000511417166117a7576390b8ec186000526004601cfd5b6000603452505050565b6000368160358410156117d75760006117cc81803681611e36565b925092509250611808565b848460348181106117ea576117ea6120a9565b919091013560f81c90506118018560358189611e36565b9250925092505b9250925092565b60006fffffffffffffffffffffffffffffffff60c0830135165b92915050565b60405181606052826040528360601b602c526323b872dd60601b600c52602060006064601c6000895af13d15600160005114171661187557637939f4246000526004601cfd5b600060605260405250505050565b60008060006118928585611967565b50909250905060008160038111156118ac576118ac6120bf565b1480156118ca5750856001600160a01b0316826001600160a01b0316145b806118db57506118db8686866119b1565b9695505050505050565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b8561190d576000611910565b60015b60ff161717949350505050565b600060405182606052836040528460601b602c526323b872dd60601b600c52602060006064601c60008a5af13d156001600051141716915060006060528060405250949350505050565b600080600083516041036119a15760208401516040850151606086015160001a61199388828585611a8c565b955095509550505050611808565b5050815160009150600290611808565b6000806000856001600160a01b031685856040516024016119d39291906120d5565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b17905251611a0891906120ee565b600060405180830381855afa9150503d8060008114611a43576040519150601f19603f3d011682016040523d82523d6000602084013e611a48565b606091505b5091509150818015611a5c57506020815110155b80156118db57508051630b135d3f60e11b90611a819083016020908101908401611f02565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611ac75750600091506003905082611b51565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611b1b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b4757506000925060019150829050611b51565b9250600091508190505b9450945094915050565b600060208284031215611b6d57600080fd5b813563ffffffff81168114611b8157600080fd5b9392505050565b6001600160a01b0381168114610bcb57600080fd5b60008060408385031215611bb057600080fd5b8235611bbb81611b88565b946020939093013593505050565b60006101208284031215611bdc57600080fd5b50919050565b600080600060608486031215611bf757600080fd5b833567ffffffffffffffff811115611c0e57600080fd5b611c1a86828701611bc9565b9660208601359650604090950135949350505050565b60005b83811015611c4b578181015183820152602001611c33565b50506000910152565b60008151808452611c6c816020860160208601611c30565b601f01601f19169290920160200192915050565b604081526000611c936040830185611c54565b90508260208301529392505050565b600080600080600060808688031215611cba57600080fd5b853560038110611cc957600080fd5b9450602086013567ffffffffffffffff80821115611ce657600080fd5b818801915088601f830112611cfa57600080fd5b813581811115611d0957600080fd5b896020828501011115611d1b57600080fd5b9699602092909201985095966040810135965060600135945092505050565b803565ffffffffffff81168114611d5057600080fd5b919050565b60008060008060808587031215611d6b57600080fd5b843567ffffffffffffffff811115611d8257600080fd5b611d8e87828801611bc9565b945050611d9d60208601611d3a565b9250611dab60408601611d3a565b9396929550929360600135925050565b600060208284031215611dcd57600080fd5b8135611b8181611b88565b6000808335601e19843603018112611def57600080fd5b83018035915067ffffffffffffffff821115611e0a57600080fd5b602001915036819003821315611e1f57600080fd5b9250929050565b8183823760009101908152919050565b60008085851115611e4657600080fd5b83861115611e5357600080fd5b5050820193919092039150565b8035602083101561182957600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b6001600160c01b03828116828216818102831692918115828504821417611ebd57611ebd611e7e565b50505092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b0383811680611ef657611ef6611ec6565b92169190910492915050565b600060208284031215611f1457600080fd5b5051919050565b808202811582820484141761182957611829611e7e565b8082018082111561182957611829611e7e565b600082611f5457611f54611ec6565b500490565b6001600160601b03198135818116916014851015611f815780818660140360031b1b83161692505b505092915050565b6001600160d01b03198135818116916006851015611f815760069490940360031b84901b1690921692915050565b94855260409390931b67ffffffffffffffff19166020850152606091821b6001600160601b03199081166038860152604c85019190915291901b16606c82015260800190565b67ffffffffffffffff198135818116916018851015611f815760189490940360031b84901b1690921692915050565b8181038181111561182957611829611e7e565b805169ffffffffffffffffffff81168114611d5057600080fd5b600080600080600060a0868803121561207157600080fd5b61207a8661203f565b945060208601519350604086015192506060860151915061209d6080870161203f565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061095e6040830184611c54565b60008251612100818460208701611c30565b919091019291505056fea264697066735822122058ee57979bd5fe0100b97c2767f7e61c1a32b47d8a4072a6c3fe28a15c7c46fb64736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80639e281a98116100d1578063c399ec881161008a578063eb4149d511610064578063eb4149d5146104ce578063efb1ad5d14610502578063f2fde38b14610536578063fc0c546a1461055657600080fd5b8063c399ec881461047d578063d0e30db014610492578063eb38b6d41461049a57600080fd5b80639e281a981461038c578063a1b13f10146103ac578063a84f6ebb146103e0578063b0d691fe14610414578063bb9fe6bf14610448578063c23a5cea1461045d57600080fd5b80636c5ec25c1161013e57806382a59e9e1161011857806382a59e9e146103015780638da5cb5b1461032157806397dce8d41461033f57806398d5fdca1461035f57600080fd5b80636c5ec25c14610280578063715018a6146102cc5780637c627b21146102e157600080fd5b80630396cb6014610186578063205c28781461019b5780633b97e856146101bb5780633e04619d1461020257806352b7512c1461023b5780636c1516e114610269575b600080fd5b610199610194366004611b5b565b61058a565b005b3480156101a757600080fd5b506101996101b6366004611b9d565b610615565b3480156101c757600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561020e57600080fd5b5060005461022690600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016101f9565b34801561024757600080fd5b5061025b610256366004611be2565b610687565b6040516101f9929190611c80565b34801561027557600080fd5b506101ef620f424081565b34801561028c57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f9565b3480156102d857600080fd5b506101996106aa565b3480156102ed57600080fd5b506101996102fc366004611ca2565b6106be565b34801561030d57600080fd5b506101ef61031c366004611d55565b6106da565b34801561032d57600080fd5b506000546001600160a01b03166102b4565b34801561034b57600080fd5b5061019961035a366004611b5b565b6107f3565b34801561036b57600080fd5b506103746108cc565b6040516001600160c01b0390911681526020016101f9565b34801561039857600080fd5b506101996103a7366004611b9d565b610966565b3480156103b857600080fd5b506102267f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ec57600080fd5b506102267f000000000000000000000000000000000000000000000000000000000000000081565b34801561042057600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b5061019961099d565b34801561046957600080fd5b50610199610478366004611dbb565b610a1a565b34801561048957600080fd5b506101ef610a99565b610199610b29565b3480156104a657600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104da57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561050e57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561054257600080fd5b50610199610551366004611dbb565b610b8b565b34801561056257600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b610592610bce565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050505050565b61061d610bce565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b1580156105f957600080fd5b60606000610693610bfb565b61069e858585610c6b565b91509150935093915050565b6106b2610bce565b6106bc60006112a4565b565b6106c6610bfb565b6106d385858585856112f4565b5050505050565b600084358060208701356106f16040890189611dd8565b6040516106ff929190611e26565b60405190819003902061071560608a018a611dd8565b604051610723929190611e26565b60405190819003902060808a013561073e60e08c018c611dd8565b61074d91603491601491611e36565b61075691611e60565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08381019190915260c08381019290925288013560e0830152870135610100820152466101208201523061014082015265ffffffffffff80871661016083015285166101808201526101a081018490526101c00160405160208183030381529060405280519060200120915050949350505050565b6107fb610bce565b620f42408163ffffffff1610156108255760405163693d9a8160e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16111561087257604051633838f8af60e11b815260040160405180910390fd5b6000805463ffffffff60a01b1916600160a01b63ffffffff8416908102919091179091556040519081527f9ea1f42ce64c70800407f967ac1fa12212ba11a4cf535076a37dd1dbffc87b019060200160405180910390a150565b6000806108f87f0000000000000000000000000000000000000000000000000000000000000000611685565b905060006109257f0000000000000000000000000000000000000000000000000000000000000000611685565b90506000826109547f000000000000000000000000000000000000000000000000000000000000000084611e94565b61095e9190611edc565b949350505050565b61096e610bce565b6109997f0000000000000000000000000000000000000000000000000000000000000000838361176b565b5050565b6109a5610bce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b50505050565b610a22610bce565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b158015610a8557600080fd5b505af11580156106d3573d6000803e3d6000fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b249190611f02565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b158015610a8557600080fd5b610b93610bce565b6001600160a01b038116610bc257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610bcb816112a4565b50565b6000546001600160a01b031633146106bc5760405163118cdaa760e01b8152336004820152602401610bb9565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106bc5760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b6044820152606401610bb9565b60606000803681610c87610c8260e08a018a611dd8565b6117b1565b92509250925060048360ff1610610cb1576040516337f4524360e01b815260040160405180910390fd5b6000610cbb6108cc565b9050600080610cc98b61180f565b905060ff86161580610cde57508560ff166001145b15610d6c57610cf8620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03851690600160a01b900463ffffffff16610d3d847f0000000000000000000000000000000000000000000000000000000000000000611f1b565b610d47908d611f32565b610d519190611f1b565b610d5b9190611f1b565b610d659190611f45565b9150610df1565b610d81620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03851690600160a01b900463ffffffff16610dc6847f0000000000000000000000000000000000000000000000000000000000000000611f1b565b610dd0908d611f32565b610dda9190611f1b565b610de49190611f1b565b610dee9190611f45565b91505b508460ff16600003610ea357610e357f0000000000000000000000000000000000000000000000000000000000000000610e2e60208d018d611dbb565b308461182f565b8082610e4460208d018d611dbb565b8b604051602001610e89949392919093845260409290921b67ffffffffffffffff1916602084015260601b6001600160601b0319166038830152604c820152606c0190565b604051602081830303815290604052965060009550611297565b8460ff16600103610f6e5760208314610ecf57604051633fb36d9d60e11b815260040160405180910390fd5b610edd602060008587611e36565b610ee691611e60565b600003610f0657604051633b50362560e11b815260040160405180910390fd5b610f14602060008587611e36565b610f1d91611e60565b811115610f3d57604051635e57ef5760e01b815260040160405180910390fd5b610e357f0000000000000000000000000000000000000000000000000000000000000000610e2e60208d018d611dbb565b8460ff166002036110f0576020831015610f9b57604051633fb36d9d60e11b815260040160405180910390fd5b6000610faa6014828688611e36565b610fb391611f59565b60601c9050600061104482610ffd8e610fd0601a60148b8d611e36565b610fd991611f89565b60d01c610fea6020601a8c8e611e36565b610ff391611f89565b60d01c60006106da565b61100a886020818c611e36565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188392505050565b90506110727f000000000000000000000000000000000000000000000000000000000000000083308661182f565b828461108160208f018f611dbb565b8d85604051602001611097959493929190611fb7565b60408051601f1981840301815291905298506110e781156110bc601a6014898b611e36565b6110c591611f89565b60d01c6110d66020601a8a8c611e36565b6110df91611f89565b60d01c6118e5565b97505050611297565b604083101561111257604051633fb36d9d60e11b815260040160405180910390fd5b6000611122603460208688611e36565b61112b91611f59565b60601c905061113e602060008688611e36565b61114791611e60565b60000361116757604051633b50362560e11b815260040160405180910390fd5b611175602060008688611e36565b61117e91611e60565b82111561119e57604051635e57ef5760e01b815260040160405180910390fd5b6000611200826111f38e6111b6603a60348b8d611e36565b6111bf91611f89565b60d01c6111d06040603a8c8e611e36565b6111d991611f89565b60d01c6111ea602060008d8f611e36565b61031c91611e60565b61100a886040818c611e36565b905061122e7f000000000000000000000000000000000000000000000000000000000000000083308661182f565b828461123d60208f018f611dbb565b8d85604051602001611253959493929190611fb7565b60408051601f1981840301815291905298506112928115611278603a6034898b611e36565b61128191611f89565b60d01c6110d66040603a8a8c611e36565b975050505b5050505050935093915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006113036020828688611e36565b61130c91611e60565b9050600061131e603860208789611e36565b61132791611ffd565b60401c9050600061133c604c6038888a611e36565b61134591611f59565b60601c9050600061135a606c604c898b611e36565b61136391611e60565b9050608087900361156b576000611385620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03861690600160a01b900463ffffffff166113ca897f0000000000000000000000000000000000000000000000000000000000000000611f1b565b6113d4908b611f32565b6113de9190611f1b565b6113e89190611f1b565b6113f29190611f45565b905060006114046080606c8b8d611e36565b61140d91611f59565b60601c905060006114407f000000000000000000000000000000000000000000000000000000000000000086308661191d565b905080156114d3576114737f0000000000000000000000000000000000000000000000000000000000000000838961176b565b604080518481526001600160c01b038816602082015260008183015290516001600160a01b03848116929088169187917fc17fe1e2287d25ac4fb440d6972be81ad64f6c3d0b8ca6ac1f6c9c6011250c52919081900360600190a4611563565b6115077f000000000000000000000000000000000000000000000000000000000000000083611502868b61202c565b61176b565b604080518481526001600160c01b038816602082015260018183015290516001600160a01b03848116929088169187917fc17fe1e2287d25ac4fb440d6972be81ad64f6c3d0b8ca6ac1f6c9c6011250c52919081900360600190a45b50505061167a565b6000611582620f4240670de0b6b3a7640000611f1b565b6000546001600160c01b03861690600160a01b900463ffffffff166115c7897f0000000000000000000000000000000000000000000000000000000000000000611f1b565b6115d1908b611f32565b6115db9190611f1b565b6115e59190611f1b565b6115ef9190611f45565b90506116207f000000000000000000000000000000000000000000000000000000000000000084611502848961202c565b604080518281526001600160c01b038616602082015260009181018290526001600160a01b0385169084907fc17fe1e2287d25ac4fb440d6972be81ad64f6c3d0b8ca6ac1f6c9c6011250c529060600160405180910390a4505b505050505050505050565b6000806000836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190612059565b509350509250506000821361171457604051631319f4b960e11b815260040160405180910390fd5b61174463ffffffff7f0000000000000000000000000000000000000000000000000000000000000000164261202c565b811015611764576040516308b9f95b60e01b815260040160405180910390fd5b5092915050565b816014528060345263a9059cbb60601b60005260206000604460106000875af13d1560016000511417166117a7576390b8ec186000526004601cfd5b6000603452505050565b6000368160358410156117d75760006117cc81803681611e36565b925092509250611808565b848460348181106117ea576117ea6120a9565b919091013560f81c90506118018560358189611e36565b9250925092505b9250925092565b60006fffffffffffffffffffffffffffffffff60c0830135165b92915050565b60405181606052826040528360601b602c526323b872dd60601b600c52602060006064601c6000895af13d15600160005114171661187557637939f4246000526004601cfd5b600060605260405250505050565b60008060006118928585611967565b50909250905060008160038111156118ac576118ac6120bf565b1480156118ca5750856001600160a01b0316826001600160a01b0316145b806118db57506118db8686866119b1565b9695505050505050565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b8561190d576000611910565b60015b60ff161717949350505050565b600060405182606052836040528460601b602c526323b872dd60601b600c52602060006064601c60008a5af13d156001600051141716915060006060528060405250949350505050565b600080600083516041036119a15760208401516040850151606086015160001a61199388828585611a8c565b955095509550505050611808565b5050815160009150600290611808565b6000806000856001600160a01b031685856040516024016119d39291906120d5565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b17905251611a0891906120ee565b600060405180830381855afa9150503d8060008114611a43576040519150601f19603f3d011682016040523d82523d6000602084013e611a48565b606091505b5091509150818015611a5c57506020815110155b80156118db57508051630b135d3f60e11b90611a819083016020908101908401611f02565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611ac75750600091506003905082611b51565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611b1b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b4757506000925060019150829050611b51565b9250600091508190505b9450945094915050565b600060208284031215611b6d57600080fd5b813563ffffffff81168114611b8157600080fd5b9392505050565b6001600160a01b0381168114610bcb57600080fd5b60008060408385031215611bb057600080fd5b8235611bbb81611b88565b946020939093013593505050565b60006101208284031215611bdc57600080fd5b50919050565b600080600060608486031215611bf757600080fd5b833567ffffffffffffffff811115611c0e57600080fd5b611c1a86828701611bc9565b9660208601359650604090950135949350505050565b60005b83811015611c4b578181015183820152602001611c33565b50506000910152565b60008151808452611c6c816020860160208601611c30565b601f01601f19169290920160200192915050565b604081526000611c936040830185611c54565b90508260208301529392505050565b600080600080600060808688031215611cba57600080fd5b853560038110611cc957600080fd5b9450602086013567ffffffffffffffff80821115611ce657600080fd5b818801915088601f830112611cfa57600080fd5b813581811115611d0957600080fd5b896020828501011115611d1b57600080fd5b9699602092909201985095966040810135965060600135945092505050565b803565ffffffffffff81168114611d5057600080fd5b919050565b60008060008060808587031215611d6b57600080fd5b843567ffffffffffffffff811115611d8257600080fd5b611d8e87828801611bc9565b945050611d9d60208601611d3a565b9250611dab60408601611d3a565b9396929550929360600135925050565b600060208284031215611dcd57600080fd5b8135611b8181611b88565b6000808335601e19843603018112611def57600080fd5b83018035915067ffffffffffffffff821115611e0a57600080fd5b602001915036819003821315611e1f57600080fd5b9250929050565b8183823760009101908152919050565b60008085851115611e4657600080fd5b83861115611e5357600080fd5b5050820193919092039150565b8035602083101561182957600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b6001600160c01b03828116828216818102831692918115828504821417611ebd57611ebd611e7e565b50505092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b0383811680611ef657611ef6611ec6565b92169190910492915050565b600060208284031215611f1457600080fd5b5051919050565b808202811582820484141761182957611829611e7e565b8082018082111561182957611829611e7e565b600082611f5457611f54611ec6565b500490565b6001600160601b03198135818116916014851015611f815780818660140360031b1b83161692505b505092915050565b6001600160d01b03198135818116916006851015611f815760069490940360031b84901b1690921692915050565b94855260409390931b67ffffffffffffffff19166020850152606091821b6001600160601b03199081166038860152604c85019190915291901b16606c82015260800190565b67ffffffffffffffff198135818116916018851015611f815760189490940360031b84901b1690921692915050565b8181038181111561182957611829611e7e565b805169ffffffffffffffffffff81168114611d5057600080fd5b600080600080600060a0868803121561207157600080fd5b61207a8661203f565b945060208601519350604086015192506060860151915061209d6080870161203f565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061095e6040830184611c54565b60008251612100818460208701611c30565b919091019291505056fea264697066735822122058ee57979bd5fe0100b97c2767f7e61c1a32b47d8a4072a6c3fe28a15c7c46fb64736f6c63430008170033",
  "devdoc": {
    "author": "Pimlico (https://github.com/pimlicolabs/erc20-paymaster/blob/main/src/ERC20PaymasterV06.sol)Using Solady (https://github.com/vectorized/solady)",
    "custom:security-contact": "security@pimlico.io",
    "details": "Inherits from BaseERC20Paymaster.",
    "errors": {
      "OracleDecimalsInvalid()": [
        {
          "details": "The oracle decimals are not set to 8."
        }
      ],
      "OraclePriceNotPositive()": [
        {
          "details": "The oracle price is less than or equal to zero."
        }
      ],
      "OraclePriceStale()": [
        {
          "details": "The oracle price is stale."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "PaymasterDataLengthInvalid()": [
        {
          "details": "The paymaster data length is invalid for the selected mode."
        }
      ],
      "PaymasterDataModeInvalid()": [
        {
          "details": "The paymaster data mode is invalid. The mode should be 0, 1, 2, or 3."
        }
      ],
      "PriceMarkupTooHigh()": [
        {
          "details": "The price markup selected is higher than the price markup limit."
        }
      ],
      "PriceMarkupTooLow()": [
        {
          "details": "The price markup selected is lower than break-even."
        }
      ],
      "TokenAmountTooHigh()": [
        {
          "details": "The token amount is higher than the limit set."
        }
      ],
      "TokenLimitZero()": [
        {
          "details": "The token limit is set to zero in a paymaster mode that uses a limit."
        }
      ]
    },
    "events": {
      "MarkupUpdated(uint32)": {
        "details": "Emitted when the price markup is updated."
      },
      "UserOperationSponsored(bytes32,address,address,uint256,uint256,bool)": {
        "details": "Emitted when a user operation is sponsored by the paymaster."
      }
    },
    "kind": "dev",
    "methods": {
      "addStake(uint32)": {
        "params": {
          "unstakeDelaySec": "- The unstake delay for this paymaster. Can only be increased."
        }
      },
      "getHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),uint48,uint48,uint256)": {
        "params": {
          "tokenLimit": "The maximum amount of tokens allowed for the user operation. 0 if no limit.",
          "userOp": "The user operation data.",
          "validAfter": "The timestamp after which the user operation is valid.",
          "validUntil": "The timestamp until which the user operation is valid."
        }
      },
      "getPrice()": {
        "returns": {
          "_0": "price The latest token price fetched from the oracles."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postOp(uint8,bytes,uint256,uint256)": {
        "params": {
          "actualGasCost": "- Actual gas used so far (without this postOp call).",
          "actualUserOpFeePerGas": "- the gas price this UserOp pays. This value is based on the UserOp's maxFeePerGas                        and maxPriorityFee (and basefee)                        It is not the same as tx.gasprice, which is what the bundler pays.",
          "context": "- The context value returned by validatePaymasterUserOp",
          "mode": "- Enum with the following options:                        opSucceeded - User operation succeeded.                        opReverted  - User op reverted. The paymaster still has to pay for gas.                        postOpReverted - never passed in a call to postOp()."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMarkup(uint32)": {
        "params": {
          "_priceMarkup": "The new price markup percentage (1e6 = 100%)."
        }
      },
      "validatePaymasterUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)": {
        "params": {
          "maxCost": "- The maximum cost of this transaction (based on maximum gas and gas price from userOp).",
          "userOp": "- The user operation.",
          "userOpHash": "- Hash of the user's request data."
        },
        "returns": {
          "context": "       - Value to send to a postOp. Zero length to signify postOp is not required.",
          "validationData": "- Signature and time-range of this operation, encoded the same as the return                          value of validateUserOperation.                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                                    other values are invalid for paymaster.                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"                          <6-byte> validAfter - first timestamp this operation is valid                          Note that the validation code cannot use block.timestamp (or block.number) directly."
        }
      },
      "withdrawStake(address)": {
        "params": {
          "withdrawAddress": "- The address to send withdrawn value."
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "amount": "- Amount to withdraw.",
          "withdrawAddress": "- Target to send to."
        }
      },
      "withdrawToken(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to transfer.",
          "to": "The address to transfer the tokens to."
        }
      }
    },
    "title": "ERC20PaymasterV07",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addStake(uint32)": {
        "notice": "Add stake for this paymaster. This method can also carry eth value to add to the current stake."
      },
      "deposit()": {
        "notice": "Add a deposit for this paymaster, used for paying for transaction fees."
      },
      "getDeposit()": {
        "notice": "Return current paymaster's deposit on the entryPoint."
      },
      "getHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),uint48,uint48,uint256)": {
        "notice": "Hashes the user operation data."
      },
      "getPrice()": {
        "notice": "Fetches the latest token price."
      },
      "postOp(uint8,bytes,uint256,uint256)": {
        "notice": "Post-operation handler. Must verify sender is the entryPoint."
      },
      "unlockStake()": {
        "notice": "Unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"
      },
      "updateMarkup(uint32)": {
        "notice": "Updates the price markup."
      },
      "validatePaymasterUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)": {
        "notice": "Payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted). The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."
      },
      "withdrawStake(address)": {
        "notice": "Withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"
      },
      "withdrawTo(address,uint256)": {
        "notice": "Withdraw value from the deposit."
      },
      "withdrawToken(address,uint256)": {
        "notice": "Allows the contract owner to withdraw a specified amount of tokens from the contract."
      }
    },
    "notice": "An ERC-4337 Paymaster contract which is able to sponsor gas fees in exchange for ERC-20 tokens. The contract refunds excess tokens. It also allows updating price configuration and withdrawing tokens by the contract owner. The contract uses oracles to fetch the latest token prices. The paymaster supports standard and up-rebasing ERC-20 tokens. It does not support down-rebasing and fee-on-transfer tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/modular-etherspot-wallet/ERC20PaymasterEP07/ERC20PaymasterV07.sol:ERC20Paymaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2815,
        "contract": "src/modular-etherspot-wallet/ERC20PaymasterEP07/ERC20PaymasterV07.sol:ERC20Paymaster",
        "label": "priceMarkup",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}