{
  "address": "0x805650ce74561C85baA44a8Bd13E19633Fd0F79d",
  "abi": [
    {
      "inputs": [],
      "name": "AccountAccessUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotRemoveLastValidator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackInvalidCallType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currentHook",
          "type": "address"
        }
      ],
      "name": "HookAlreadyInstalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HookPostCheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InvalidFallbackCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "InvalidModule",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entry",
          "type": "address"
        }
      ],
      "name": "LinkedList_EntryAlreadyInList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entry",
          "type": "address"
        }
      ],
      "name": "LinkedList_InvalidEntry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkedList_InvalidPage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "NoFallbackHandler",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig[]",
          "name": "$valdiators",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig[]",
          "name": "$executors",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig",
          "name": "_hook",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig[]",
          "name": "_fallbacks",
          "type": "tuple[]"
        }
      ],
      "name": "_getInitMSACalldata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "init",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "functionSig",
          "type": "bytes4"
        }
      ],
      "name": "getActiveFallbackHandler",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "handler",
              "type": "address"
            },
            {
              "internalType": "CallType",
              "name": "calltype",
              "type": "bytes1"
            },
            {
              "internalType": "address[]",
              "name": "allowedCallers",
              "type": "address[]"
            }
          ],
          "internalType": "struct ModuleManager.FallbackHandler",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveHook",
      "outputs": [
        {
          "internalType": "address",
          "name": "hook",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cursor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getExecutorsPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "array",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "next",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cursor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getValidatorPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "array",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "next",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig[]",
          "name": "$valdiators",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig[]",
          "name": "$executors",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig",
          "name": "_hook",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BootstrapConfig[]",
          "name": "_fallbacks",
          "type": "tuple[]"
        }
      ],
      "name": "initMSA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IModule",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "singleInitMSA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6ae3544d40f293c1baa02d6951bc87f379470e1dc064fff64f4f4b759c193ab5",
  "receipt": {
    "to": null,
    "from": "0x09FD4F6088f2025427AB1e89257A44747081Ed59",
    "contractAddress": "0x805650ce74561C85baA44a8Bd13E19633Fd0F79d",
    "transactionIndex": 0,
    "gasUsed": "1525139",
    "logsBloom": "0x
    "blockHash": "0x5d9dd9407a5a0d33d0fb1894669a4c81f4a71d41751b8233ad565afddba5b354",
    "transactionHash": "0x6ae3544d40f293c1baa02d6951bc87f379470e1dc064fff64f4f4b759c193ab5",
    "logs": [],
    "blockNumber": 64205186,
    "cumulativeGasUsed": "1525139",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6e4ce9519befb2c9f6b2b39bea9bf5fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountAccessUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveLastValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackInvalidCallType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentHook\",\"type\":\"address\"}],\"name\":\"HookAlreadyInstalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HookPostCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidFallbackCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"InvalidModule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entry\",\"type\":\"address\"}],\"name\":\"LinkedList_EntryAlreadyInList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entry\",\"type\":\"address\"}],\"name\":\"LinkedList_InvalidEntry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkedList_InvalidPage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"NoFallbackHandler\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig[]\",\"name\":\"$valdiators\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig[]\",\"name\":\"$executors\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig\",\"name\":\"_hook\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig[]\",\"name\":\"_fallbacks\",\"type\":\"tuple[]\"}],\"name\":\"_getInitMSACalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"init\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"getActiveFallbackHandler\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"CallType\",\"name\":\"calltype\",\"type\":\"bytes1\"},{\"internalType\":\"address[]\",\"name\":\"allowedCallers\",\"type\":\"address[]\"}],\"internalType\":\"struct ModuleManager.FallbackHandler\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cursor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getExecutorsPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cursor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getValidatorPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig[]\",\"name\":\"$valdiators\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig[]\",\"name\":\"$executors\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig\",\"name\":\"_hook\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BootstrapConfig[]\",\"name\":\"_fallbacks\",\"type\":\"tuple[]\"}],\"name\":\"initMSA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IModule\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"singleInitMSA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExecutorsPaginated(address,uint256)\":{\"notice\":\"THIS IS NOT PART OF THE STANDARD Helper Function to access linked list\"},\"getValidatorPaginated(address,uint256)\":{\"notice\":\"THIS IS NOT PART OF THE STANDARD Helper Function to access linked list\"},\"initMSA((address,bytes)[],(address,bytes)[],(address,bytes),(address,bytes)[])\":{\"notice\":\"This function is intended to be called by the MSA with a delegatecall. Make sure that the MSA already initilazed the linked lists in the ModuleManager prior to calling this function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/modular-etherspot-wallet/erc7579-ref-impl/utils/Bootstrap.sol\":\"Bootstrap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./PackedUserOperation.sol\\\";\\n\\ninterface IAccount {\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp              - The operation that is about to be executed.\\n     * @param userOpHash          - Hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds - Missing funds on the account's deposit in the entrypoint.\\n     *                              This is the minimum amount to transfer to the sender(entryPoint) to be\\n     *                              able to make the call. The excess is left as a deposit in the entrypoint\\n     *                              for future calls. Can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\".\\n     *                              In case there is a paymaster in the request (or the current deposit is high\\n     *                              enough), this value will be zero.\\n     * @return validationData       - Packaged ValidationData structure. use `_packValidationData` and\\n     *                              `_unpackValidationData` to encode and decode.\\n     *                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *                                 otherwise, an address of an \\\"authorizer\\\" contract.\\n     *                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *                              <6-byte> validAfter - First timestamp this operation is valid\\n     *                                                    If an account doesn't use time-range, it is enough to\\n     *                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *                              Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/**\\n * User Operation struct\\n * @param sender                - The sender account of this request.\\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\\n * @param initCode              - If set, the account contract will be created by this constructor/\\n * @param callData              - The method call to execute on this account.\\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\\n *                                Covers batch overhead.\\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\\n *                                The paymaster will pay for the transaction instead of the sender.\\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct PackedUserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    bytes32 accountGasLimits;\\n    uint256 preVerificationGas;\\n    bytes32 gasFees;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\"},\"forge-std/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    /// uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/AccountBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title reference implementation of the minimal modular smart account with Hook Extension\\n * @author zeroknots.eth | rhinestone.wtf\\n */\\ncontract AccountBase {\\n    error AccountAccessUnauthorized();\\n    /////////////////////////////////////////////////////\\n    // Access Control\\n    ////////////////////////////////////////////////////\\n\\n    modifier onlyEntryPointOrSelf() virtual {\\n        if (!(msg.sender == entryPoint() || msg.sender == address(this))) {\\n            revert AccountAccessUnauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyEntryPoint() virtual {\\n        if (msg.sender != entryPoint()) {\\n            revert AccountAccessUnauthorized();\\n        }\\n        _;\\n    }\\n\\n    function entryPoint() public view virtual returns (address) {\\n        return 0x0000000071727De22E5E9d8BAf0edAc6f37da032;\\n    }\\n\\n    /// @dev Sends to the EntryPoint (i.e. `msg.sender`) the missing funds for this transaction.\\n    /// Subclass MAY override this modifier for better funds management.\\n    /// (e.g. send to the EntryPoint more than the minimum required, so that in future transactions\\n    /// it will not be required to send again)\\n    ///\\n    /// `missingAccountFunds` is the minimum value this modifier should send the EntryPoint,\\n    /// which MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n    modifier payPrefund(uint256 missingAccountFunds) virtual {\\n        _;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if missingAccountFunds {\\n                // Ignore failure (it's EntryPoint's job to verify, not the account's).\\n                pop(\\n                    call(\\n                        gas(),\\n                        caller(),\\n                        missingAccountFunds,\\n                        codesize(),\\n                        0x00,\\n                        codesize(),\\n                        0x00\\n                    )\\n                )\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91aa799484224ba03f0293884be9742151d804abda4fd1bfe957a0de4ec2e4cf\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/HookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./ModuleManager.sol\\\";\\nimport \\\"../interfaces/IERC7579Account.sol\\\";\\nimport \\\"../interfaces/IERC7579Module.sol\\\";\\n/**\\n * @title reference implementation of HookManager\\n * @author zeroknots.eth | rhinestone.wtf\\n */\\n\\nabstract contract HookManager {\\n    /// @custom:storage-location erc7201:hookmanager.storage.msa\\n    struct HookManagerStorage {\\n        IHook _hook;\\n    }\\n\\n    // keccak256(\\\"hookmanager.storage.msa\\\");\\n    bytes32 constant HOOKMANAGER_STORAGE_LOCATION =\\n        0x36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb28431608;\\n\\n    error HookPostCheckFailed();\\n    error HookAlreadyInstalled(address currentHook);\\n\\n    modifier withHook() {\\n        address hook = _getHook();\\n        if (hook == address(0)) {\\n            _;\\n        } else {\\n            bytes memory hookData = IHook(hook).preCheck(msg.sender, msg.data);\\n            _;\\n            if (!IHook(hook).postCheck(hookData)) revert HookPostCheckFailed();\\n        }\\n    }\\n\\n    function _setHook(address hook) internal virtual {\\n        bytes32 slot = HOOKMANAGER_STORAGE_LOCATION;\\n        assembly {\\n            sstore(slot, hook)\\n        }\\n    }\\n\\n    function _installHook(address hook, bytes calldata data) internal virtual {\\n        address currentHook = _getHook();\\n        if (currentHook != address(0)) {\\n            revert HookAlreadyInstalled(currentHook);\\n        }\\n        _setHook(hook);\\n        IHook(hook).onInstall(data);\\n    }\\n\\n    function _uninstallHook(\\n        address hook,\\n        bytes calldata data\\n    ) internal virtual {\\n        _setHook(address(0));\\n        IHook(hook).onUninstall(data);\\n    }\\n\\n    function _getHook() internal view returns (address _hook) {\\n        bytes32 slot = HOOKMANAGER_STORAGE_LOCATION;\\n        assembly {\\n            _hook := sload(slot)\\n        }\\n    }\\n\\n    function _isHookInstalled(address module) internal view returns (bool) {\\n        return _getHook() == module;\\n    }\\n\\n    function getActiveHook() external view returns (address hook) {\\n        return _getHook();\\n    }\\n}\\n\",\"keccak256\":\"0xf928c40e0ac91b9604ff3ed2d710d11882438c50ef5bde133010e8c5f4b0af5c\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {SentinelListLib, SENTINEL} from \\\"../libs/SentinelList.sol\\\";\\nimport {CallType, CALLTYPE_SINGLE, CALLTYPE_DELEGATECALL, CALLTYPE_STATIC} from \\\"../libs/ModeLib.sol\\\";\\nimport {AccountBase} from \\\"./AccountBase.sol\\\";\\nimport \\\"../interfaces/IERC7579Module.sol\\\";\\nimport \\\"forge-std/interfaces/IERC165.sol\\\";\\nimport \\\"./Receiver.sol\\\";\\nimport {ArrayLib} from \\\"../../libraries/ArrayLib.sol\\\";\\n\\n/**\\n * @title ModuleManager\\n * @author zeroknots.eth | rhinestone.wtf\\n * @dev This contract manages Validator, Executor and Fallback modules for the MSA\\n * @dev it uses SentinelList to manage the linked list of modules\\n * NOTE: the linked list is just an example. accounts may implement this differently\\n */\\nabstract contract ModuleManager is AccountBase, Receiver {\\n    using SentinelListLib for SentinelListLib.SentinelList;\\n\\n    error InvalidModule(address module);\\n    error NoFallbackHandler(bytes4 selector);\\n    error CannotRemoveLastValidator();\\n    error FallbackInvalidCallType();\\n    error InvalidFallbackCaller(address caller);\\n\\n    // keccak256(\\\"modulemanager.storage.msa\\\");\\n    bytes32 internal constant MODULEMANAGER_STORAGE_LOCATION =\\n        0xf88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea02;\\n\\n    struct FallbackHandler {\\n        address handler;\\n        CallType calltype;\\n        address[] allowedCallers;\\n    }\\n\\n    /// @custom:storage-location erc7201:modulemanager.storage.msa\\n    struct ModuleManagerStorage {\\n        // linked list of validators. List is initialized by initializeAccount()\\n        SentinelListLib.SentinelList $validators;\\n        // linked list of executors. List is initialized by initializeAccount()\\n        SentinelListLib.SentinelList $executors;\\n        // single fallback handler for all fallbacks\\n        // account vendors may implement this differently. This is just a reference implementation\\n        mapping(bytes4 selector => FallbackHandler fallbackHandler) $fallbacks;\\n    }\\n\\n    function $moduleManager()\\n        internal\\n        pure\\n        virtual\\n        returns (ModuleManagerStorage storage $ims)\\n    {\\n        bytes32 position = MODULEMANAGER_STORAGE_LOCATION;\\n        assembly {\\n            $ims.slot := position\\n        }\\n    }\\n\\n    modifier onlyExecutorModule() {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        if (!$executors.contains(msg.sender)) revert InvalidModule(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyValidatorModule(address validator) {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        if (!$validators.contains(validator)) revert InvalidModule(validator);\\n        _;\\n    }\\n\\n    function _initModuleManager() internal virtual {\\n        ModuleManagerStorage storage $ims = $moduleManager();\\n        $ims.$executors.init();\\n        $ims.$validators.init();\\n    }\\n\\n    function isAlreadyInitialized() internal view virtual returns (bool) {\\n        ModuleManagerStorage storage $ims = $moduleManager();\\n        return $ims.$validators.alreadyInitialized();\\n    }\\n\\n    /////////////////////////////////////////////////////\\n    //  Manage Validators\\n    ////////////////////////////////////////////////////\\n    function _installValidator(\\n        address validator,\\n        bytes calldata data\\n    ) internal virtual {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        $validators.push(validator);\\n        IValidator(validator).onInstall(data);\\n    }\\n\\n    function _uninstallValidator(\\n        address validator,\\n        bytes calldata data\\n    ) internal {\\n        // TODO: check if its the last validator. this might brick the account\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        (address prev, bytes memory disableModuleData) = abi.decode(\\n            data,\\n            (address, bytes)\\n        );\\n        $validators.pop(prev, validator);\\n        IValidator(validator).onUninstall(disableModuleData);\\n    }\\n\\n    function _isValidatorInstalled(\\n        address validator\\n    ) internal view virtual returns (bool) {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        return $validators.contains(validator);\\n    }\\n\\n    /**\\n     * THIS IS NOT PART OF THE STANDARD\\n     * Helper Function to access linked list\\n     */\\n    function getValidatorPaginated(\\n        address cursor,\\n        uint256 size\\n    ) external view virtual returns (address[] memory array, address next) {\\n        SentinelListLib.SentinelList storage $validators = $moduleManager()\\n            .$validators;\\n        return $validators.getEntriesPaginated(cursor, size);\\n    }\\n\\n    /////////////////////////////////////////////////////\\n    //  Manage Executors\\n    ////////////////////////////////////////////////////\\n\\n    function _installExecutor(address executor, bytes calldata data) internal {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        $executors.push(executor);\\n        IExecutor(executor).onInstall(data);\\n    }\\n\\n    function _uninstallExecutor(\\n        address executor,\\n        bytes calldata data\\n    ) internal {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        (address prev, bytes memory disableModuleData) = abi.decode(\\n            data,\\n            (address, bytes)\\n        );\\n        $executors.pop(prev, executor);\\n        IExecutor(executor).onUninstall(disableModuleData);\\n    }\\n\\n    function _isExecutorInstalled(\\n        address executor\\n    ) internal view virtual returns (bool) {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        return $executors.contains(executor);\\n    }\\n\\n    /**\\n     * THIS IS NOT PART OF THE STANDARD\\n     * Helper Function to access linked list\\n     */\\n    function getExecutorsPaginated(\\n        address cursor,\\n        uint256 size\\n    ) external view virtual returns (address[] memory array, address next) {\\n        SentinelListLib.SentinelList storage $executors = $moduleManager()\\n            .$executors;\\n        return $executors.getEntriesPaginated(cursor, size);\\n    }\\n\\n    /////////////////////////////////////////////////////\\n    //  Manage Fallback\\n    ////////////////////////////////////////////////////\\n\\n    function _installFallbackHandler(\\n        address handler,\\n        bytes calldata params\\n    ) internal virtual {\\n        bytes memory _params = params;\\n        bytes4 selector;\\n        CallType calltype;\\n        address[] memory allowedCallers;\\n        bytes memory initData;\\n        assembly {\\n            let configPtr := add(params.offset, 0x20)\\n            let configLen := calldataload(params.offset)\\n\\n            selector := calldataload(params.offset)\\n            calltype := calldataload(configPtr)\\n\\n            let allowedCallersLen := calldataload(add(configPtr, 0x20))\\n\\n            allowedCallers := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(\\n                    allowedCallers,\\n                    and(add(mul(allowedCallersLen, 0x20), 0x1f), not(0x1f))\\n                )\\n            )\\n\\n            for {\\n                let i := 0\\n            } lt(i, allowedCallersLen) {\\n                i := add(i, 1)\\n            } {\\n                mstore(\\n                    add(allowedCallers, mul(i, 0x20)),\\n                    calldataload(add(configPtr, add(0x60, mul(i, 0x20))))\\n                )\\n            }\\n\\n            let initDataPos := calldataload(add(configPtr, 0x40))\\n            let initDataLen := calldataload(\\n                sub(add(configPtr, initDataPos), 0x20)\\n            )\\n            let initDataPtr := 0x60\\n            mstore(initDataPtr, initDataLen)\\n            calldatacopy(\\n                add(initDataPtr, 0x20),\\n                add(configPtr, initDataPos),\\n                initDataLen\\n            )\\n            initData := initDataPtr\\n        }\\n\\n        if (calltype == CALLTYPE_DELEGATECALL) revert FallbackInvalidCallType();\\n\\n        if (_isFallbackHandlerInstalled(selector)) {\\n            revert(\\\"Function selector already used\\\");\\n        }\\n        $moduleManager().$fallbacks[selector] = FallbackHandler(\\n            handler,\\n            calltype,\\n            allowedCallers\\n        );\\n        IFallback(handler).onInstall(initData);\\n    }\\n\\n    function _uninstallFallbackHandler(\\n        address handler,\\n        bytes calldata deInitData\\n    ) internal virtual {\\n        bytes4 selector = bytes4(deInitData[0:4]);\\n        bytes memory _deInitData = deInitData[4:];\\n\\n        if (!_isFallbackHandlerInstalled(selector)) {\\n            revert(\\\"Function selector not used\\\");\\n        }\\n\\n        FallbackHandler memory activeFallback = $moduleManager().$fallbacks[\\n            selector\\n        ];\\n\\n        if (activeFallback.handler != handler) {\\n            revert(\\\"Function selector not used by this handler\\\");\\n        }\\n\\n        CallType callType = activeFallback.calltype;\\n\\n        if (callType == CALLTYPE_DELEGATECALL) revert FallbackInvalidCallType();\\n        address[] memory allowedCallers = new address[](0);\\n        $moduleManager().$fallbacks[selector] = FallbackHandler(\\n            address(0),\\n            CallType.wrap(0x00),\\n            allowedCallers\\n        );\\n\\n        IFallback(handler).onUninstall(_deInitData);\\n    }\\n\\n    function _isFallbackHandlerInstalled(\\n        bytes4 functionSig\\n    ) internal view virtual returns (bool) {\\n        FallbackHandler storage $fallback = $moduleManager().$fallbacks[\\n            functionSig\\n        ];\\n        return $fallback.handler != address(0);\\n    }\\n\\n    function _isFallbackHandlerInstalled(\\n        bytes4 functionSig,\\n        address _handler\\n    ) internal view virtual returns (bool) {\\n        FallbackHandler storage $fallback = $moduleManager().$fallbacks[\\n            functionSig\\n        ];\\n        return $fallback.handler == _handler;\\n    }\\n\\n    function getActiveFallbackHandler(\\n        bytes4 functionSig\\n    ) external view virtual returns (FallbackHandler memory) {\\n        return $moduleManager().$fallbacks[functionSig];\\n    }\\n\\n    // validates that the caller is allowed and reverts if not.\\n\\n    function _validateCaller(bytes4 sig) private view {\\n        address[] memory allowed = $moduleManager()\\n            .$fallbacks[sig]\\n            .allowedCallers;\\n        if (ArrayLib._contains(allowed, msg.sender) == false) {\\n            revert InvalidFallbackCaller(msg.sender);\\n        }\\n    }\\n\\n    // FALLBACK\\n    // calling _validateCaller()\\n\\n    fallback() external payable override(Receiver) {\\n        _validateCaller(msg.sig);\\n        FallbackHandler storage $fallbackHandler = $moduleManager().$fallbacks[\\n            msg.sig\\n        ];\\n        address handler = $fallbackHandler.handler;\\n        CallType calltype = $fallbackHandler.calltype;\\n\\n        if (handler == address(0)) revert NoFallbackHandler(msg.sig);\\n\\n        if (calltype == CALLTYPE_STATIC) {\\n            assembly {\\n                function allocate(length) -> pos {\\n                    pos := mload(0x40)\\n                    mstore(0x40, add(pos, length))\\n                }\\n\\n                let calldataPtr := allocate(calldatasize())\\n                calldatacopy(calldataPtr, 0, calldatasize())\\n\\n                // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n                // Then the address without padding is stored right after the calldata\\n                let senderPtr := allocate(20)\\n                mstore(senderPtr, shl(96, caller()))\\n\\n                // Add 20 bytes for the address appended add the end\\n                let success := staticcall(\\n                    gas(),\\n                    handler,\\n                    calldataPtr,\\n                    add(calldatasize(), 20),\\n                    0,\\n                    0\\n                )\\n\\n                let returnDataPtr := allocate(returndatasize())\\n                returndatacopy(returnDataPtr, 0, returndatasize())\\n                if iszero(success) {\\n                    revert(returnDataPtr, returndatasize())\\n                }\\n                return(returnDataPtr, returndatasize())\\n            }\\n        }\\n        if (calltype == CALLTYPE_SINGLE) {\\n            assembly {\\n                function allocate(length) -> pos {\\n                    pos := mload(0x40)\\n                    mstore(0x40, add(pos, length))\\n                }\\n\\n                let calldataPtr := allocate(calldatasize())\\n                calldatacopy(calldataPtr, 0, calldatasize())\\n\\n                // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n                // Then the address without padding is stored right after the calldata\\n                let senderPtr := allocate(20)\\n                mstore(senderPtr, shl(96, caller()))\\n\\n                // Add 20 bytes for the address appended add the end\\n                let success := call(\\n                    gas(),\\n                    handler,\\n                    0,\\n                    calldataPtr,\\n                    add(calldatasize(), 20),\\n                    0,\\n                    0\\n                )\\n\\n                let returnDataPtr := allocate(returndatasize())\\n                returndatacopy(returnDataPtr, 0, returndatasize())\\n                if iszero(success) {\\n                    revert(returnDataPtr, returndatasize())\\n                }\\n                return(returnDataPtr, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34980edcd49f6c00978306077fe18171d6eda47a120d7d6071511e782efab33e\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/core/Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title Receiver\\n * @dev This contract receives safe-transferred ERC721 and ERC1155 tokens.\\n * @author Modified from Solady\\n * (https://github.com/Vectorized/solady/blob/main/src/accounts/Receiver.sol)\\n */\\nabstract contract Receiver {\\n    /// @dev For receiving ETH.\\n    receive() external payable virtual {}\\n\\n    /// @dev Fallback function with the `receiverFallback` modifier.\\n    fallback() external payable virtual {}\\n}\\n\",\"keccak256\":\"0xf5ce3193d2ccdd09a14767cb39c775940de4bf99863a63fdb0a99c294a06ee88\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/interfaces/IERC7579Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { CallType, ExecType, ModeCode } from \\\"../libs/ModeLib.sol\\\";\\nimport {PackedUserOperation} from \\\"../../../../account-abstraction/contracts/interfaces/IAccount.sol\\\";\\n\\nstruct Execution {\\n    address target;\\n    uint256 value;\\n    bytes callData;\\n}\\n\\ninterface IERC7579Account {\\n    event ModuleInstalled(uint256 moduleTypeId, address module);\\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * @dev Ensure adequate authorization control: i.e. onlyEntryPointOrSelf\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     */\\n    function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by Executor Modules\\n     * @dev Ensure adequate authorization control: i.e. onlyExecutorModule\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     */\\n    function executeFromExecutor(\\n        ModeCode mode,\\n        bytes calldata executionCalldata\\n    )\\n        external\\n        payable\\n        returns (bytes[] memory returnData);\\n\\n    /**\\n     * @dev ERC-4337 executeUserOp according to ERC-4337 v0.7\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * @dev Ensure adequate authorization control: i.e. onlyEntryPointOrSelf\\n     *      The implementation of the function is OPTIONAL\\n     *\\n     * @param userOp PackedUserOperation struct (see ERC-4337 v0.7+)\\n     */\\n    function executeUserOp(PackedUserOperation calldata userOp) external payable;\\n\\n    /**\\n     * @dev ERC-4337 validateUserOp according to ERC-4337 v0.7\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * this validation function should decode / sload the validator module to validate the userOp\\n     * and call it.\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * @param userOp PackedUserOperation struct (see ERC-4337 v0.7+)\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    )\\n        external\\n        payable\\n        returns (uint256 validSignature);\\n\\n    /**\\n     * @dev ERC-1271 isValidSignature\\n     *         This function is intended to be used to validate a smart account signature\\n     * and may forward the call to a validator module\\n     *\\n     * @param hash The hash of the data that is signed\\n     * @param data The data that is signed\\n     */\\n    function isValidSignature(bytes32 hash, bytes calldata data) external view returns (bytes4);\\n\\n    /**\\n     * @dev installs a Module of a certain type on the smart account\\n     * @dev Implement Authorization control of your chosing\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param initData arbitrary data that may be required on the module during `onInstall`\\n     * initialization.\\n     */\\n    function installModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata initData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @dev uninstalls a Module of a certain type on the smart account\\n     * @dev Implement Authorization control of your chosing\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param deInitData arbitrary data that may be required on the module during `onUninstall`\\n     * de-initialization.\\n     */\\n    function uninstallModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata deInitData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * Function to check if the account supports a certain CallType or ExecType (see ModeLib.sol)\\n     * @param encodedMode the encoded mode\\n     */\\n    function supportsExecutionMode(ModeCode encodedMode) external view returns (bool);\\n\\n    /**\\n     * Function to check if the account supports installation of a certain module type Id\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     */\\n    function supportsModule(uint256 moduleTypeId) external view returns (bool);\\n\\n    /**\\n     * Function to check if the account has a certain module installed\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     *      Note: keep in mind that some contracts can be multiple module types at the same time. It\\n     *            thus may be necessary to query multiple module types\\n     * @param module the module address\\n     * @param additionalContext additional context data that the smart account may interpret to\\n     *                          identifiy conditions under which the module is installed.\\n     *                          usually this is not necessary, but for some special hooks that\\n     *                          are stored in mappings, this param might be needed\\n     */\\n    function isModuleInstalled(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the account id of the smart account\\n     * @return accountImplementationId the account id of the smart account\\n     * the accountId should be structured like so:\\n     *        \\\"vendorname.accountname.semver\\\"\\n     */\\n    function accountId() external view returns (string memory accountImplementationId);\\n}\",\"keccak256\":\"0xb8d6b68dd9ebad9367cb3c2829033692b53b708301978bc2e3c6f9caaf503c8f\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/interfaces/IERC7579Module.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {PackedUserOperation} from \\\"../../../../account-abstraction/contracts/interfaces/PackedUserOperation.sol\\\";\\n\\nuint256 constant VALIDATION_SUCCESS = 0;\\nuint256 constant VALIDATION_FAILED = 1;\\n\\nuint256 constant MODULE_TYPE_VALIDATOR = 1;\\nuint256 constant MODULE_TYPE_EXECUTOR = 2;\\nuint256 constant MODULE_TYPE_FALLBACK = 3;\\nuint256 constant MODULE_TYPE_HOOK = 4;\\n\\ninterface IModule {\\n    error AlreadyInitialized(address smartAccount);\\n    error NotInitialized(address smartAccount);\\n\\n    /**\\n     * @dev This function is called by the smart account during installation of the module\\n     * @param data arbitrary data that may be required on the module during `onInstall`\\n     * initialization\\n     *\\n     * MUST revert on error (i.e. if module is already enabled)\\n     */\\n    function onInstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev This function is called by the smart account during uninstallation of the module\\n     * @param data arbitrary data that may be required on the module during `onUninstall`\\n     * de-initialization\\n     *\\n     * MUST revert on error\\n     */\\n    function onUninstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns boolean value if module is a certain type\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     *\\n     * MUST return true if the module is of the given type and false otherwise\\n     */\\n    function isModuleType(uint256 moduleTypeId) external view returns (bool);\\n\\n    /**\\n     * @dev Returns if the module was already initialized for a provided smartaccount\\n     */\\n    function isInitialized(address smartAccount) external view returns (bool);\\n}\\n\\ninterface IValidator is IModule {\\n    error InvalidTargetAddress(address target);\\n\\n    /**\\n     * @dev Validates a transaction on behalf of the account.\\n     *         This function is intended to be called by the MSA during the ERC-4337 validaton phase\\n     *         Note: solely relying on bytes32 hash and signature is not suffcient for some\\n     * validation implementations (i.e. SessionKeys often need access to userOp.calldata)\\n     * @param userOp The user operation to be validated. The userOp MUST NOT contain any metadata.\\n     * The MSA MUST clean up the userOp before sending it to the validator.\\n     * @param userOpHash The hash of the user operation to be validated\\n     * @return return value according to ERC-4337\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * Validator can be used for ERC-1271 validation\\n     */\\n    function isValidSignatureWithSender(\\n        address sender,\\n        bytes32 hash,\\n        bytes calldata data\\n    )\\n        external\\n        view\\n        returns (bytes4);\\n}\\n\\ninterface IExecutor is IModule { }\\n\\ninterface IHook is IModule {\\n    function preCheck(\\n        address msgSender,\\n        bytes calldata msgData\\n    )\\n        external\\n        returns (bytes memory hookData);\\n    function postCheck(bytes calldata hookData) external returns (bool success);\\n}\\n\\ninterface IFallback is IModule { }\",\"keccak256\":\"0xb70280ab96b9dcfed3c559a3a1ed64850fc2171374e5809d2d2887c4956c8379\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/libs/ModeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ModeLib\\n * To allow smart accounts to be very simple, but allow for more complex execution, A custom mode\\n * encoding is used.\\n *    Function Signature of execute function:\\n *           function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\\n * This allows for a single bytes32 to be used to encode the execution mode, calltype, execType and\\n * context.\\n * NOTE: Simple Account implementations only have to scope for the most significant byte. Account  that\\n * implement\\n * more complex execution modes may use the entire bytes32.\\n *\\n * |--------------------------------------------------------------------|\\n * | CALLTYPE  | EXECTYPE  |   UNUSED   | ModeSelector  |  ModePayload  |\\n * |--------------------------------------------------------------------|\\n * | 1 byte    | 1 byte    |   4 bytes  | 4 bytes       |   22 bytes    |\\n * |--------------------------------------------------------------------|\\n *\\n * CALLTYPE: 1 byte\\n * CallType is used to determine how the executeCalldata paramter of the execute function has to be\\n * decoded.\\n * It can be either single, batch or delegatecall. In the future different calls could be added.\\n * CALLTYPE can be used by a validation module to determine how to decode <userOp.callData[36:]>.\\n *\\n * EXECTYPE: 1 byte\\n * ExecType is used to determine how the account should handle the execution.\\n * It can indicate if the execution should revert on failure or continue execution.\\n * In the future more execution modes may be added.\\n * Default Behavior (EXECTYPE = 0x00) is to revert on a single failed execution. If one execution in\\n * a batch fails, the entire batch is reverted\\n *\\n * UNUSED: 4 bytes\\n * Unused bytes are reserved for future use.\\n *\\n * ModeSelector: bytes4\\n * The \\\"optional\\\" mode selector can be used by account vendors, to implement custom behavior in\\n * their accounts.\\n * the way a ModeSelector is to be calculated is bytes4(keccak256(\\\"vendorname.featurename\\\"))\\n * this is to prevent collisions between different vendors, while allowing innovation and the\\n * development of new features without coordination between ERC-7579 implementing accounts\\n *\\n * ModePayload: 22 bytes\\n * Mode payload is used to pass additional data to the smart account execution, this may be\\n * interpreted depending on the ModeSelector\\n *\\n * ExecutionCallData: n bytes\\n * single, delegatecall or batch exec abi.encoded as bytes\\n */\\nimport { Execution } from \\\"../interfaces/IERC7579Account.sol\\\";\\n\\n// Custom type for improved developer experience\\ntype ModeCode is bytes32;\\n\\ntype CallType is bytes1;\\n\\ntype ExecType is bytes1;\\n\\ntype ModeSelector is bytes4;\\n\\ntype ModePayload is bytes22;\\n\\n// Default CallType\\nCallType constant CALLTYPE_SINGLE = CallType.wrap(0x00);\\n// Batched CallType\\nCallType constant CALLTYPE_BATCH = CallType.wrap(0x01);\\n// @dev Implementing delegatecall is OPTIONAL!\\n// implement delegatecall with extreme care.\\nCallType constant CALLTYPE_STATIC = CallType.wrap(0xFE);\\nCallType constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\\n\\n// @dev default behavior is to revert on failure\\n// To allow very simple accounts to use mode encoding, the default behavior is to revert on failure\\n// Since this is value 0x00, no additional encoding is required for simple accounts\\nExecType constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\\n// @dev account may elect to change execution behavior. For example \\\"try exec\\\" / \\\"allow fail\\\"\\nExecType constant EXECTYPE_TRY = ExecType.wrap(0x01);\\n\\nModeSelector constant MODE_DEFAULT = ModeSelector.wrap(bytes4(0x00000000));\\n// Example declaration of a custom mode selector\\nModeSelector constant MODE_OFFSET = ModeSelector.wrap(bytes4(keccak256(\\\"default.mode.offset\\\")));\\n\\n/**\\n * @dev ModeLib is a helper library to encode/decode ModeCodes\\n */\\nlibrary ModeLib {\\n    function decode(ModeCode mode)\\n        internal\\n        pure\\n        returns (\\n            CallType _calltype,\\n            ExecType _execType,\\n            ModeSelector _modeSelector,\\n            ModePayload _modePayload\\n        )\\n    {\\n        assembly {\\n            _calltype := mode\\n            _execType := shl(8, mode)\\n            _modeSelector := shl(48, mode)\\n            _modePayload := shl(80, mode)\\n        }\\n    }\\n\\n    function encode(\\n        CallType callType,\\n        ExecType execType,\\n        ModeSelector mode,\\n        ModePayload payload\\n    )\\n        internal\\n        pure\\n        returns (ModeCode)\\n    {\\n        return ModeCode.wrap(\\n            bytes32(\\n                abi.encodePacked(callType, execType, bytes4(0), ModeSelector.unwrap(mode), payload)\\n            )\\n        );\\n    }\\n\\n    function encodeSimpleBatch() internal pure returns (ModeCode mode) {\\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\\n    }\\n\\n    function encodeSimpleSingle() internal pure returns (ModeCode mode) {\\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\\n    }\\n\\n    function getCallType(ModeCode mode) internal pure returns (CallType calltype) {\\n        assembly {\\n            calltype := mode\\n        }\\n    }\\n}\\n\\nusing { eqModeSelector as == } for ModeSelector global;\\nusing { eqCallType as == } for CallType global;\\nusing { eqExecType as == } for ExecType global;\\n\\nfunction eqCallType(CallType a, CallType b) pure returns (bool) {\\n    return CallType.unwrap(a) == CallType.unwrap(b);\\n}\\n\\nfunction eqExecType(ExecType a, ExecType b) pure returns (bool) {\\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\\n}\\n\\nfunction eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\\n}\",\"keccak256\":\"0x9c0886362e13274bb5e255ff391b13290461ce02b58d9dff9ae55b5bd01fcba3\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/libs/SentinelList.sol\":{\"content\":\"// https://github.com/zeroknots/sentinellist/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\naddress constant SENTINEL = address(0x1);\\naddress constant ZERO_ADDRESS = address(0x0);\\n\\nlibrary SentinelListLib {\\n    struct SentinelList {\\n        mapping(address => address) entries;\\n    }\\n\\n    error LinkedList_AlreadyInitialized();\\n    error LinkedList_InvalidPage();\\n    error LinkedList_InvalidEntry(address entry);\\n    error LinkedList_EntryAlreadyInList(address entry);\\n\\n    function init(SentinelList storage self) internal {\\n        if (alreadyInitialized(self)) revert LinkedList_AlreadyInitialized();\\n        self.entries[SENTINEL] = SENTINEL;\\n    }\\n\\n    function alreadyInitialized(\\n        SentinelList storage self\\n    ) internal view returns (bool) {\\n        return self.entries[SENTINEL] != ZERO_ADDRESS;\\n    }\\n\\n    function getNext(\\n        SentinelList storage self,\\n        address entry\\n    ) internal view returns (address) {\\n        if (entry == ZERO_ADDRESS) {\\n            revert LinkedList_InvalidEntry(entry);\\n        }\\n        return self.entries[entry];\\n    }\\n\\n    function push(SentinelList storage self, address newEntry) internal {\\n        if (newEntry == ZERO_ADDRESS || newEntry == SENTINEL) {\\n            revert LinkedList_InvalidEntry(newEntry);\\n        }\\n        if (self.entries[newEntry] != ZERO_ADDRESS)\\n            revert LinkedList_EntryAlreadyInList(newEntry);\\n        self.entries[newEntry] = self.entries[SENTINEL];\\n        self.entries[SENTINEL] = newEntry;\\n    }\\n\\n    function pop(\\n        SentinelList storage self,\\n        address prevEntry,\\n        address popEntry\\n    ) internal {\\n        if (popEntry == ZERO_ADDRESS || popEntry == SENTINEL) {\\n            revert LinkedList_InvalidEntry(prevEntry);\\n        }\\n        if (self.entries[prevEntry] != popEntry)\\n            revert LinkedList_InvalidEntry(popEntry);\\n        self.entries[prevEntry] = self.entries[popEntry];\\n        self.entries[popEntry] = ZERO_ADDRESS;\\n    }\\n\\n    function contains(\\n        SentinelList storage self,\\n        address entry\\n    ) internal view returns (bool) {\\n        return SENTINEL != entry && self.entries[entry] != ZERO_ADDRESS;\\n    }\\n\\n    function getEntriesPaginated(\\n        SentinelList storage self,\\n        address start,\\n        uint256 pageSize\\n    ) internal view returns (address[] memory array, address next) {\\n        if (start != SENTINEL && contains(self, start))\\n            revert LinkedList_InvalidEntry(start);\\n        if (pageSize == 0) revert LinkedList_InvalidPage();\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 entryCount = 0;\\n        next = self.entries[start];\\n        while (\\n            next != ZERO_ADDRESS && next != SENTINEL && entryCount < pageSize\\n        ) {\\n            array[entryCount] = next;\\n            next = self.entries[next];\\n            entryCount++;\\n        }\\n\\n        /**\\n         * Because of the argument validation, we can assume that the loop will always iterate over the valid entry list values\\n         *       and the `next` variable will either be an enabled entry or a sentinel address (signalling the end).\\n         *\\n         *       If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the entry array\\n         *       because the `next` variable (which is a entry by itself) acting as a pointer to the start of the next page is neither\\n         *       incSENTINELrent page, nor will it be included in the next one if you pass it as a start.\\n         */\\n        if (next != SENTINEL) {\\n            next = array[entryCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(array, entryCount)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb80e28790644ad9d8080197483988cc9eed7a9c9e1c3583139d5f58b8fc28e74\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/erc7579-ref-impl/utils/Bootstrap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"../core/ModuleManager.sol\\\";\\nimport \\\"../core/HookManager.sol\\\";\\n\\nimport \\\"../interfaces/IERC7579Module.sol\\\";\\n\\nstruct BootstrapConfig {\\n    address module;\\n    bytes data;\\n}\\n\\ncontract Bootstrap is ModuleManager, HookManager {\\n    function singleInitMSA(IModule validator, bytes calldata data) external {\\n        // init validator\\n        _installValidator(address(validator), data);\\n    }\\n\\n    /**\\n     * This function is intended to be called by the MSA with a delegatecall.\\n     * Make sure that the MSA already initilazed the linked lists in the ModuleManager prior to\\n     * calling this function\\n     */\\n    function initMSA(\\n        BootstrapConfig[] calldata $valdiators,\\n        BootstrapConfig[] calldata $executors,\\n        BootstrapConfig calldata _hook,\\n        BootstrapConfig[] calldata _fallbacks\\n    )\\n        external\\n    {\\n        // init validators\\n        for (uint256 i; i < $valdiators.length; i++) {\\n            _installValidator($valdiators[i].module, $valdiators[i].data);\\n        }\\n\\n        // init executors\\n        for (uint256 i; i < $executors.length; i++) {\\n            if ($executors[i].module == address(0)) continue;\\n            _installExecutor($executors[i].module, $executors[i].data);\\n        }\\n\\n        // init hook\\n        if (_hook.module != address(0)) {\\n            _installHook(_hook.module, _hook.data);\\n        }\\n\\n        // init fallback\\n        for (uint256 i; i < _fallbacks.length; i++) {\\n            if (_fallbacks[i].module == address(0)) continue;\\n            _installFallbackHandler(_fallbacks[i].module, _fallbacks[i].data);\\n        }\\n    }\\n\\n    function _getInitMSACalldata(\\n        BootstrapConfig[] calldata $valdiators,\\n        BootstrapConfig[] calldata $executors,\\n        BootstrapConfig calldata _hook,\\n        BootstrapConfig[] calldata _fallbacks\\n    )\\n        external\\n        view\\n        returns (bytes memory init)\\n    {\\n        init = abi.encode(\\n            address(this),\\n            abi.encodeCall(this.initMSA, ($valdiators, $executors, _hook, _fallbacks))\\n        );\\n    }\\n}\",\"keccak256\":\"0xbc498a2edba970532a01c3f7ec5b6f3526ad69531884d195bca87f72809c59a7\",\"license\":\"MIT\"},\"src/modular-etherspot-wallet/libraries/ArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary ArrayLib {\\n    function _contains(\\n        address[] memory A,\\n        address a\\n    ) internal pure returns (bool) {\\n        (, bool isIn) = _indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    function _indexOf(\\n        address[] memory A,\\n        address a\\n    ) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _removeElement(\\n        address[] storage _data,\\n        address _element\\n    ) internal {\\n        uint256 length = _data.length;\\n        // remove item from array and resize array\\n        for (uint256 ii = 0; ii < length; ii++) {\\n            if (_data[ii] == _element) {\\n                if (length > 1) {\\n                    _data[ii] = _data[length - 1];\\n                }\\n                _data.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _removeElement(\\n        address[] memory _data,\\n        address _element\\n    ) internal pure returns (address[] memory) {\\n        address[] memory newData = new address[](_data.length - 1);\\n        uint256 j;\\n        for (uint256 i; i < _data.length; i++) {\\n            if (_data[i] != _element) {\\n                newData[j] = _data[i];\\n                j++;\\n            }\\n        }\\n        return newData;\\n    }\\n}\\n\",\"keccak256\":\"0x6179c61cbc4fc0c811dce30e94e4ecf647c472c57ad10dc8cefb7b9cbde458d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061158c806100206000396000f3fe60806040526004361061007f5760003560e01c8063855713681161004e578063855713681461025a578063b0d691fe14610288578063ea5f61d0146102ab578063eac9b20d146102cb57610086565b80630a664dba146101bb5780635e87556d146101ed578063642219af1461021a5780636b0d5cc41461023a57610086565b3661008657005b61009b6000356001600160e01b0319166102f8565b600080356001600160e01b03191681526000805160206115378339815191526020526040902080546001600160a01b03811690600160a01b900460f81b8161010957604051632464e76d60e11b81526001600160e01b03196000351660048201526024015b60405180910390fd5b61011781607f60f91b6103ac565b1561016b5760408051368101909152366000823760408051601481019091523360601b90526000803660140183865afa90506101593d60408051918201905290565b3d6000823e81610167573d81fd5b3d81f35b6101768160006103ac565b156101b95760408051368101909152366000823760408051601481019091523360601b9052600080366014018382875af190506101593d60408051918201905290565b005b3480156101c757600080fd5b506101d06103c3565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101f957600080fd5b5061020d610208366004610fab565b6103f2565b6040516101e491906110b8565b34801561022657600080fd5b506101b9610235366004610fab565b61047b565b34801561024657600080fd5b506101b96102553660046110e3565b6106c7565b34801561026657600080fd5b5061027a610275366004611168565b6106d7565b6040516101e4929190611194565b34801561029457600080fd5b506f71727de22e5e9d8baf0edac6f37da0326101d0565b3480156102b757600080fd5b5061027a6102c6366004611168565b610714565b3480156102d757600080fd5b506102eb6102e63660046111f7565b610744565b6040516101e49190611221565b6001600160e01b031981166000908152600080516020611537833981519152602090815260408083206001018054825181850281018501909352808352919290919083018282801561037357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610355575b505050505090506103848133610817565b15156000036103a8576040516332cf492b60e11b8152336004820152602401610100565b5050565b6001600160f81b0319828116908216145b92915050565b60006103ed7f36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb284316085490565b905090565b606030306001600160a01b031663642219af8a8a8a8a8a8a8a60405160240161042197969594939291906113a6565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505060405160200161045f929190611404565b6040516020818303038152906040529050979650505050505050565b60005b868110156104fa576104f288888381811061049b5761049b611430565b90506020028101906104ad9190611446565b6104bb906020810190611466565b8989848181106104cd576104cd611430565b90506020028101906104df9190611446565b6104ed906020810190611483565b61082d565b60010161047e565b5060005b848110156105bc57600086868381811061051a5761051a611430565b905060200281019061052c9190611446565b61053a906020810190611466565b6001600160a01b0316146105b4576105b486868381811061055d5761055d611430565b905060200281019061056f9190611446565b61057d906020810190611466565b87878481811061058f5761058f611430565b90506020028101906105a19190611446565b6105af906020810190611483565b6108b4565b6001016104fe565b5060006105cc6020850185611466565b6001600160a01b0316146105fc576105fc6105ea6020850185611466565b6105f76020860186611483565b6108df565b60005b818110156106bd57600083838381811061061b5761061b611430565b905060200281019061062d9190611446565b61063b906020810190611466565b6001600160a01b0316146106b5576106b583838381811061065e5761065e611430565b90506020028101906106709190611446565b61067e906020810190611466565b84848481811061069057610690611430565b90506020028101906106a29190611446565b6106b0906020810190611483565b610966565b6001016105ff565b5050505050505050565b6106d283838361082d565b505050565b606060007ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea02610707818686610bd7565b92509250505b9250929050565b606060007ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea03610707818686610bd7565b6040805160608082018352600080835260208084018290528385018390526001600160e01b0319861682526000805160206115378339815191528152908490208451928301855280546001600160a01b0381168452600160a01b900460f81b6001600160f81b03191683830152600181018054865181850281018501885281815295969495929486019383018282801561080757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107e9575b5050505050815250509050919050565b6000806108248484610d74565b95945050505050565b7ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea026108588185610dda565b6040516306d61fe760e41b81526001600160a01b03851690636d61fe709061088690869086906004016114ca565b600060405180830381600087803b1580156108a057600080fd5b505af11580156106bd573d6000803e3d6000fd5b7ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea036108588185610dda565b60006109097f36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb284316085490565b90506001600160a01b0381161561093e5760405163741cbe0360e01b81526001600160a01b0382166004820152602401610100565b610858847f36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb2843160855565b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051818a01356020818102601f01601f19168301909352969750893596918a018035965090945060609350915b818110156109e8576020810283810160600135908601526001016109c9565b505060408101356020818301033560608181528183850160208301379350610a1e92508591506001600160f81b031990506103ac565b15610a3c57604051633accf26360e11b815260040160405180910390fd5b6001600160e01b03198416600090815260008051602061153783398151915260205260409020546001600160a01b031615610ab95760405162461bcd60e51b815260206004820152601e60248201527f46756e6374696f6e2073656c6563746f7220616c7265616479207573656400006044820152606401610100565b604080516060810182526001600160a01b038a1681526001600160f81b0319851660208201529081018390527ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea026001600160e01b0319861660009081526002919091016020908152604091829020835181548584015160f81c600160a01b026001600160a81b03199091166001600160a01b0390921691909117178155918301518051610b6c9260018501920190610eec565b50506040516306d61fe760e41b81526001600160a01b038a169150636d61fe7090610b9b9084906004016110b8565b600060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b505050505050505050505050565b606060006001600160a01b038416600114801590610bfa5750610bfa8585610eb0565b15610c2357604051637c84ecfb60e01b81526001600160a01b0385166004820152602401610100565b82600003610c445760405163f725081760e01b815260040160405180910390fd5b8267ffffffffffffffff811115610c5d57610c5d6114de565b604051908082528060200260200182016040528015610c86578160200160208202803683370190505b506001600160a01b03808616600090815260208890526040812054929450911691505b6001600160a01b03821615801590610ccb57506001600160a01b038216600114155b8015610cd657508381105b15610d305781838281518110610cee57610cee611430565b6001600160a01b039283166020918202929092018101919091529281166000908152928790526040909220549091169080610d288161150a565b915050610ca9565b6001600160a01b038216600114610d685782610d4d600183611523565b81518110610d5d57610d5d611430565b602002602001015191505b80835250935093915050565b81516000908190815b81811015610dcc57846001600160a01b0316868281518110610da157610da1611430565b60200260200101516001600160a01b031603610dc45792506001915061070d9050565b600101610d7d565b506000958695509350505050565b6001600160a01b0381161580610df957506001600160a01b0381166001145b15610e2257604051637c84ecfb60e01b81526001600160a01b0382166004820152602401610100565b6001600160a01b038181166000908152602084905260409020541615610e6657604051631034f46960e21b81526001600160a01b0382166004820152602401610100565b60016000818152602093909352604080842080546001600160a01b039485168087529286208054959091166001600160a01b03199586161790559190935280549091169091179055565b600060016001600160a01b03831614801590610ee557506001600160a01b038281166000908152602085905260409020541615155b9392505050565b828054828255906000526020600020908101928215610f41579160200282015b82811115610f4157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610f0c565b50610f4d929150610f51565b5090565b5b80821115610f4d5760008155600101610f52565b60008083601f840112610f7857600080fd5b50813567ffffffffffffffff811115610f9057600080fd5b6020830191508360208260051b850101111561070d57600080fd5b60008060008060008060006080888a031215610fc657600080fd5b873567ffffffffffffffff80821115610fde57600080fd5b610fea8b838c01610f66565b909950975060208a013591508082111561100357600080fd5b61100f8b838c01610f66565b909750955060408a013591508082111561102857600080fd5b908901906040828c03121561103c57600080fd5b9093506060890135908082111561105257600080fd5b5061105f8a828b01610f66565b989b979a50959850939692959293505050565b6000815180845260005b818110156110985760208185018101518683018201520161107c565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ee56020830184611072565b6001600160a01b03811681146110e057600080fd5b50565b6000806000604084860312156110f857600080fd5b8335611103816110cb565b9250602084013567ffffffffffffffff8082111561112057600080fd5b818601915086601f83011261113457600080fd5b81358181111561114357600080fd5b87602082850101111561115557600080fd5b6020830194508093505050509250925092565b6000806040838503121561117b57600080fd5b8235611186816110cb565b946020939093013593505050565b604080825283519082018190526000906020906060840190828701845b828110156111d65781516001600160a01b0316845292840192908401906001016111b1565b5050506001600160a01b039490941660209390930192909252509092915050565b60006020828403121561120957600080fd5b81356001600160e01b031981168114610ee557600080fd5b602080825282516001600160a01b0390811683830152838201516001600160f81b031916604080850191909152840151606080850152805160808501819052600093929183019190849060a08701905b8083101561129357845184168252938501936001929092019190850190611271565b50979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081356112d5816110cb565b6001600160a01b03168352602082013536839003601e190181126112f857600080fd5b820160208101903567ffffffffffffffff81111561131557600080fd5b80360382131561132457600080fd5b6040602086015261082460408601828461129f565b6000838385526020808601955060208560051b830101846000805b8881101561139857858403601f19018a52823536899003603e19018112611379578283fd5b611385858a83016112c8565b9a86019a94505091840191600101611354565b509198975050505050505050565b6080815260006113ba60808301898b611339565b82810360208401526113cd81888a611339565b905082810360408401526113e181876112c8565b905082810360608401526113f6818587611339565b9a9950505050505050505050565b6001600160a01b038316815260406020820181905260009061142890830184611072565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261145c57600080fd5b9190910192915050565b60006020828403121561147857600080fd5b8135610ee5816110cb565b6000808335601e1984360301811261149a57600080fd5b83018035915067ffffffffffffffff8211156114b557600080fd5b60200191503681900382131561070d57600080fd5b60208152600061142860208301848661129f565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161151c5761151c6114f4565b5060010190565b818103818111156103bd576103bd6114f456fef88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea04a2646970667358221220ec94a91bf1dcbd61a7c2012d6f18261736eab44e48644691470d684ac148dccc64736f6c63430008170033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063855713681161004e578063855713681461025a578063b0d691fe14610288578063ea5f61d0146102ab578063eac9b20d146102cb57610086565b80630a664dba146101bb5780635e87556d146101ed578063642219af1461021a5780636b0d5cc41461023a57610086565b3661008657005b61009b6000356001600160e01b0319166102f8565b600080356001600160e01b03191681526000805160206115378339815191526020526040902080546001600160a01b03811690600160a01b900460f81b8161010957604051632464e76d60e11b81526001600160e01b03196000351660048201526024015b60405180910390fd5b61011781607f60f91b6103ac565b1561016b5760408051368101909152366000823760408051601481019091523360601b90526000803660140183865afa90506101593d60408051918201905290565b3d6000823e81610167573d81fd5b3d81f35b6101768160006103ac565b156101b95760408051368101909152366000823760408051601481019091523360601b9052600080366014018382875af190506101593d60408051918201905290565b005b3480156101c757600080fd5b506101d06103c3565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101f957600080fd5b5061020d610208366004610fab565b6103f2565b6040516101e491906110b8565b34801561022657600080fd5b506101b9610235366004610fab565b61047b565b34801561024657600080fd5b506101b96102553660046110e3565b6106c7565b34801561026657600080fd5b5061027a610275366004611168565b6106d7565b6040516101e4929190611194565b34801561029457600080fd5b506f71727de22e5e9d8baf0edac6f37da0326101d0565b3480156102b757600080fd5b5061027a6102c6366004611168565b610714565b3480156102d757600080fd5b506102eb6102e63660046111f7565b610744565b6040516101e49190611221565b6001600160e01b031981166000908152600080516020611537833981519152602090815260408083206001018054825181850281018501909352808352919290919083018282801561037357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610355575b505050505090506103848133610817565b15156000036103a8576040516332cf492b60e11b8152336004820152602401610100565b5050565b6001600160f81b0319828116908216145b92915050565b60006103ed7f36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb284316085490565b905090565b606030306001600160a01b031663642219af8a8a8a8a8a8a8a60405160240161042197969594939291906113a6565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505060405160200161045f929190611404565b6040516020818303038152906040529050979650505050505050565b60005b868110156104fa576104f288888381811061049b5761049b611430565b90506020028101906104ad9190611446565b6104bb906020810190611466565b8989848181106104cd576104cd611430565b90506020028101906104df9190611446565b6104ed906020810190611483565b61082d565b60010161047e565b5060005b848110156105bc57600086868381811061051a5761051a611430565b905060200281019061052c9190611446565b61053a906020810190611466565b6001600160a01b0316146105b4576105b486868381811061055d5761055d611430565b905060200281019061056f9190611446565b61057d906020810190611466565b87878481811061058f5761058f611430565b90506020028101906105a19190611446565b6105af906020810190611483565b6108b4565b6001016104fe565b5060006105cc6020850185611466565b6001600160a01b0316146105fc576105fc6105ea6020850185611466565b6105f76020860186611483565b6108df565b60005b818110156106bd57600083838381811061061b5761061b611430565b905060200281019061062d9190611446565b61063b906020810190611466565b6001600160a01b0316146106b5576106b583838381811061065e5761065e611430565b90506020028101906106709190611446565b61067e906020810190611466565b84848481811061069057610690611430565b90506020028101906106a29190611446565b6106b0906020810190611483565b610966565b6001016105ff565b5050505050505050565b6106d283838361082d565b505050565b606060007ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea02610707818686610bd7565b92509250505b9250929050565b606060007ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea03610707818686610bd7565b6040805160608082018352600080835260208084018290528385018390526001600160e01b0319861682526000805160206115378339815191528152908490208451928301855280546001600160a01b0381168452600160a01b900460f81b6001600160f81b03191683830152600181018054865181850281018501885281815295969495929486019383018282801561080757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107e9575b5050505050815250509050919050565b6000806108248484610d74565b95945050505050565b7ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea026108588185610dda565b6040516306d61fe760e41b81526001600160a01b03851690636d61fe709061088690869086906004016114ca565b600060405180830381600087803b1580156108a057600080fd5b505af11580156106bd573d6000803e3d6000fd5b7ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea036108588185610dda565b60006109097f36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb284316085490565b90506001600160a01b0381161561093e5760405163741cbe0360e01b81526001600160a01b0382166004820152602401610100565b610858847f36e05829dd1b9a4411d96a3549582172d7f071c1c0db5c573fcf94eb2843160855565b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051818a01356020818102601f01601f19168301909352969750893596918a018035965090945060609350915b818110156109e8576020810283810160600135908601526001016109c9565b505060408101356020818301033560608181528183850160208301379350610a1e92508591506001600160f81b031990506103ac565b15610a3c57604051633accf26360e11b815260040160405180910390fd5b6001600160e01b03198416600090815260008051602061153783398151915260205260409020546001600160a01b031615610ab95760405162461bcd60e51b815260206004820152601e60248201527f46756e6374696f6e2073656c6563746f7220616c7265616479207573656400006044820152606401610100565b604080516060810182526001600160a01b038a1681526001600160f81b0319851660208201529081018390527ff88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea026001600160e01b0319861660009081526002919091016020908152604091829020835181548584015160f81c600160a01b026001600160a81b03199091166001600160a01b0390921691909117178155918301518051610b6c9260018501920190610eec565b50506040516306d61fe760e41b81526001600160a01b038a169150636d61fe7090610b9b9084906004016110b8565b600060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b505050505050505050505050565b606060006001600160a01b038416600114801590610bfa5750610bfa8585610eb0565b15610c2357604051637c84ecfb60e01b81526001600160a01b0385166004820152602401610100565b82600003610c445760405163f725081760e01b815260040160405180910390fd5b8267ffffffffffffffff811115610c5d57610c5d6114de565b604051908082528060200260200182016040528015610c86578160200160208202803683370190505b506001600160a01b03808616600090815260208890526040812054929450911691505b6001600160a01b03821615801590610ccb57506001600160a01b038216600114155b8015610cd657508381105b15610d305781838281518110610cee57610cee611430565b6001600160a01b039283166020918202929092018101919091529281166000908152928790526040909220549091169080610d288161150a565b915050610ca9565b6001600160a01b038216600114610d685782610d4d600183611523565b81518110610d5d57610d5d611430565b602002602001015191505b80835250935093915050565b81516000908190815b81811015610dcc57846001600160a01b0316868281518110610da157610da1611430565b60200260200101516001600160a01b031603610dc45792506001915061070d9050565b600101610d7d565b506000958695509350505050565b6001600160a01b0381161580610df957506001600160a01b0381166001145b15610e2257604051637c84ecfb60e01b81526001600160a01b0382166004820152602401610100565b6001600160a01b038181166000908152602084905260409020541615610e6657604051631034f46960e21b81526001600160a01b0382166004820152602401610100565b60016000818152602093909352604080842080546001600160a01b039485168087529286208054959091166001600160a01b03199586161790559190935280549091169091179055565b600060016001600160a01b03831614801590610ee557506001600160a01b038281166000908152602085905260409020541615155b9392505050565b828054828255906000526020600020908101928215610f41579160200282015b82811115610f4157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610f0c565b50610f4d929150610f51565b5090565b5b80821115610f4d5760008155600101610f52565b60008083601f840112610f7857600080fd5b50813567ffffffffffffffff811115610f9057600080fd5b6020830191508360208260051b850101111561070d57600080fd5b60008060008060008060006080888a031215610fc657600080fd5b873567ffffffffffffffff80821115610fde57600080fd5b610fea8b838c01610f66565b909950975060208a013591508082111561100357600080fd5b61100f8b838c01610f66565b909750955060408a013591508082111561102857600080fd5b908901906040828c03121561103c57600080fd5b9093506060890135908082111561105257600080fd5b5061105f8a828b01610f66565b989b979a50959850939692959293505050565b6000815180845260005b818110156110985760208185018101518683018201520161107c565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ee56020830184611072565b6001600160a01b03811681146110e057600080fd5b50565b6000806000604084860312156110f857600080fd5b8335611103816110cb565b9250602084013567ffffffffffffffff8082111561112057600080fd5b818601915086601f83011261113457600080fd5b81358181111561114357600080fd5b87602082850101111561115557600080fd5b6020830194508093505050509250925092565b6000806040838503121561117b57600080fd5b8235611186816110cb565b946020939093013593505050565b604080825283519082018190526000906020906060840190828701845b828110156111d65781516001600160a01b0316845292840192908401906001016111b1565b5050506001600160a01b039490941660209390930192909252509092915050565b60006020828403121561120957600080fd5b81356001600160e01b031981168114610ee557600080fd5b602080825282516001600160a01b0390811683830152838201516001600160f81b031916604080850191909152840151606080850152805160808501819052600093929183019190849060a08701905b8083101561129357845184168252938501936001929092019190850190611271565b50979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081356112d5816110cb565b6001600160a01b03168352602082013536839003601e190181126112f857600080fd5b820160208101903567ffffffffffffffff81111561131557600080fd5b80360382131561132457600080fd5b6040602086015261082460408601828461129f565b6000838385526020808601955060208560051b830101846000805b8881101561139857858403601f19018a52823536899003603e19018112611379578283fd5b611385858a83016112c8565b9a86019a94505091840191600101611354565b509198975050505050505050565b6080815260006113ba60808301898b611339565b82810360208401526113cd81888a611339565b905082810360408401526113e181876112c8565b905082810360608401526113f6818587611339565b9a9950505050505050505050565b6001600160a01b038316815260406020820181905260009061142890830184611072565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261145c57600080fd5b9190910192915050565b60006020828403121561147857600080fd5b8135610ee5816110cb565b6000808335601e1984360301811261149a57600080fd5b83018035915067ffffffffffffffff8211156114b557600080fd5b60200191503681900382131561070d57600080fd5b60208152600061142860208301848661129f565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161151c5761151c6114f4565b5060010190565b818103818111156103bd576103bd6114f456fef88ce1fdb7fb1cbd3282e49729100fa3f2d6ee9f797961fe4fb1871cea89ea04a2646970667358221220ec94a91bf1dcbd61a7c2012d6f18261736eab44e48644691470d684ac148dccc64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExecutorsPaginated(address,uint256)": {
        "notice": "THIS IS NOT PART OF THE STANDARD Helper Function to access linked list"
      },
      "getValidatorPaginated(address,uint256)": {
        "notice": "THIS IS NOT PART OF THE STANDARD Helper Function to access linked list"
      },
      "initMSA((address,bytes)[],(address,bytes)[],(address,bytes),(address,bytes)[])": {
        "notice": "This function is intended to be called by the MSA with a delegatecall. Make sure that the MSA already initilazed the linked lists in the ModuleManager prior to calling this function"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}